# frozen_string_literal: true

# #Twitter API v2
#
# Twitter API v2 available endpoints
#
# The version of the OpenAPI document: 2.62
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.5.0
#

require "spec_helper"
require "json"

# Unit tests for Xbird::DirectMessagesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "DirectMessagesApi" do
  before do
    # run before each test
    @api_instance = Xbird::DirectMessagesApi.new
  end

  after do
    # run after each test
  end

  describe "test an instance of DirectMessagesApi" do
    it "should create an instance of DirectMessagesApi" do
      expect(@api_instance).to be_instance_of(Xbird::DirectMessagesApi)
    end
  end

  # unit tests for dm_conversation_by_id_event_id_create
  # Send a new message to a DM Conversation
  # Creates a new message for a DM Conversation specified by DM Conversation ID
  # @param dm_conversation_id The DM Conversation ID.
  # @param [Hash] opts the optional parameters
  # @option opts [CreateMessageRequest] :create_message_request
  # @return [CreateDmEventResponse]
  describe "dm_conversation_by_id_event_id_create test" do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for dm_conversation_id_create
  # Create a new DM Conversation
  # Creates a new DM Conversation.
  # @param [Hash] opts the optional parameters
  # @option opts [CreateDmConversationRequest] :create_dm_conversation_request
  # @return [CreateDmEventResponse]
  describe "dm_conversation_id_create test" do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for dm_conversation_with_user_event_id_create
  # Send a new message to a user
  # Creates a new message for a DM Conversation with a participant user by ID
  # @param participant_id The ID of the recipient user that will receive the DM.
  # @param [Hash] opts the optional parameters
  # @option opts [CreateMessageRequest] :create_message_request
  # @return [CreateDmEventResponse]
  describe "dm_conversation_with_user_event_id_create test" do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_dm_conversations_id_dm_events
  # Get DM Events for a DM Conversation
  # Returns DM Events for a DM Conversation
  # @param id The DM Conversation ID.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :max_results The maximum number of results.
  # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
  # @option opts [Array<String>] :event_types The set of event_types to include in the results.
  # @option opts [Array<String>] :dm_event_fields A comma separated list of DmEvent fields to display.
  # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
  # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
  # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
  # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
  # @return [Get2DmConversationsIdDmEventsResponse]
  describe "get_dm_conversations_id_dm_events test" do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_dm_conversations_with_participant_id_dm_events
  # Get DM Events for a DM Conversation
  # Returns DM Events for a DM Conversation
  # @param participant_id The ID of the participant user for the One to One DM conversation.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :max_results The maximum number of results.
  # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
  # @option opts [Array<String>] :event_types The set of event_types to include in the results.
  # @option opts [Array<String>] :dm_event_fields A comma separated list of DmEvent fields to display.
  # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
  # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
  # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
  # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
  # @return [Get2DmConversationsWithParticipantIdDmEventsResponse]
  describe "get_dm_conversations_with_participant_id_dm_events test" do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_dm_events
  # Get recent DM Events
  # Returns recent DM Events across DM conversations
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :max_results The maximum number of results.
  # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
  # @option opts [Array<String>] :event_types The set of event_types to include in the results.
  # @option opts [Array<String>] :dm_event_fields A comma separated list of DmEvent fields to display.
  # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
  # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
  # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
  # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
  # @return [Get2DmEventsResponse]
  describe "get_dm_events test" do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end
end
