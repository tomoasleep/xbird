# frozen_string_literal: true

# #Twitter API v2
#
# Twitter API v2 available endpoints
#
# The version of the OpenAPI document: 2.62
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.5.0
#

require "spec_helper"
require "json"

# Unit tests for Xbird::UsersApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "UsersApi" do
  before do
    # run before each test
    @api_instance = Xbird::UsersApi.new
  end

  after do
    # run after each test
  end

  describe "test an instance of UsersApi" do
    it "should create an instance of UsersApi" do
      expect(@api_instance).to be_instance_of(Xbird::UsersApi)
    end
  end

  # unit tests for find_my_user
  # User lookup me
  # This endpoint returns information about the requesting User.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
  # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
  # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
  # @return [Get2UsersMeResponse]
  describe "find_my_user test" do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for find_user_by_id
  # User lookup by ID
  # This endpoint returns information about a User. Specify User by ID.
  # @param id The ID of the User to lookup.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
  # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
  # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
  # @return [Get2UsersIdResponse]
  describe "find_user_by_id test" do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for find_user_by_username
  # User lookup by username
  # This endpoint returns information about a User. Specify User by username.
  # @param username A username.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
  # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
  # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
  # @return [Get2UsersByUsernameUsernameResponse]
  describe "find_user_by_username test" do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for find_users_by_id
  # User lookup by IDs
  # This endpoint returns information about Users. Specify Users by their ID.
  # @param ids A list of User IDs, comma-separated. You can specify up to 100 IDs.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
  # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
  # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
  # @return [Get2UsersResponse]
  describe "find_users_by_id test" do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for find_users_by_username
  # User lookup by usernames
  # This endpoint returns information about Users. Specify Users by their username.
  # @param usernames A list of usernames, comma-separated.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
  # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
  # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
  # @return [Get2UsersByResponse]
  describe "find_users_by_username test" do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_get_followers
  # Returns User objects that follow a List by the provided List ID
  # Returns a list of Users that follow a List by the provided List ID
  # @param id The ID of the List.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :max_results The maximum number of results.
  # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
  # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
  # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
  # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
  # @return [Get2ListsIdFollowersResponse]
  describe "list_get_followers test" do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_get_members
  # Returns User objects that are members of a List by the provided List ID.
  # Returns a list of Users that are members of a List by the provided List ID.
  # @param id The ID of the List.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :max_results The maximum number of results.
  # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
  # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
  # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
  # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
  # @return [Get2ListsIdMembersResponse]
  describe "list_get_members test" do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for tweets_id_liking_users
  # Returns User objects that have liked the provided Tweet ID
  # Returns a list of Users that have liked the provided Tweet ID
  # @param id A single Tweet ID.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :max_results The maximum number of results.
  # @option opts [String] :pagination_token This parameter is used to get the next &#39;page&#39; of results.
  # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
  # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
  # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
  # @return [Get2TweetsIdLikingUsersResponse]
  describe "tweets_id_liking_users test" do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for tweets_id_retweeting_users
  # Returns User objects that have retweeted the provided Tweet ID
  # Returns a list of Users that have retweeted the provided Tweet ID
  # @param id A single Tweet ID.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :max_results The maximum number of results.
  # @option opts [String] :pagination_token This parameter is used to get the next &#39;page&#39; of results.
  # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
  # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
  # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
  # @return [Get2TweetsIdRetweetedByResponse]
  describe "tweets_id_retweeting_users test" do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_block
  # Block User by User ID
  # Causes the User (in the path) to block the target User. The User (in the path) must match the User context authorizing the request
  # @param id The ID of the authenticated source User that is requesting to block the target User.
  # @param block_user_request
  # @param [Hash] opts the optional parameters
  # @return [BlockUserMutationResponse]
  describe "users_id_block test" do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_blocking
  # Returns User objects that are blocked by provided User ID
  # Returns a list of Users that are blocked by the provided User ID
  # @param id The ID of the authenticated source User for whom to return results.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :max_results The maximum number of results.
  # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
  # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
  # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
  # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
  # @return [Get2UsersIdBlockingResponse]
  describe "users_id_blocking test" do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_follow
  # Follow User
  # Causes the User(in the path) to follow, or “request to follow” for protected Users, the target User. The User(in the path) must match the User context authorizing the request
  # @param id The ID of the authenticated source User that is requesting to follow the target User.
  # @param [Hash] opts the optional parameters
  # @option opts [UsersFollowingCreateRequest] :users_following_create_request
  # @return [UsersFollowingCreateResponse]
  describe "users_id_follow test" do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_followers
  # Followers by User ID
  # Returns a list of Users who are followers of the specified User ID.
  # @param id The ID of the User to lookup.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :max_results The maximum number of results.
  # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
  # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
  # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
  # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
  # @return [Get2UsersIdFollowersResponse]
  describe "users_id_followers test" do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_following
  # Following by User ID
  # Returns a list of Users that are being followed by the provided User ID
  # @param id The ID of the User to lookup.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :max_results The maximum number of results.
  # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
  # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
  # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
  # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
  # @return [Get2UsersIdFollowingResponse]
  describe "users_id_following test" do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_mute
  # Mute User by User ID.
  # Causes the User (in the path) to mute the target User. The User (in the path) must match the User context authorizing the request.
  # @param id The ID of the authenticated source User that is requesting to mute the target User.
  # @param [Hash] opts the optional parameters
  # @option opts [MuteUserRequest] :mute_user_request
  # @return [MuteUserMutationResponse]
  describe "users_id_mute test" do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_muting
  # Returns User objects that are muted by the provided User ID
  # Returns a list of Users that are muted by the provided User ID
  # @param id The ID of the authenticated source User for whom to return results.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :max_results The maximum number of results.
  # @option opts [String] :pagination_token This parameter is used to get the next &#39;page&#39; of results.
  # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
  # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
  # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
  # @return [Get2UsersIdMutingResponse]
  describe "users_id_muting test" do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_unblock
  # Unblock User by User ID
  # Causes the source User to unblock the target User. The source User must match the User context authorizing the request
  # @param source_user_id The ID of the authenticated source User that is requesting to unblock the target User.
  # @param target_user_id The ID of the User that the source User is requesting to unblock.
  # @param [Hash] opts the optional parameters
  # @return [BlockUserMutationResponse]
  describe "users_id_unblock test" do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_unfollow
  # Unfollow User
  # Causes the source User to unfollow the target User. The source User must match the User context authorizing the request
  # @param source_user_id The ID of the authenticated source User that is requesting to unfollow the target User.
  # @param target_user_id The ID of the User that the source User is requesting to unfollow.
  # @param [Hash] opts the optional parameters
  # @return [UsersFollowingDeleteResponse]
  describe "users_id_unfollow test" do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for users_id_unmute
  # Unmute User by User ID
  # Causes the source User to unmute the target User. The source User must match the User context authorizing the request
  # @param source_user_id The ID of the authenticated source User that is requesting to unmute the target User.
  # @param target_user_id The ID of the User that the source User is requesting to unmute.
  # @param [Hash] opts the optional parameters
  # @return [MuteUserMutationResponse]
  describe "users_id_unmute test" do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end
end
