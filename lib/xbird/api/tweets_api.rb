# frozen_string_literal: true

# #Twitter API v2
#
# Twitter API v2 available endpoints
#
# The version of the OpenAPI document: 2.62
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.5.0
#

require "cgi"

module Xbird
  class TweetsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Add/Delete rules
    # Add or delete rules from a User's active rule set. Users can provide unique, optionally tagged rules to add. Users can delete their entire rule set or a subset specified by rule ids or values.
    # @param add_or_delete_rules_request [AddOrDeleteRulesRequest]
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :dry_run Dry Run can be used with both the add and delete action, with the expected result given, but without actually taking any action in the system (meaning the end state will always be as it was when the request was submitted). This is particularly useful to validate rule changes.
    # @return [AddOrDeleteRulesResponse]
    def add_or_delete_rules(add_or_delete_rules_request, opts = {})
      data, _status_code, _headers = add_or_delete_rules_with_http_info(add_or_delete_rules_request, opts)
      data
    end

    # Add/Delete rules
    # Add or delete rules from a User&#39;s active rule set. Users can provide unique, optionally tagged rules to add. Users can delete their entire rule set or a subset specified by rule ids or values.
    # @param add_or_delete_rules_request [AddOrDeleteRulesRequest]
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :dry_run Dry Run can be used with both the add and delete action, with the expected result given, but without actually taking any action in the system (meaning the end state will always be as it was when the request was submitted). This is particularly useful to validate rule changes.
    # @return [Array<(AddOrDeleteRulesResponse, Integer, Hash)>] AddOrDeleteRulesResponse data, response status code and response headers
    def add_or_delete_rules_with_http_info(add_or_delete_rules_request, opts = {})
      @api_client.config.logger.debug "Calling API: TweetsApi.add_or_delete_rules ..." if @api_client.config.debugging
      # verify the required parameter 'add_or_delete_rules_request' is set
      if @api_client.config.client_side_validation && add_or_delete_rules_request.nil?
        raise ArgumentError,
              "Missing the required parameter 'add_or_delete_rules_request' when calling TweetsApi.add_or_delete_rules"
      end

      # resource path
      local_var_path = "/2/tweets/search/stream/rules"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:dry_run] = opts[:dry_run] unless opts[:dry_run].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      header_params["Content-Type"] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_or_delete_rules_request)

      # return_type
      return_type = opts[:debug_return_type] || "AddOrDeleteRulesResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerToken"]

      new_options = opts.merge(
        operation: :"TweetsApi.add_or_delete_rules",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      @api_client.config.logger.debug "API called: TweetsApi#add_or_delete_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Creation of a Tweet
    # Causes the User to create a Tweet under the authorized account.
    # @param tweet_create_request [TweetCreateRequest]
    # @param [Hash] opts the optional parameters
    # @return [TweetCreateResponse]
    def create_tweet(tweet_create_request, opts = {})
      data, _status_code, _headers = create_tweet_with_http_info(tweet_create_request, opts)
      data
    end

    # Creation of a Tweet
    # Causes the User to create a Tweet under the authorized account.
    # @param tweet_create_request [TweetCreateRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(TweetCreateResponse, Integer, Hash)>] TweetCreateResponse data, response status code and response headers
    def create_tweet_with_http_info(tweet_create_request, opts = {})
      @api_client.config.logger.debug "Calling API: TweetsApi.create_tweet ..." if @api_client.config.debugging
      # verify the required parameter 'tweet_create_request' is set
      raise ArgumentError, "Missing the required parameter 'tweet_create_request' when calling TweetsApi.create_tweet" if @api_client.config.client_side_validation && tweet_create_request.nil?

      # resource path
      local_var_path = "/2/tweets"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      header_params["Content-Type"] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(tweet_create_request)

      # return_type
      return_type = opts[:debug_return_type] || "TweetCreateResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken UserToken]

      new_options = opts.merge(
        operation: :"TweetsApi.create_tweet",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      @api_client.config.logger.debug "API called: TweetsApi#create_tweet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Tweet delete by Tweet ID
    # Delete specified Tweet (in the path) by ID.
    # @param id [String] The ID of the Tweet to be deleted.
    # @param [Hash] opts the optional parameters
    # @return [TweetDeleteResponse]
    def delete_tweet_by_id(id, opts = {})
      data, _status_code, _headers = delete_tweet_by_id_with_http_info(id, opts)
      data
    end

    # Tweet delete by Tweet ID
    # Delete specified Tweet (in the path) by ID.
    # @param id [String] The ID of the Tweet to be deleted.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TweetDeleteResponse, Integer, Hash)>] TweetDeleteResponse data, response status code and response headers
    def delete_tweet_by_id_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: TweetsApi.delete_tweet_by_id ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling TweetsApi.delete_tweet_by_id" if @api_client.config.client_side_validation && id.nil?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        raise ArgumentError,
              "invalid value for 'id' when calling TweetsApi.delete_tweet_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = "/2/tweets/{id}".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "TweetDeleteResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken UserToken]

      new_options = opts.merge(
        operation: :"TweetsApi.delete_tweet_by_id",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      @api_client.config.logger.debug "API called: TweetsApi#delete_tweet_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Tweet lookup by Tweet ID
    # Returns a variety of information about the Tweet specified by the requested ID.
    # @param id [String] A single Tweet ID.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :poll_fields A comma separated list of Poll fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :place_fields A comma separated list of Place fields to display.
    # @return [Get2TweetsIdResponse]
    def find_tweet_by_id(id, opts = {})
      data, _status_code, _headers = find_tweet_by_id_with_http_info(id, opts)
      data
    end

    # Tweet lookup by Tweet ID
    # Returns a variety of information about the Tweet specified by the requested ID.
    # @param id [String] A single Tweet ID.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :poll_fields A comma separated list of Poll fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :place_fields A comma separated list of Place fields to display.
    # @return [Array<(Get2TweetsIdResponse, Integer, Hash)>] Get2TweetsIdResponse data, response status code and response headers
    def find_tweet_by_id_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: TweetsApi.find_tweet_by_id ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling TweetsApi.find_tweet_by_id" if @api_client.config.client_side_validation && id.nil?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        raise ArgumentError,
              "invalid value for 'id' when calling TweetsApi.find_tweet_by_id, must conform to the pattern #{pattern}."
      end

      allowable_values = %w[attachments author_id context_annotations conversation_id created_at
                            edit_controls edit_history_tweet_ids entities geo id in_reply_to_user_id lang non_public_metrics organic_metrics possibly_sensitive promoted_metrics public_metrics referenced_tweets reply_settings source text withheld]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"tweet_fields"]" when calling TweetsApi.find_tweet_by_id, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["attachments.media_keys", "attachments.poll_ids", "author_id", "edit_history_tweet_ids",
                          "entities.mentions.username", "geo.place_id", "in_reply_to_user_id", "referenced_tweets.id", "referenced_tweets.id.author_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling TweetsApi.find_tweet_by_id, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[alt_text duration_ms height media_key non_public_metrics organic_metrics
                            preview_image_url promoted_metrics public_metrics type url variants width]
      if @api_client.config.client_side_validation && opts[:media_fields] && !opts[:media_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"media_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:media_fields].nil? && opts[:media_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"media_fields"]" when calling TweetsApi.find_tweet_by_id, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[duration_minutes end_datetime id options voting_status]
      if @api_client.config.client_side_validation && opts[:poll_fields] && !opts[:poll_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"poll_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:poll_fields].nil? && opts[:poll_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"poll_fields"]" when calling TweetsApi.find_tweet_by_id, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling TweetsApi.find_tweet_by_id, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[contained_within country country_code full_name geo id name place_type]
      if @api_client.config.client_side_validation && opts[:place_fields] && !opts[:place_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"place_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:place_fields].nil? && opts[:place_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"place_fields"]" when calling TweetsApi.find_tweet_by_id, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/tweets/{id}".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      unless opts[:tweet_fields].nil?
        query_params[:'tweet.fields'] =
          @api_client.build_collection_param(opts[:tweet_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:media_fields].nil?
        query_params[:'media.fields'] =
          @api_client.build_collection_param(opts[:media_fields], :csv)
      end
      unless opts[:poll_fields].nil?
        query_params[:'poll.fields'] =
          @api_client.build_collection_param(opts[:poll_fields], :csv)
      end
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:place_fields].nil?
        query_params[:'place.fields'] =
          @api_client.build_collection_param(opts[:place_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2TweetsIdResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken BearerToken UserToken]

      new_options = opts.merge(
        operation: :"TweetsApi.find_tweet_by_id",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: TweetsApi#find_tweet_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Tweet lookup by Tweet IDs
    # Returns a variety of information about the Tweet specified by the requested ID.
    # @param ids [Array<String>] A comma separated list of Tweet IDs. Up to 100 are allowed in a single request.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :poll_fields A comma separated list of Poll fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :place_fields A comma separated list of Place fields to display.
    # @return [Get2TweetsResponse]
    def find_tweets_by_id(ids, opts = {})
      data, _status_code, _headers = find_tweets_by_id_with_http_info(ids, opts)
      data
    end

    # Tweet lookup by Tweet IDs
    # Returns a variety of information about the Tweet specified by the requested ID.
    # @param ids [Array<String>] A comma separated list of Tweet IDs. Up to 100 are allowed in a single request.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :poll_fields A comma separated list of Poll fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :place_fields A comma separated list of Place fields to display.
    # @return [Array<(Get2TweetsResponse, Integer, Hash)>] Get2TweetsResponse data, response status code and response headers
    def find_tweets_by_id_with_http_info(ids, opts = {})
      @api_client.config.logger.debug "Calling API: TweetsApi.find_tweets_by_id ..." if @api_client.config.debugging
      # verify the required parameter 'ids' is set
      raise ArgumentError, "Missing the required parameter 'ids' when calling TweetsApi.find_tweets_by_id" if @api_client.config.client_side_validation && ids.nil?

      if @api_client.config.client_side_validation && ids.length > 100
        raise ArgumentError,
              'invalid value for "ids" when calling TweetsApi.find_tweets_by_id, number of items must be less than or equal to 100.'
      end

      if @api_client.config.client_side_validation && ids.empty?
        raise ArgumentError,
              'invalid value for "ids" when calling TweetsApi.find_tweets_by_id, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[attachments author_id context_annotations conversation_id created_at
                            edit_controls edit_history_tweet_ids entities geo id in_reply_to_user_id lang non_public_metrics organic_metrics possibly_sensitive promoted_metrics public_metrics referenced_tweets reply_settings source text withheld]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"tweet_fields"]" when calling TweetsApi.find_tweets_by_id, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["attachments.media_keys", "attachments.poll_ids", "author_id", "edit_history_tweet_ids",
                          "entities.mentions.username", "geo.place_id", "in_reply_to_user_id", "referenced_tweets.id", "referenced_tweets.id.author_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling TweetsApi.find_tweets_by_id, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[alt_text duration_ms height media_key non_public_metrics organic_metrics
                            preview_image_url promoted_metrics public_metrics type url variants width]
      if @api_client.config.client_side_validation && opts[:media_fields] && !opts[:media_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"media_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:media_fields].nil? && opts[:media_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"media_fields"]" when calling TweetsApi.find_tweets_by_id, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[duration_minutes end_datetime id options voting_status]
      if @api_client.config.client_side_validation && opts[:poll_fields] && !opts[:poll_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"poll_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:poll_fields].nil? && opts[:poll_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"poll_fields"]" when calling TweetsApi.find_tweets_by_id, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling TweetsApi.find_tweets_by_id, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[contained_within country country_code full_name geo id name place_type]
      if @api_client.config.client_side_validation && opts[:place_fields] && !opts[:place_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"place_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:place_fields].nil? && opts[:place_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"place_fields"]" when calling TweetsApi.find_tweets_by_id, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/tweets"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:ids] = @api_client.build_collection_param(ids, :csv)
      unless opts[:tweet_fields].nil?
        query_params[:'tweet.fields'] =
          @api_client.build_collection_param(opts[:tweet_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:media_fields].nil?
        query_params[:'media.fields'] =
          @api_client.build_collection_param(opts[:media_fields], :csv)
      end
      unless opts[:poll_fields].nil?
        query_params[:'poll.fields'] =
          @api_client.build_collection_param(opts[:poll_fields], :csv)
      end
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:place_fields].nil?
        query_params[:'place.fields'] =
          @api_client.build_collection_param(opts[:place_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2TweetsResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken BearerToken UserToken]

      new_options = opts.merge(
        operation: :"TweetsApi.find_tweets_by_id",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: TweetsApi#find_tweets_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Retrieve Tweets that quote a Tweet.
    # Returns a variety of information about each Tweet that quotes the Tweet specified by the requested ID.
    # @param id [String] A single Tweet ID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results to be returned. (default to 10)
    # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
    # @option opts [Array<String>] :exclude The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;).
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :poll_fields A comma separated list of Poll fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :place_fields A comma separated list of Place fields to display.
    # @return [Get2TweetsIdQuoteTweetsResponse]
    def find_tweets_that_quote_a_tweet(id, opts = {})
      data, _status_code, _headers = find_tweets_that_quote_a_tweet_with_http_info(id, opts)
      data
    end

    # Retrieve Tweets that quote a Tweet.
    # Returns a variety of information about each Tweet that quotes the Tweet specified by the requested ID.
    # @param id [String] A single Tweet ID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results to be returned. (default to 10)
    # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
    # @option opts [Array<String>] :exclude The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;).
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :poll_fields A comma separated list of Poll fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :place_fields A comma separated list of Place fields to display.
    # @return [Array<(Get2TweetsIdQuoteTweetsResponse, Integer, Hash)>] Get2TweetsIdQuoteTweetsResponse data, response status code and response headers
    def find_tweets_that_quote_a_tweet_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: TweetsApi.find_tweets_that_quote_a_tweet ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling TweetsApi.find_tweets_that_quote_a_tweet" if @api_client.config.client_side_validation && id.nil?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        raise ArgumentError,
              "invalid value for 'id' when calling TweetsApi.find_tweets_that_quote_a_tweet, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] > 100
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling TweetsApi.find_tweets_that_quote_a_tweet, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] < 10
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling TweetsApi.find_tweets_that_quote_a_tweet, must be greater than or equal to 10.'
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.empty?
        raise ArgumentError,
              'invalid value for "opts[:"pagination_token"]" when calling TweetsApi.find_tweets_that_quote_a_tweet, the character length must be great than or equal to 1.'
      end

      allowable_values = %w[replies retweets]
      if @api_client.config.client_side_validation && opts[:exclude] && !opts[:exclude].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"exclude\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:exclude].nil? && opts[:exclude].empty?
        raise ArgumentError,
              'invalid value for "opts[:"exclude"]" when calling TweetsApi.find_tweets_that_quote_a_tweet, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[attachments author_id context_annotations conversation_id created_at
                            edit_controls edit_history_tweet_ids entities geo id in_reply_to_user_id lang non_public_metrics organic_metrics possibly_sensitive promoted_metrics public_metrics referenced_tweets reply_settings source text withheld]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"tweet_fields"]" when calling TweetsApi.find_tweets_that_quote_a_tweet, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["attachments.media_keys", "attachments.poll_ids", "author_id", "edit_history_tweet_ids",
                          "entities.mentions.username", "geo.place_id", "in_reply_to_user_id", "referenced_tweets.id", "referenced_tweets.id.author_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling TweetsApi.find_tweets_that_quote_a_tweet, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[alt_text duration_ms height media_key non_public_metrics organic_metrics
                            preview_image_url promoted_metrics public_metrics type url variants width]
      if @api_client.config.client_side_validation && opts[:media_fields] && !opts[:media_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"media_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:media_fields].nil? && opts[:media_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"media_fields"]" when calling TweetsApi.find_tweets_that_quote_a_tweet, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[duration_minutes end_datetime id options voting_status]
      if @api_client.config.client_side_validation && opts[:poll_fields] && !opts[:poll_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"poll_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:poll_fields].nil? && opts[:poll_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"poll_fields"]" when calling TweetsApi.find_tweets_that_quote_a_tweet, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling TweetsApi.find_tweets_that_quote_a_tweet, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[contained_within country country_code full_name geo id name place_type]
      if @api_client.config.client_side_validation && opts[:place_fields] && !opts[:place_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"place_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:place_fields].nil? && opts[:place_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"place_fields"]" when calling TweetsApi.find_tweets_that_quote_a_tweet, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/tweets/{id}/quote_tweets".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:max_results] = opts[:max_results] unless opts[:max_results].nil?
      query_params[:pagination_token] = opts[:pagination_token] unless opts[:pagination_token].nil?
      query_params[:exclude] = @api_client.build_collection_param(opts[:exclude], :csv) unless opts[:exclude].nil?
      unless opts[:tweet_fields].nil?
        query_params[:'tweet.fields'] =
          @api_client.build_collection_param(opts[:tweet_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:media_fields].nil?
        query_params[:'media.fields'] =
          @api_client.build_collection_param(opts[:media_fields], :csv)
      end
      unless opts[:poll_fields].nil?
        query_params[:'poll.fields'] =
          @api_client.build_collection_param(opts[:poll_fields], :csv)
      end
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:place_fields].nil?
        query_params[:'place.fields'] =
          @api_client.build_collection_param(opts[:place_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2TweetsIdQuoteTweetsResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken BearerToken UserToken]

      new_options = opts.merge(
        operation: :"TweetsApi.find_tweets_that_quote_a_tweet",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: TweetsApi#find_tweets_that_quote_a_tweet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Rules lookup
    # Returns rules from a User's active rule set. Users can fetch all of their rules or a subset, specified by the provided rule ids.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :ids A comma-separated list of Rule IDs.
    # @option opts [Integer] :max_results The maximum number of results. (default to 1000)
    # @option opts [String] :pagination_token This value is populated by passing the &#39;next_token&#39; returned in a request to paginate through results.
    # @return [RulesLookupResponse]
    def get_rules(opts = {})
      data, _status_code, _headers = get_rules_with_http_info(opts)
      data
    end

    # Rules lookup
    # Returns rules from a User&#39;s active rule set. Users can fetch all of their rules or a subset, specified by the provided rule ids.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :ids A comma-separated list of Rule IDs.
    # @option opts [Integer] :max_results The maximum number of results. (default to 1000)
    # @option opts [String] :pagination_token This value is populated by passing the &#39;next_token&#39; returned in a request to paginate through results.
    # @return [Array<(RulesLookupResponse, Integer, Hash)>] RulesLookupResponse data, response status code and response headers
    def get_rules_with_http_info(opts = {})
      @api_client.config.logger.debug "Calling API: TweetsApi.get_rules ..." if @api_client.config.debugging
      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] > 1000
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling TweetsApi.get_rules, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] < 1
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling TweetsApi.get_rules, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.length > 16
        raise ArgumentError,
              'invalid value for "opts[:"pagination_token"]" when calling TweetsApi.get_rules, the character length must be smaller than or equal to 16.'
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.length < 16
        raise ArgumentError,
              'invalid value for "opts[:"pagination_token"]" when calling TweetsApi.get_rules, the character length must be great than or equal to 16.'
      end

      # resource path
      local_var_path = "/2/tweets/search/stream/rules"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:ids] = @api_client.build_collection_param(opts[:ids], :multi) unless opts[:ids].nil?
      query_params[:max_results] = opts[:max_results] unless opts[:max_results].nil?
      query_params[:pagination_token] = opts[:pagination_token] unless opts[:pagination_token].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "RulesLookupResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerToken"]

      new_options = opts.merge(
        operation: :"TweetsApi.get_rules",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: TweetsApi#get_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Firehose stream
    # Streams 100% of public Tweets.
    # @param partition [Integer] The partition number.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :backfill_minutes The number of minutes of backfill requested.
    # @option opts [Time] :start_time YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Tweets will be provided.
    # @option opts [Time] :end_time YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :poll_fields A comma separated list of Poll fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :place_fields A comma separated list of Place fields to display.
    # @return [StreamingTweetResponse]
    def get_tweets_firehose_stream(partition, opts = {})
      data, _status_code, _headers = get_tweets_firehose_stream_with_http_info(partition, opts)
      data
    end

    # Firehose stream
    # Streams 100% of public Tweets.
    # @param partition [Integer] The partition number.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :backfill_minutes The number of minutes of backfill requested.
    # @option opts [Time] :start_time YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Tweets will be provided.
    # @option opts [Time] :end_time YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :poll_fields A comma separated list of Poll fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :place_fields A comma separated list of Place fields to display.
    # @return [Array<(StreamingTweetResponse, Integer, Hash)>] StreamingTweetResponse data, response status code and response headers
    def get_tweets_firehose_stream_with_http_info(partition, opts = {})
      @api_client.config.logger.debug "Calling API: TweetsApi.get_tweets_firehose_stream ..." if @api_client.config.debugging
      # verify the required parameter 'partition' is set
      if @api_client.config.client_side_validation && partition.nil?
        raise ArgumentError,
              "Missing the required parameter 'partition' when calling TweetsApi.get_tweets_firehose_stream"
      end
      if @api_client.config.client_side_validation && partition > 20
        raise ArgumentError,
              'invalid value for "partition" when calling TweetsApi.get_tweets_firehose_stream, must be smaller than or equal to 20.'
      end

      if @api_client.config.client_side_validation && partition < 1
        raise ArgumentError,
              'invalid value for "partition" when calling TweetsApi.get_tweets_firehose_stream, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:backfill_minutes].nil? && opts[:backfill_minutes] > 5
        raise ArgumentError,
              'invalid value for "opts[:"backfill_minutes"]" when calling TweetsApi.get_tweets_firehose_stream, must be smaller than or equal to 5.'
      end

      if @api_client.config.client_side_validation && !opts[:backfill_minutes].nil? && (opts[:backfill_minutes]).negative?
        raise ArgumentError,
              'invalid value for "opts[:"backfill_minutes"]" when calling TweetsApi.get_tweets_firehose_stream, must be greater than or equal to 0.'
      end

      allowable_values = %w[attachments author_id context_annotations conversation_id created_at
                            edit_controls edit_history_tweet_ids entities geo id in_reply_to_user_id lang non_public_metrics organic_metrics possibly_sensitive promoted_metrics public_metrics referenced_tweets reply_settings source text withheld]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"tweet_fields"]" when calling TweetsApi.get_tweets_firehose_stream, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["attachments.media_keys", "attachments.poll_ids", "author_id", "edit_history_tweet_ids",
                          "entities.mentions.username", "geo.place_id", "in_reply_to_user_id", "referenced_tweets.id", "referenced_tweets.id.author_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling TweetsApi.get_tweets_firehose_stream, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[alt_text duration_ms height media_key non_public_metrics organic_metrics
                            preview_image_url promoted_metrics public_metrics type url variants width]
      if @api_client.config.client_side_validation && opts[:media_fields] && !opts[:media_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"media_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:media_fields].nil? && opts[:media_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"media_fields"]" when calling TweetsApi.get_tweets_firehose_stream, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[duration_minutes end_datetime id options voting_status]
      if @api_client.config.client_side_validation && opts[:poll_fields] && !opts[:poll_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"poll_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:poll_fields].nil? && opts[:poll_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"poll_fields"]" when calling TweetsApi.get_tweets_firehose_stream, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling TweetsApi.get_tweets_firehose_stream, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[contained_within country country_code full_name geo id name place_type]
      if @api_client.config.client_side_validation && opts[:place_fields] && !opts[:place_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"place_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:place_fields].nil? && opts[:place_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"place_fields"]" when calling TweetsApi.get_tweets_firehose_stream, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/tweets/firehose/stream"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:partition] = partition
      query_params[:backfill_minutes] = opts[:backfill_minutes] unless opts[:backfill_minutes].nil?
      query_params[:start_time] = opts[:start_time] unless opts[:start_time].nil?
      query_params[:end_time] = opts[:end_time] unless opts[:end_time].nil?
      unless opts[:tweet_fields].nil?
        query_params[:'tweet.fields'] =
          @api_client.build_collection_param(opts[:tweet_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:media_fields].nil?
        query_params[:'media.fields'] =
          @api_client.build_collection_param(opts[:media_fields], :csv)
      end
      unless opts[:poll_fields].nil?
        query_params[:'poll.fields'] =
          @api_client.build_collection_param(opts[:poll_fields], :csv)
      end
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:place_fields].nil?
        query_params[:'place.fields'] =
          @api_client.build_collection_param(opts[:place_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "StreamingTweetResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerToken"]

      new_options = opts.merge(
        operation: :"TweetsApi.get_tweets_firehose_stream",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: TweetsApi#get_tweets_firehose_stream\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Sample 10% stream
    # Streams a deterministic 10% of public Tweets.
    # @param partition [Integer] The partition number.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :backfill_minutes The number of minutes of backfill requested.
    # @option opts [Time] :start_time YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Tweets will be provided.
    # @option opts [Time] :end_time YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :poll_fields A comma separated list of Poll fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :place_fields A comma separated list of Place fields to display.
    # @return [Get2TweetsSample10StreamResponse]
    def get_tweets_sample10_stream(partition, opts = {})
      data, _status_code, _headers = get_tweets_sample10_stream_with_http_info(partition, opts)
      data
    end

    # Sample 10% stream
    # Streams a deterministic 10% of public Tweets.
    # @param partition [Integer] The partition number.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :backfill_minutes The number of minutes of backfill requested.
    # @option opts [Time] :start_time YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Tweets will be provided.
    # @option opts [Time] :end_time YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :poll_fields A comma separated list of Poll fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :place_fields A comma separated list of Place fields to display.
    # @return [Array<(Get2TweetsSample10StreamResponse, Integer, Hash)>] Get2TweetsSample10StreamResponse data, response status code and response headers
    def get_tweets_sample10_stream_with_http_info(partition, opts = {})
      @api_client.config.logger.debug "Calling API: TweetsApi.get_tweets_sample10_stream ..." if @api_client.config.debugging
      # verify the required parameter 'partition' is set
      if @api_client.config.client_side_validation && partition.nil?
        raise ArgumentError,
              "Missing the required parameter 'partition' when calling TweetsApi.get_tweets_sample10_stream"
      end
      if @api_client.config.client_side_validation && partition > 2
        raise ArgumentError,
              'invalid value for "partition" when calling TweetsApi.get_tweets_sample10_stream, must be smaller than or equal to 2.'
      end

      if @api_client.config.client_side_validation && partition < 1
        raise ArgumentError,
              'invalid value for "partition" when calling TweetsApi.get_tweets_sample10_stream, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:backfill_minutes].nil? && opts[:backfill_minutes] > 5
        raise ArgumentError,
              'invalid value for "opts[:"backfill_minutes"]" when calling TweetsApi.get_tweets_sample10_stream, must be smaller than or equal to 5.'
      end

      if @api_client.config.client_side_validation && !opts[:backfill_minutes].nil? && (opts[:backfill_minutes]).negative?
        raise ArgumentError,
              'invalid value for "opts[:"backfill_minutes"]" when calling TweetsApi.get_tweets_sample10_stream, must be greater than or equal to 0.'
      end

      allowable_values = %w[attachments author_id context_annotations conversation_id created_at
                            edit_controls edit_history_tweet_ids entities geo id in_reply_to_user_id lang non_public_metrics organic_metrics possibly_sensitive promoted_metrics public_metrics referenced_tweets reply_settings source text withheld]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"tweet_fields"]" when calling TweetsApi.get_tweets_sample10_stream, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["attachments.media_keys", "attachments.poll_ids", "author_id", "edit_history_tweet_ids",
                          "entities.mentions.username", "geo.place_id", "in_reply_to_user_id", "referenced_tweets.id", "referenced_tweets.id.author_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling TweetsApi.get_tweets_sample10_stream, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[alt_text duration_ms height media_key non_public_metrics organic_metrics
                            preview_image_url promoted_metrics public_metrics type url variants width]
      if @api_client.config.client_side_validation && opts[:media_fields] && !opts[:media_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"media_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:media_fields].nil? && opts[:media_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"media_fields"]" when calling TweetsApi.get_tweets_sample10_stream, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[duration_minutes end_datetime id options voting_status]
      if @api_client.config.client_side_validation && opts[:poll_fields] && !opts[:poll_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"poll_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:poll_fields].nil? && opts[:poll_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"poll_fields"]" when calling TweetsApi.get_tweets_sample10_stream, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling TweetsApi.get_tweets_sample10_stream, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[contained_within country country_code full_name geo id name place_type]
      if @api_client.config.client_side_validation && opts[:place_fields] && !opts[:place_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"place_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:place_fields].nil? && opts[:place_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"place_fields"]" when calling TweetsApi.get_tweets_sample10_stream, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/tweets/sample10/stream"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:partition] = partition
      query_params[:backfill_minutes] = opts[:backfill_minutes] unless opts[:backfill_minutes].nil?
      query_params[:start_time] = opts[:start_time] unless opts[:start_time].nil?
      query_params[:end_time] = opts[:end_time] unless opts[:end_time].nil?
      unless opts[:tweet_fields].nil?
        query_params[:'tweet.fields'] =
          @api_client.build_collection_param(opts[:tweet_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:media_fields].nil?
        query_params[:'media.fields'] =
          @api_client.build_collection_param(opts[:media_fields], :csv)
      end
      unless opts[:poll_fields].nil?
        query_params[:'poll.fields'] =
          @api_client.build_collection_param(opts[:poll_fields], :csv)
      end
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:place_fields].nil?
        query_params[:'place.fields'] =
          @api_client.build_collection_param(opts[:place_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2TweetsSample10StreamResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerToken"]

      new_options = opts.merge(
        operation: :"TweetsApi.get_tweets_sample10_stream",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: TweetsApi#get_tweets_sample10_stream\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Hide replies
    # Hides or unhides a reply to an owned conversation.
    # @param tweet_id [String] The ID of the reply that you want to hide or unhide.
    # @param [Hash] opts the optional parameters
    # @option opts [TweetHideRequest] :tweet_hide_request
    # @return [TweetHideResponse]
    def hide_reply_by_id(tweet_id, opts = {})
      data, _status_code, _headers = hide_reply_by_id_with_http_info(tweet_id, opts)
      data
    end

    # Hide replies
    # Hides or unhides a reply to an owned conversation.
    # @param tweet_id [String] The ID of the reply that you want to hide or unhide.
    # @param [Hash] opts the optional parameters
    # @option opts [TweetHideRequest] :tweet_hide_request
    # @return [Array<(TweetHideResponse, Integer, Hash)>] TweetHideResponse data, response status code and response headers
    def hide_reply_by_id_with_http_info(tweet_id, opts = {})
      @api_client.config.logger.debug "Calling API: TweetsApi.hide_reply_by_id ..." if @api_client.config.debugging
      # verify the required parameter 'tweet_id' is set
      raise ArgumentError, "Missing the required parameter 'tweet_id' when calling TweetsApi.hide_reply_by_id" if @api_client.config.client_side_validation && tweet_id.nil?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && tweet_id !~ pattern
        raise ArgumentError,
              "invalid value for 'tweet_id' when calling TweetsApi.hide_reply_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = "/2/tweets/{tweet_id}/hidden".sub("{tweet_id}", CGI.escape(tweet_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      header_params["Content-Type"] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:tweet_hide_request])

      # return_type
      return_type = opts[:debug_return_type] || "TweetHideResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken UserToken]

      new_options = opts.merge(
        operation: :"TweetsApi.hide_reply_by_id",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      @api_client.config.logger.debug "API called: TweetsApi#hide_reply_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # List Tweets timeline by List ID.
    # Returns a list of Tweets associated with the provided List ID.
    # @param id [String] The ID of the List.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results. (default to 100)
    # @option opts [String] :pagination_token This parameter is used to get the next &#39;page&#39; of results.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :poll_fields A comma separated list of Poll fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :place_fields A comma separated list of Place fields to display.
    # @return [Get2ListsIdTweetsResponse]
    def lists_id_tweets(id, opts = {})
      data, _status_code, _headers = lists_id_tweets_with_http_info(id, opts)
      data
    end

    # List Tweets timeline by List ID.
    # Returns a list of Tweets associated with the provided List ID.
    # @param id [String] The ID of the List.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results. (default to 100)
    # @option opts [String] :pagination_token This parameter is used to get the next &#39;page&#39; of results.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :poll_fields A comma separated list of Poll fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :place_fields A comma separated list of Place fields to display.
    # @return [Array<(Get2ListsIdTweetsResponse, Integer, Hash)>] Get2ListsIdTweetsResponse data, response status code and response headers
    def lists_id_tweets_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: TweetsApi.lists_id_tweets ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling TweetsApi.lists_id_tweets" if @api_client.config.client_side_validation && id.nil?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        raise ArgumentError,
              "invalid value for 'id' when calling TweetsApi.lists_id_tweets, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] > 100
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling TweetsApi.lists_id_tweets, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] < 1
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling TweetsApi.lists_id_tweets, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.empty?
        raise ArgumentError,
              'invalid value for "opts[:"pagination_token"]" when calling TweetsApi.lists_id_tweets, the character length must be great than or equal to 1.'
      end

      allowable_values = %w[attachments author_id context_annotations conversation_id created_at
                            edit_controls edit_history_tweet_ids entities geo id in_reply_to_user_id lang non_public_metrics organic_metrics possibly_sensitive promoted_metrics public_metrics referenced_tweets reply_settings source text withheld]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"tweet_fields"]" when calling TweetsApi.lists_id_tweets, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["attachments.media_keys", "attachments.poll_ids", "author_id", "edit_history_tweet_ids",
                          "entities.mentions.username", "geo.place_id", "in_reply_to_user_id", "referenced_tweets.id", "referenced_tweets.id.author_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling TweetsApi.lists_id_tweets, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[alt_text duration_ms height media_key non_public_metrics organic_metrics
                            preview_image_url promoted_metrics public_metrics type url variants width]
      if @api_client.config.client_side_validation && opts[:media_fields] && !opts[:media_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"media_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:media_fields].nil? && opts[:media_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"media_fields"]" when calling TweetsApi.lists_id_tweets, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[duration_minutes end_datetime id options voting_status]
      if @api_client.config.client_side_validation && opts[:poll_fields] && !opts[:poll_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"poll_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:poll_fields].nil? && opts[:poll_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"poll_fields"]" when calling TweetsApi.lists_id_tweets, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling TweetsApi.lists_id_tweets, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[contained_within country country_code full_name geo id name place_type]
      if @api_client.config.client_side_validation && opts[:place_fields] && !opts[:place_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"place_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:place_fields].nil? && opts[:place_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"place_fields"]" when calling TweetsApi.lists_id_tweets, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/lists/{id}/tweets".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:max_results] = opts[:max_results] unless opts[:max_results].nil?
      query_params[:pagination_token] = opts[:pagination_token] unless opts[:pagination_token].nil?
      unless opts[:tweet_fields].nil?
        query_params[:'tweet.fields'] =
          @api_client.build_collection_param(opts[:tweet_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:media_fields].nil?
        query_params[:'media.fields'] =
          @api_client.build_collection_param(opts[:media_fields], :csv)
      end
      unless opts[:poll_fields].nil?
        query_params[:'poll.fields'] =
          @api_client.build_collection_param(opts[:poll_fields], :csv)
      end
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:place_fields].nil?
        query_params[:'place.fields'] =
          @api_client.build_collection_param(opts[:place_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2ListsIdTweetsResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken BearerToken UserToken]

      new_options = opts.merge(
        operation: :"TweetsApi.lists_id_tweets",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: TweetsApi#lists_id_tweets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Sample stream
    # Streams a deterministic 1% of public Tweets.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :backfill_minutes The number of minutes of backfill requested.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :poll_fields A comma separated list of Poll fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :place_fields A comma separated list of Place fields to display.
    # @return [StreamingTweetResponse]
    def sample_stream(opts = {})
      data, _status_code, _headers = sample_stream_with_http_info(opts)
      data
    end

    # Sample stream
    # Streams a deterministic 1% of public Tweets.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :backfill_minutes The number of minutes of backfill requested.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :poll_fields A comma separated list of Poll fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :place_fields A comma separated list of Place fields to display.
    # @return [Array<(StreamingTweetResponse, Integer, Hash)>] StreamingTweetResponse data, response status code and response headers
    def sample_stream_with_http_info(opts = {})
      @api_client.config.logger.debug "Calling API: TweetsApi.sample_stream ..." if @api_client.config.debugging
      if @api_client.config.client_side_validation && !opts[:backfill_minutes].nil? && opts[:backfill_minutes] > 5
        raise ArgumentError,
              'invalid value for "opts[:"backfill_minutes"]" when calling TweetsApi.sample_stream, must be smaller than or equal to 5.'
      end

      if @api_client.config.client_side_validation && !opts[:backfill_minutes].nil? && (opts[:backfill_minutes]).negative?
        raise ArgumentError,
              'invalid value for "opts[:"backfill_minutes"]" when calling TweetsApi.sample_stream, must be greater than or equal to 0.'
      end

      allowable_values = %w[attachments author_id context_annotations conversation_id created_at
                            edit_controls edit_history_tweet_ids entities geo id in_reply_to_user_id lang non_public_metrics organic_metrics possibly_sensitive promoted_metrics public_metrics referenced_tweets reply_settings source text withheld]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"tweet_fields"]" when calling TweetsApi.sample_stream, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["attachments.media_keys", "attachments.poll_ids", "author_id", "edit_history_tweet_ids",
                          "entities.mentions.username", "geo.place_id", "in_reply_to_user_id", "referenced_tweets.id", "referenced_tweets.id.author_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling TweetsApi.sample_stream, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[alt_text duration_ms height media_key non_public_metrics organic_metrics
                            preview_image_url promoted_metrics public_metrics type url variants width]
      if @api_client.config.client_side_validation && opts[:media_fields] && !opts[:media_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"media_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:media_fields].nil? && opts[:media_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"media_fields"]" when calling TweetsApi.sample_stream, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[duration_minutes end_datetime id options voting_status]
      if @api_client.config.client_side_validation && opts[:poll_fields] && !opts[:poll_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"poll_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:poll_fields].nil? && opts[:poll_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"poll_fields"]" when calling TweetsApi.sample_stream, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling TweetsApi.sample_stream, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[contained_within country country_code full_name geo id name place_type]
      if @api_client.config.client_side_validation && opts[:place_fields] && !opts[:place_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"place_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:place_fields].nil? && opts[:place_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"place_fields"]" when calling TweetsApi.sample_stream, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/tweets/sample/stream"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:backfill_minutes] = opts[:backfill_minutes] unless opts[:backfill_minutes].nil?
      unless opts[:tweet_fields].nil?
        query_params[:'tweet.fields'] =
          @api_client.build_collection_param(opts[:tweet_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:media_fields].nil?
        query_params[:'media.fields'] =
          @api_client.build_collection_param(opts[:media_fields], :csv)
      end
      unless opts[:poll_fields].nil?
        query_params[:'poll.fields'] =
          @api_client.build_collection_param(opts[:poll_fields], :csv)
      end
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:place_fields].nil?
        query_params[:'place.fields'] =
          @api_client.build_collection_param(opts[:place_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "StreamingTweetResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerToken"]

      new_options = opts.merge(
        operation: :"TweetsApi.sample_stream",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: TweetsApi#sample_stream\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Filtered stream
    # Streams Tweets matching the stream's active rule set.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :backfill_minutes The number of minutes of backfill requested.
    # @option opts [Time] :start_time YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided.
    # @option opts [Time] :end_time YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :poll_fields A comma separated list of Poll fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :place_fields A comma separated list of Place fields to display.
    # @return [FilteredStreamingTweetResponse]
    def search_stream(opts = {})
      data, _status_code, _headers = search_stream_with_http_info(opts)
      data
    end

    # Filtered stream
    # Streams Tweets matching the stream&#39;s active rule set.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :backfill_minutes The number of minutes of backfill requested.
    # @option opts [Time] :start_time YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided.
    # @option opts [Time] :end_time YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :poll_fields A comma separated list of Poll fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :place_fields A comma separated list of Place fields to display.
    # @return [Array<(FilteredStreamingTweetResponse, Integer, Hash)>] FilteredStreamingTweetResponse data, response status code and response headers
    def search_stream_with_http_info(opts = {})
      @api_client.config.logger.debug "Calling API: TweetsApi.search_stream ..." if @api_client.config.debugging
      if @api_client.config.client_side_validation && !opts[:backfill_minutes].nil? && opts[:backfill_minutes] > 5
        raise ArgumentError,
              'invalid value for "opts[:"backfill_minutes"]" when calling TweetsApi.search_stream, must be smaller than or equal to 5.'
      end

      if @api_client.config.client_side_validation && !opts[:backfill_minutes].nil? && (opts[:backfill_minutes]).negative?
        raise ArgumentError,
              'invalid value for "opts[:"backfill_minutes"]" when calling TweetsApi.search_stream, must be greater than or equal to 0.'
      end

      allowable_values = %w[attachments author_id context_annotations conversation_id created_at
                            edit_controls edit_history_tweet_ids entities geo id in_reply_to_user_id lang non_public_metrics organic_metrics possibly_sensitive promoted_metrics public_metrics referenced_tweets reply_settings source text withheld]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"tweet_fields"]" when calling TweetsApi.search_stream, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["attachments.media_keys", "attachments.poll_ids", "author_id", "edit_history_tweet_ids",
                          "entities.mentions.username", "geo.place_id", "in_reply_to_user_id", "referenced_tweets.id", "referenced_tweets.id.author_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling TweetsApi.search_stream, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[alt_text duration_ms height media_key non_public_metrics organic_metrics
                            preview_image_url promoted_metrics public_metrics type url variants width]
      if @api_client.config.client_side_validation && opts[:media_fields] && !opts[:media_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"media_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:media_fields].nil? && opts[:media_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"media_fields"]" when calling TweetsApi.search_stream, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[duration_minutes end_datetime id options voting_status]
      if @api_client.config.client_side_validation && opts[:poll_fields] && !opts[:poll_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"poll_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:poll_fields].nil? && opts[:poll_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"poll_fields"]" when calling TweetsApi.search_stream, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling TweetsApi.search_stream, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[contained_within country country_code full_name geo id name place_type]
      if @api_client.config.client_side_validation && opts[:place_fields] && !opts[:place_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"place_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:place_fields].nil? && opts[:place_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"place_fields"]" when calling TweetsApi.search_stream, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/tweets/search/stream"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:backfill_minutes] = opts[:backfill_minutes] unless opts[:backfill_minutes].nil?
      query_params[:start_time] = opts[:start_time] unless opts[:start_time].nil?
      query_params[:end_time] = opts[:end_time] unless opts[:end_time].nil?
      unless opts[:tweet_fields].nil?
        query_params[:'tweet.fields'] =
          @api_client.build_collection_param(opts[:tweet_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:media_fields].nil?
        query_params[:'media.fields'] =
          @api_client.build_collection_param(opts[:media_fields], :csv)
      end
      unless opts[:poll_fields].nil?
        query_params[:'poll.fields'] =
          @api_client.build_collection_param(opts[:poll_fields], :csv)
      end
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:place_fields].nil?
        query_params[:'place.fields'] =
          @api_client.build_collection_param(opts[:place_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "FilteredStreamingTweetResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerToken"]

      new_options = opts.merge(
        operation: :"TweetsApi.search_stream",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: TweetsApi#search_stream\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Retrieve the list of Users who purchased a ticket to the given space
    # Retrieves the list of Users who purchased a ticket to the given space
    # @param id [String] The ID of the Space to be retrieved.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
    # @option opts [Integer] :max_results The maximum number of results. (default to 100)
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Get2SpacesIdBuyersResponse]
    def space_buyers(id, opts = {})
      data, _status_code, _headers = space_buyers_with_http_info(id, opts)
      data
    end

    # Retrieve the list of Users who purchased a ticket to the given space
    # Retrieves the list of Users who purchased a ticket to the given space
    # @param id [String] The ID of the Space to be retrieved.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
    # @option opts [Integer] :max_results The maximum number of results. (default to 100)
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Array<(Get2SpacesIdBuyersResponse, Integer, Hash)>] Get2SpacesIdBuyersResponse data, response status code and response headers
    def space_buyers_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: TweetsApi.space_buyers ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling TweetsApi.space_buyers" if @api_client.config.client_side_validation && id.nil?

      pattern = Regexp.new(/^[a-zA-Z0-9]{1,13}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        raise ArgumentError,
              "invalid value for 'id' when calling TweetsApi.space_buyers, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.length < 16
        raise ArgumentError,
              'invalid value for "opts[:"pagination_token"]" when calling TweetsApi.space_buyers, the character length must be great than or equal to 16.'
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] > 100
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling TweetsApi.space_buyers, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] < 1
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling TweetsApi.space_buyers, must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling TweetsApi.space_buyers, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["pinned_tweet_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling TweetsApi.space_buyers, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[attachments author_id context_annotations conversation_id created_at
                            edit_controls edit_history_tweet_ids entities geo id in_reply_to_user_id lang non_public_metrics organic_metrics possibly_sensitive promoted_metrics public_metrics referenced_tweets reply_settings source text withheld]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"tweet_fields"]" when calling TweetsApi.space_buyers, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/spaces/{id}/buyers".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:pagination_token] = opts[:pagination_token] unless opts[:pagination_token].nil?
      query_params[:max_results] = opts[:max_results] unless opts[:max_results].nil?
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:tweet_fields].nil?
        query_params[:'tweet.fields'] =
          @api_client.build_collection_param(opts[:tweet_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2SpacesIdBuyersResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["OAuth2UserToken"]

      new_options = opts.merge(
        operation: :"TweetsApi.space_buyers",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: TweetsApi#space_buyers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Retrieve Tweets from a Space.
    # Retrieves Tweets shared in the specified Space.
    # @param id [String] The ID of the Space to be retrieved.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The number of Tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100. (default to 100)
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :poll_fields A comma separated list of Poll fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :place_fields A comma separated list of Place fields to display.
    # @return [Get2SpacesIdTweetsResponse]
    def space_tweets(id, opts = {})
      data, _status_code, _headers = space_tweets_with_http_info(id, opts)
      data
    end

    # Retrieve Tweets from a Space.
    # Retrieves Tweets shared in the specified Space.
    # @param id [String] The ID of the Space to be retrieved.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The number of Tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100. (default to 100)
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :poll_fields A comma separated list of Poll fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :place_fields A comma separated list of Place fields to display.
    # @return [Array<(Get2SpacesIdTweetsResponse, Integer, Hash)>] Get2SpacesIdTweetsResponse data, response status code and response headers
    def space_tweets_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: TweetsApi.space_tweets ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling TweetsApi.space_tweets" if @api_client.config.client_side_validation && id.nil?

      pattern = Regexp.new(/^[a-zA-Z0-9]{1,13}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        raise ArgumentError,
              "invalid value for 'id' when calling TweetsApi.space_tweets, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] > 100
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling TweetsApi.space_tweets, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] < 1
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling TweetsApi.space_tweets, must be greater than or equal to 1.'
      end

      allowable_values = %w[attachments author_id context_annotations conversation_id created_at
                            edit_controls edit_history_tweet_ids entities geo id in_reply_to_user_id lang non_public_metrics organic_metrics possibly_sensitive promoted_metrics public_metrics referenced_tweets reply_settings source text withheld]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"tweet_fields"]" when calling TweetsApi.space_tweets, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["attachments.media_keys", "attachments.poll_ids", "author_id", "edit_history_tweet_ids",
                          "entities.mentions.username", "geo.place_id", "in_reply_to_user_id", "referenced_tweets.id", "referenced_tweets.id.author_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling TweetsApi.space_tweets, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[alt_text duration_ms height media_key non_public_metrics organic_metrics
                            preview_image_url promoted_metrics public_metrics type url variants width]
      if @api_client.config.client_side_validation && opts[:media_fields] && !opts[:media_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"media_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:media_fields].nil? && opts[:media_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"media_fields"]" when calling TweetsApi.space_tweets, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[duration_minutes end_datetime id options voting_status]
      if @api_client.config.client_side_validation && opts[:poll_fields] && !opts[:poll_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"poll_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:poll_fields].nil? && opts[:poll_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"poll_fields"]" when calling TweetsApi.space_tweets, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling TweetsApi.space_tweets, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[contained_within country country_code full_name geo id name place_type]
      if @api_client.config.client_side_validation && opts[:place_fields] && !opts[:place_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"place_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:place_fields].nil? && opts[:place_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"place_fields"]" when calling TweetsApi.space_tweets, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/spaces/{id}/tweets".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:max_results] = opts[:max_results] unless opts[:max_results].nil?
      unless opts[:tweet_fields].nil?
        query_params[:'tweet.fields'] =
          @api_client.build_collection_param(opts[:tweet_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:media_fields].nil?
        query_params[:'media.fields'] =
          @api_client.build_collection_param(opts[:media_fields], :csv)
      end
      unless opts[:poll_fields].nil?
        query_params[:'poll.fields'] =
          @api_client.build_collection_param(opts[:poll_fields], :csv)
      end
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:place_fields].nil?
        query_params[:'place.fields'] =
          @api_client.build_collection_param(opts[:place_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2SpacesIdTweetsResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken BearerToken]

      new_options = opts.merge(
        operation: :"TweetsApi.space_tweets",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: TweetsApi#space_tweets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Full archive search counts
    # Returns Tweet Counts that match a search query.
    # @param query [String] One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length.
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :start_time YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute).
    # @option opts [Time] :end_time YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute).
    # @option opts [String] :since_id Returns results with a Tweet ID greater than (that is, more recent than) the specified ID.
    # @option opts [String] :until_id Returns results with a Tweet ID less than (that is, older than) the specified ID.
    # @option opts [String] :next_token This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
    # @option opts [String] :pagination_token This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
    # @option opts [String] :granularity The granularity for the search counts results. (default to 'hour')
    # @option opts [Array<String>] :search_count_fields A comma separated list of SearchCount fields to display.
    # @return [Get2TweetsCountsAllResponse]
    def tweet_counts_full_archive_search(query, opts = {})
      data, _status_code, _headers = tweet_counts_full_archive_search_with_http_info(query, opts)
      data
    end

    # Full archive search counts
    # Returns Tweet Counts that match a search query.
    # @param query [String] One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length.
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :start_time YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute).
    # @option opts [Time] :end_time YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute).
    # @option opts [String] :since_id Returns results with a Tweet ID greater than (that is, more recent than) the specified ID.
    # @option opts [String] :until_id Returns results with a Tweet ID less than (that is, older than) the specified ID.
    # @option opts [String] :next_token This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
    # @option opts [String] :pagination_token This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
    # @option opts [String] :granularity The granularity for the search counts results. (default to 'hour')
    # @option opts [Array<String>] :search_count_fields A comma separated list of SearchCount fields to display.
    # @return [Array<(Get2TweetsCountsAllResponse, Integer, Hash)>] Get2TweetsCountsAllResponse data, response status code and response headers
    def tweet_counts_full_archive_search_with_http_info(query, opts = {})
      @api_client.config.logger.debug "Calling API: TweetsApi.tweet_counts_full_archive_search ..." if @api_client.config.debugging
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        raise ArgumentError,
              "Missing the required parameter 'query' when calling TweetsApi.tweet_counts_full_archive_search"
      end
      if @api_client.config.client_side_validation && query.to_s.length > 4096
        raise ArgumentError,
              'invalid value for "query" when calling TweetsApi.tweet_counts_full_archive_search, the character length must be smaller than or equal to 4096.'
      end

      if @api_client.config.client_side_validation && query.to_s.empty?
        raise ArgumentError,
              'invalid value for "query" when calling TweetsApi.tweet_counts_full_archive_search, the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && !opts[:since_id].nil? && opts[:since_id] !~ pattern
        raise ArgumentError,
              "invalid value for 'opts[:\"since_id\"]' when calling TweetsApi.tweet_counts_full_archive_search, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && !opts[:until_id].nil? && opts[:until_id] !~ pattern
        raise ArgumentError,
              "invalid value for 'opts[:\"until_id\"]' when calling TweetsApi.tweet_counts_full_archive_search, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:next_token].nil? && opts[:next_token].to_s.empty?
        raise ArgumentError,
              'invalid value for "opts[:"next_token"]" when calling TweetsApi.tweet_counts_full_archive_search, the character length must be great than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.empty?
        raise ArgumentError,
              'invalid value for "opts[:"pagination_token"]" when calling TweetsApi.tweet_counts_full_archive_search, the character length must be great than or equal to 1.'
      end

      allowable_values = %w[minute hour day]
      raise ArgumentError, "invalid value for \"granularity\", must be one of #{allowable_values}" if @api_client.config.client_side_validation && opts[:granularity] && !allowable_values.include?(opts[:granularity])

      allowable_values = %w[end start tweet_count]
      if @api_client.config.client_side_validation && opts[:search_count_fields] && !opts[:search_count_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"search_count_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:search_count_fields].nil? && opts[:search_count_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"search_count_fields"]" when calling TweetsApi.tweet_counts_full_archive_search, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/tweets/counts/all"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:query] = query
      query_params[:start_time] = opts[:start_time] unless opts[:start_time].nil?
      query_params[:end_time] = opts[:end_time] unless opts[:end_time].nil?
      query_params[:since_id] = opts[:since_id] unless opts[:since_id].nil?
      query_params[:until_id] = opts[:until_id] unless opts[:until_id].nil?
      query_params[:next_token] = opts[:next_token] unless opts[:next_token].nil?
      query_params[:pagination_token] = opts[:pagination_token] unless opts[:pagination_token].nil?
      query_params[:granularity] = opts[:granularity] unless opts[:granularity].nil?
      unless opts[:search_count_fields].nil?
        query_params[:'search_count.fields'] =
          @api_client.build_collection_param(opts[:search_count_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2TweetsCountsAllResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerToken"]

      new_options = opts.merge(
        operation: :"TweetsApi.tweet_counts_full_archive_search",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: TweetsApi#tweet_counts_full_archive_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Recent search counts
    # Returns Tweet Counts from the last 7 days that match a search query.
    # @param query [String] One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length.
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :start_time YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute).
    # @option opts [Time] :end_time YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute).
    # @option opts [String] :since_id Returns results with a Tweet ID greater than (that is, more recent than) the specified ID.
    # @option opts [String] :until_id Returns results with a Tweet ID less than (that is, older than) the specified ID.
    # @option opts [String] :next_token This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
    # @option opts [String] :pagination_token This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
    # @option opts [String] :granularity The granularity for the search counts results. (default to 'hour')
    # @option opts [Array<String>] :search_count_fields A comma separated list of SearchCount fields to display.
    # @return [Get2TweetsCountsRecentResponse]
    def tweet_counts_recent_search(query, opts = {})
      data, _status_code, _headers = tweet_counts_recent_search_with_http_info(query, opts)
      data
    end

    # Recent search counts
    # Returns Tweet Counts from the last 7 days that match a search query.
    # @param query [String] One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length.
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :start_time YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute).
    # @option opts [Time] :end_time YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute).
    # @option opts [String] :since_id Returns results with a Tweet ID greater than (that is, more recent than) the specified ID.
    # @option opts [String] :until_id Returns results with a Tweet ID less than (that is, older than) the specified ID.
    # @option opts [String] :next_token This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
    # @option opts [String] :pagination_token This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
    # @option opts [String] :granularity The granularity for the search counts results. (default to 'hour')
    # @option opts [Array<String>] :search_count_fields A comma separated list of SearchCount fields to display.
    # @return [Array<(Get2TweetsCountsRecentResponse, Integer, Hash)>] Get2TweetsCountsRecentResponse data, response status code and response headers
    def tweet_counts_recent_search_with_http_info(query, opts = {})
      @api_client.config.logger.debug "Calling API: TweetsApi.tweet_counts_recent_search ..." if @api_client.config.debugging
      # verify the required parameter 'query' is set
      raise ArgumentError, "Missing the required parameter 'query' when calling TweetsApi.tweet_counts_recent_search" if @api_client.config.client_side_validation && query.nil?

      if @api_client.config.client_side_validation && query.to_s.length > 4096
        raise ArgumentError,
              'invalid value for "query" when calling TweetsApi.tweet_counts_recent_search, the character length must be smaller than or equal to 4096.'
      end

      if @api_client.config.client_side_validation && query.to_s.empty?
        raise ArgumentError,
              'invalid value for "query" when calling TweetsApi.tweet_counts_recent_search, the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && !opts[:since_id].nil? && opts[:since_id] !~ pattern
        raise ArgumentError,
              "invalid value for 'opts[:\"since_id\"]' when calling TweetsApi.tweet_counts_recent_search, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && !opts[:until_id].nil? && opts[:until_id] !~ pattern
        raise ArgumentError,
              "invalid value for 'opts[:\"until_id\"]' when calling TweetsApi.tweet_counts_recent_search, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:next_token].nil? && opts[:next_token].to_s.empty?
        raise ArgumentError,
              'invalid value for "opts[:"next_token"]" when calling TweetsApi.tweet_counts_recent_search, the character length must be great than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.empty?
        raise ArgumentError,
              'invalid value for "opts[:"pagination_token"]" when calling TweetsApi.tweet_counts_recent_search, the character length must be great than or equal to 1.'
      end

      allowable_values = %w[minute hour day]
      raise ArgumentError, "invalid value for \"granularity\", must be one of #{allowable_values}" if @api_client.config.client_side_validation && opts[:granularity] && !allowable_values.include?(opts[:granularity])

      allowable_values = %w[end start tweet_count]
      if @api_client.config.client_side_validation && opts[:search_count_fields] && !opts[:search_count_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"search_count_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:search_count_fields].nil? && opts[:search_count_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"search_count_fields"]" when calling TweetsApi.tweet_counts_recent_search, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/tweets/counts/recent"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:query] = query
      query_params[:start_time] = opts[:start_time] unless opts[:start_time].nil?
      query_params[:end_time] = opts[:end_time] unless opts[:end_time].nil?
      query_params[:since_id] = opts[:since_id] unless opts[:since_id].nil?
      query_params[:until_id] = opts[:until_id] unless opts[:until_id].nil?
      query_params[:next_token] = opts[:next_token] unless opts[:next_token].nil?
      query_params[:pagination_token] = opts[:pagination_token] unless opts[:pagination_token].nil?
      query_params[:granularity] = opts[:granularity] unless opts[:granularity].nil?
      unless opts[:search_count_fields].nil?
        query_params[:'search_count.fields'] =
          @api_client.build_collection_param(opts[:search_count_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2TweetsCountsRecentResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerToken"]

      new_options = opts.merge(
        operation: :"TweetsApi.tweet_counts_recent_search",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: TweetsApi#tweet_counts_recent_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Full-archive search
    # Returns Tweets that match a search query.
    # @param query [String] One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length.
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :start_time YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute).
    # @option opts [Time] :end_time YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute).
    # @option opts [String] :since_id Returns results with a Tweet ID greater than (that is, more recent than) the specified ID.
    # @option opts [String] :until_id Returns results with a Tweet ID less than (that is, older than) the specified ID.
    # @option opts [Integer] :max_results The maximum number of search results to be returned by a request. (default to 10)
    # @option opts [String] :next_token This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
    # @option opts [String] :pagination_token This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
    # @option opts [String] :sort_order This order in which to return results.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :poll_fields A comma separated list of Poll fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :place_fields A comma separated list of Place fields to display.
    # @return [Get2TweetsSearchAllResponse]
    def tweets_fullarchive_search(query, opts = {})
      data, _status_code, _headers = tweets_fullarchive_search_with_http_info(query, opts)
      data
    end

    # Full-archive search
    # Returns Tweets that match a search query.
    # @param query [String] One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length.
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :start_time YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute).
    # @option opts [Time] :end_time YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute).
    # @option opts [String] :since_id Returns results with a Tweet ID greater than (that is, more recent than) the specified ID.
    # @option opts [String] :until_id Returns results with a Tweet ID less than (that is, older than) the specified ID.
    # @option opts [Integer] :max_results The maximum number of search results to be returned by a request. (default to 10)
    # @option opts [String] :next_token This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
    # @option opts [String] :pagination_token This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
    # @option opts [String] :sort_order This order in which to return results.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :poll_fields A comma separated list of Poll fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :place_fields A comma separated list of Place fields to display.
    # @return [Array<(Get2TweetsSearchAllResponse, Integer, Hash)>] Get2TweetsSearchAllResponse data, response status code and response headers
    def tweets_fullarchive_search_with_http_info(query, opts = {})
      @api_client.config.logger.debug "Calling API: TweetsApi.tweets_fullarchive_search ..." if @api_client.config.debugging
      # verify the required parameter 'query' is set
      raise ArgumentError, "Missing the required parameter 'query' when calling TweetsApi.tweets_fullarchive_search" if @api_client.config.client_side_validation && query.nil?

      if @api_client.config.client_side_validation && query.to_s.length > 4096
        raise ArgumentError,
              'invalid value for "query" when calling TweetsApi.tweets_fullarchive_search, the character length must be smaller than or equal to 4096.'
      end

      if @api_client.config.client_side_validation && query.to_s.empty?
        raise ArgumentError,
              'invalid value for "query" when calling TweetsApi.tweets_fullarchive_search, the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && !opts[:since_id].nil? && opts[:since_id] !~ pattern
        raise ArgumentError,
              "invalid value for 'opts[:\"since_id\"]' when calling TweetsApi.tweets_fullarchive_search, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && !opts[:until_id].nil? && opts[:until_id] !~ pattern
        raise ArgumentError,
              "invalid value for 'opts[:\"until_id\"]' when calling TweetsApi.tweets_fullarchive_search, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] > 500
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling TweetsApi.tweets_fullarchive_search, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] < 10
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling TweetsApi.tweets_fullarchive_search, must be greater than or equal to 10.'
      end

      if @api_client.config.client_side_validation && !opts[:next_token].nil? && opts[:next_token].to_s.empty?
        raise ArgumentError,
              'invalid value for "opts[:"next_token"]" when calling TweetsApi.tweets_fullarchive_search, the character length must be great than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.empty?
        raise ArgumentError,
              'invalid value for "opts[:"pagination_token"]" when calling TweetsApi.tweets_fullarchive_search, the character length must be great than or equal to 1.'
      end

      allowable_values = %w[recency relevancy]
      raise ArgumentError, "invalid value for \"sort_order\", must be one of #{allowable_values}" if @api_client.config.client_side_validation && opts[:sort_order] && !allowable_values.include?(opts[:sort_order])

      allowable_values = %w[attachments author_id context_annotations conversation_id created_at
                            edit_controls edit_history_tweet_ids entities geo id in_reply_to_user_id lang non_public_metrics organic_metrics possibly_sensitive promoted_metrics public_metrics referenced_tweets reply_settings source text withheld]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"tweet_fields"]" when calling TweetsApi.tweets_fullarchive_search, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["attachments.media_keys", "attachments.poll_ids", "author_id", "edit_history_tweet_ids",
                          "entities.mentions.username", "geo.place_id", "in_reply_to_user_id", "referenced_tweets.id", "referenced_tweets.id.author_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling TweetsApi.tweets_fullarchive_search, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[alt_text duration_ms height media_key non_public_metrics organic_metrics
                            preview_image_url promoted_metrics public_metrics type url variants width]
      if @api_client.config.client_side_validation && opts[:media_fields] && !opts[:media_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"media_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:media_fields].nil? && opts[:media_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"media_fields"]" when calling TweetsApi.tweets_fullarchive_search, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[duration_minutes end_datetime id options voting_status]
      if @api_client.config.client_side_validation && opts[:poll_fields] && !opts[:poll_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"poll_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:poll_fields].nil? && opts[:poll_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"poll_fields"]" when calling TweetsApi.tweets_fullarchive_search, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling TweetsApi.tweets_fullarchive_search, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[contained_within country country_code full_name geo id name place_type]
      if @api_client.config.client_side_validation && opts[:place_fields] && !opts[:place_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"place_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:place_fields].nil? && opts[:place_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"place_fields"]" when calling TweetsApi.tweets_fullarchive_search, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/tweets/search/all"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:query] = query
      query_params[:start_time] = opts[:start_time] unless opts[:start_time].nil?
      query_params[:end_time] = opts[:end_time] unless opts[:end_time].nil?
      query_params[:since_id] = opts[:since_id] unless opts[:since_id].nil?
      query_params[:until_id] = opts[:until_id] unless opts[:until_id].nil?
      query_params[:max_results] = opts[:max_results] unless opts[:max_results].nil?
      query_params[:next_token] = opts[:next_token] unless opts[:next_token].nil?
      query_params[:pagination_token] = opts[:pagination_token] unless opts[:pagination_token].nil?
      query_params[:sort_order] = opts[:sort_order] unless opts[:sort_order].nil?
      unless opts[:tweet_fields].nil?
        query_params[:'tweet.fields'] =
          @api_client.build_collection_param(opts[:tweet_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:media_fields].nil?
        query_params[:'media.fields'] =
          @api_client.build_collection_param(opts[:media_fields], :csv)
      end
      unless opts[:poll_fields].nil?
        query_params[:'poll.fields'] =
          @api_client.build_collection_param(opts[:poll_fields], :csv)
      end
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:place_fields].nil?
        query_params[:'place.fields'] =
          @api_client.build_collection_param(opts[:place_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2TweetsSearchAllResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerToken"]

      new_options = opts.merge(
        operation: :"TweetsApi.tweets_fullarchive_search",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: TweetsApi#tweets_fullarchive_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Recent search
    # Returns Tweets from the last 7 days that match a search query.
    # @param query [String] One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length.
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :start_time YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute).
    # @option opts [Time] :end_time YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute).
    # @option opts [String] :since_id Returns results with a Tweet ID greater than (that is, more recent than) the specified ID.
    # @option opts [String] :until_id Returns results with a Tweet ID less than (that is, older than) the specified ID.
    # @option opts [Integer] :max_results The maximum number of search results to be returned by a request. (default to 10)
    # @option opts [String] :next_token This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
    # @option opts [String] :pagination_token This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
    # @option opts [String] :sort_order This order in which to return results.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :poll_fields A comma separated list of Poll fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :place_fields A comma separated list of Place fields to display.
    # @return [Get2TweetsSearchRecentResponse]
    def tweets_recent_search(query, opts = {})
      data, _status_code, _headers = tweets_recent_search_with_http_info(query, opts)
      data
    end

    # Recent search
    # Returns Tweets from the last 7 days that match a search query.
    # @param query [String] One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length.
    # @param [Hash] opts the optional parameters
    # @option opts [Time] :start_time YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute).
    # @option opts [Time] :end_time YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute).
    # @option opts [String] :since_id Returns results with a Tweet ID greater than (that is, more recent than) the specified ID.
    # @option opts [String] :until_id Returns results with a Tweet ID less than (that is, older than) the specified ID.
    # @option opts [Integer] :max_results The maximum number of search results to be returned by a request. (default to 10)
    # @option opts [String] :next_token This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
    # @option opts [String] :pagination_token This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
    # @option opts [String] :sort_order This order in which to return results.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :poll_fields A comma separated list of Poll fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :place_fields A comma separated list of Place fields to display.
    # @return [Array<(Get2TweetsSearchRecentResponse, Integer, Hash)>] Get2TweetsSearchRecentResponse data, response status code and response headers
    def tweets_recent_search_with_http_info(query, opts = {})
      @api_client.config.logger.debug "Calling API: TweetsApi.tweets_recent_search ..." if @api_client.config.debugging
      # verify the required parameter 'query' is set
      raise ArgumentError, "Missing the required parameter 'query' when calling TweetsApi.tweets_recent_search" if @api_client.config.client_side_validation && query.nil?

      if @api_client.config.client_side_validation && query.to_s.length > 4096
        raise ArgumentError,
              'invalid value for "query" when calling TweetsApi.tweets_recent_search, the character length must be smaller than or equal to 4096.'
      end

      if @api_client.config.client_side_validation && query.to_s.empty?
        raise ArgumentError,
              'invalid value for "query" when calling TweetsApi.tweets_recent_search, the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && !opts[:since_id].nil? && opts[:since_id] !~ pattern
        raise ArgumentError,
              "invalid value for 'opts[:\"since_id\"]' when calling TweetsApi.tweets_recent_search, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && !opts[:until_id].nil? && opts[:until_id] !~ pattern
        raise ArgumentError,
              "invalid value for 'opts[:\"until_id\"]' when calling TweetsApi.tweets_recent_search, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] > 100
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling TweetsApi.tweets_recent_search, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] < 10
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling TweetsApi.tweets_recent_search, must be greater than or equal to 10.'
      end

      if @api_client.config.client_side_validation && !opts[:next_token].nil? && opts[:next_token].to_s.empty?
        raise ArgumentError,
              'invalid value for "opts[:"next_token"]" when calling TweetsApi.tweets_recent_search, the character length must be great than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.empty?
        raise ArgumentError,
              'invalid value for "opts[:"pagination_token"]" when calling TweetsApi.tweets_recent_search, the character length must be great than or equal to 1.'
      end

      allowable_values = %w[recency relevancy]
      raise ArgumentError, "invalid value for \"sort_order\", must be one of #{allowable_values}" if @api_client.config.client_side_validation && opts[:sort_order] && !allowable_values.include?(opts[:sort_order])

      allowable_values = %w[attachments author_id context_annotations conversation_id created_at
                            edit_controls edit_history_tweet_ids entities geo id in_reply_to_user_id lang non_public_metrics organic_metrics possibly_sensitive promoted_metrics public_metrics referenced_tweets reply_settings source text withheld]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"tweet_fields"]" when calling TweetsApi.tweets_recent_search, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["attachments.media_keys", "attachments.poll_ids", "author_id", "edit_history_tweet_ids",
                          "entities.mentions.username", "geo.place_id", "in_reply_to_user_id", "referenced_tweets.id", "referenced_tweets.id.author_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling TweetsApi.tweets_recent_search, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[alt_text duration_ms height media_key non_public_metrics organic_metrics
                            preview_image_url promoted_metrics public_metrics type url variants width]
      if @api_client.config.client_side_validation && opts[:media_fields] && !opts[:media_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"media_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:media_fields].nil? && opts[:media_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"media_fields"]" when calling TweetsApi.tweets_recent_search, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[duration_minutes end_datetime id options voting_status]
      if @api_client.config.client_side_validation && opts[:poll_fields] && !opts[:poll_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"poll_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:poll_fields].nil? && opts[:poll_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"poll_fields"]" when calling TweetsApi.tweets_recent_search, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling TweetsApi.tweets_recent_search, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[contained_within country country_code full_name geo id name place_type]
      if @api_client.config.client_side_validation && opts[:place_fields] && !opts[:place_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"place_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:place_fields].nil? && opts[:place_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"place_fields"]" when calling TweetsApi.tweets_recent_search, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/tweets/search/recent"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:query] = query
      query_params[:start_time] = opts[:start_time] unless opts[:start_time].nil?
      query_params[:end_time] = opts[:end_time] unless opts[:end_time].nil?
      query_params[:since_id] = opts[:since_id] unless opts[:since_id].nil?
      query_params[:until_id] = opts[:until_id] unless opts[:until_id].nil?
      query_params[:max_results] = opts[:max_results] unless opts[:max_results].nil?
      query_params[:next_token] = opts[:next_token] unless opts[:next_token].nil?
      query_params[:pagination_token] = opts[:pagination_token] unless opts[:pagination_token].nil?
      query_params[:sort_order] = opts[:sort_order] unless opts[:sort_order].nil?
      unless opts[:tweet_fields].nil?
        query_params[:'tweet.fields'] =
          @api_client.build_collection_param(opts[:tweet_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:media_fields].nil?
        query_params[:'media.fields'] =
          @api_client.build_collection_param(opts[:media_fields], :csv)
      end
      unless opts[:poll_fields].nil?
        query_params[:'poll.fields'] =
          @api_client.build_collection_param(opts[:poll_fields], :csv)
      end
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:place_fields].nil?
        query_params[:'place.fields'] =
          @api_client.build_collection_param(opts[:place_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2TweetsSearchRecentResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken BearerToken UserToken]

      new_options = opts.merge(
        operation: :"TweetsApi.tweets_recent_search",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: TweetsApi#tweets_recent_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Causes the User (in the path) to like the specified Tweet
    # Causes the User (in the path) to like the specified Tweet. The User in the path must match the User context authorizing the request.
    # @param id [String] The ID of the authenticated source User that is requesting to like the Tweet.
    # @param [Hash] opts the optional parameters
    # @option opts [UsersLikesCreateRequest] :users_likes_create_request
    # @return [UsersLikesCreateResponse]
    def users_id_like(id, opts = {})
      data, _status_code, _headers = users_id_like_with_http_info(id, opts)
      data
    end

    # Causes the User (in the path) to like the specified Tweet
    # Causes the User (in the path) to like the specified Tweet. The User in the path must match the User context authorizing the request.
    # @param id [String] The ID of the authenticated source User that is requesting to like the Tweet.
    # @param [Hash] opts the optional parameters
    # @option opts [UsersLikesCreateRequest] :users_likes_create_request
    # @return [Array<(UsersLikesCreateResponse, Integer, Hash)>] UsersLikesCreateResponse data, response status code and response headers
    def users_id_like_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: TweetsApi.users_id_like ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling TweetsApi.users_id_like" if @api_client.config.client_side_validation && id.nil?

      # resource path
      local_var_path = "/2/users/{id}/likes".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      header_params["Content-Type"] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:users_likes_create_request])

      # return_type
      return_type = opts[:debug_return_type] || "UsersLikesCreateResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken UserToken]

      new_options = opts.merge(
        operation: :"TweetsApi.users_id_like",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      @api_client.config.logger.debug "API called: TweetsApi#users_id_like\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Returns Tweet objects liked by the provided User ID
    # Returns a list of Tweets liked by the provided User ID
    # @param id [String] The ID of the User to lookup.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results.
    # @option opts [String] :pagination_token This parameter is used to get the next &#39;page&#39; of results.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :poll_fields A comma separated list of Poll fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :place_fields A comma separated list of Place fields to display.
    # @return [Get2UsersIdLikedTweetsResponse]
    def users_id_liked_tweets(id, opts = {})
      data, _status_code, _headers = users_id_liked_tweets_with_http_info(id, opts)
      data
    end

    # Returns Tweet objects liked by the provided User ID
    # Returns a list of Tweets liked by the provided User ID
    # @param id [String] The ID of the User to lookup.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results.
    # @option opts [String] :pagination_token This parameter is used to get the next &#39;page&#39; of results.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :poll_fields A comma separated list of Poll fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :place_fields A comma separated list of Place fields to display.
    # @return [Array<(Get2UsersIdLikedTweetsResponse, Integer, Hash)>] Get2UsersIdLikedTweetsResponse data, response status code and response headers
    def users_id_liked_tweets_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: TweetsApi.users_id_liked_tweets ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling TweetsApi.users_id_liked_tweets" if @api_client.config.client_side_validation && id.nil?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        raise ArgumentError,
              "invalid value for 'id' when calling TweetsApi.users_id_liked_tweets, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] > 100
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling TweetsApi.users_id_liked_tweets, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] < 5
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling TweetsApi.users_id_liked_tweets, must be greater than or equal to 5.'
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.empty?
        raise ArgumentError,
              'invalid value for "opts[:"pagination_token"]" when calling TweetsApi.users_id_liked_tweets, the character length must be great than or equal to 1.'
      end

      allowable_values = %w[attachments author_id context_annotations conversation_id created_at
                            edit_controls edit_history_tweet_ids entities geo id in_reply_to_user_id lang non_public_metrics organic_metrics possibly_sensitive promoted_metrics public_metrics referenced_tweets reply_settings source text withheld]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"tweet_fields"]" when calling TweetsApi.users_id_liked_tweets, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["attachments.media_keys", "attachments.poll_ids", "author_id", "edit_history_tweet_ids",
                          "entities.mentions.username", "geo.place_id", "in_reply_to_user_id", "referenced_tweets.id", "referenced_tweets.id.author_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling TweetsApi.users_id_liked_tweets, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[alt_text duration_ms height media_key non_public_metrics organic_metrics
                            preview_image_url promoted_metrics public_metrics type url variants width]
      if @api_client.config.client_side_validation && opts[:media_fields] && !opts[:media_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"media_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:media_fields].nil? && opts[:media_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"media_fields"]" when calling TweetsApi.users_id_liked_tweets, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[duration_minutes end_datetime id options voting_status]
      if @api_client.config.client_side_validation && opts[:poll_fields] && !opts[:poll_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"poll_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:poll_fields].nil? && opts[:poll_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"poll_fields"]" when calling TweetsApi.users_id_liked_tweets, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling TweetsApi.users_id_liked_tweets, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[contained_within country country_code full_name geo id name place_type]
      if @api_client.config.client_side_validation && opts[:place_fields] && !opts[:place_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"place_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:place_fields].nil? && opts[:place_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"place_fields"]" when calling TweetsApi.users_id_liked_tweets, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/users/{id}/liked_tweets".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:max_results] = opts[:max_results] unless opts[:max_results].nil?
      query_params[:pagination_token] = opts[:pagination_token] unless opts[:pagination_token].nil?
      unless opts[:tweet_fields].nil?
        query_params[:'tweet.fields'] =
          @api_client.build_collection_param(opts[:tweet_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:media_fields].nil?
        query_params[:'media.fields'] =
          @api_client.build_collection_param(opts[:media_fields], :csv)
      end
      unless opts[:poll_fields].nil?
        query_params[:'poll.fields'] =
          @api_client.build_collection_param(opts[:poll_fields], :csv)
      end
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:place_fields].nil?
        query_params[:'place.fields'] =
          @api_client.build_collection_param(opts[:place_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2UsersIdLikedTweetsResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken BearerToken UserToken]

      new_options = opts.merge(
        operation: :"TweetsApi.users_id_liked_tweets",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: TweetsApi#users_id_liked_tweets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # User mention timeline by User ID
    # Returns Tweet objects that mention username associated to the provided User ID
    # @param id [String] The ID of the User to lookup.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :since_id The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified.
    # @option opts [String] :until_id The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified.
    # @option opts [Integer] :max_results The maximum number of results.
    # @option opts [String] :pagination_token This parameter is used to get the next &#39;page&#39; of results.
    # @option opts [Time] :start_time YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified.
    # @option opts [Time] :end_time YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :poll_fields A comma separated list of Poll fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :place_fields A comma separated list of Place fields to display.
    # @return [Get2UsersIdMentionsResponse]
    def users_id_mentions(id, opts = {})
      data, _status_code, _headers = users_id_mentions_with_http_info(id, opts)
      data
    end

    # User mention timeline by User ID
    # Returns Tweet objects that mention username associated to the provided User ID
    # @param id [String] The ID of the User to lookup.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :since_id The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified.
    # @option opts [String] :until_id The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified.
    # @option opts [Integer] :max_results The maximum number of results.
    # @option opts [String] :pagination_token This parameter is used to get the next &#39;page&#39; of results.
    # @option opts [Time] :start_time YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified.
    # @option opts [Time] :end_time YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :poll_fields A comma separated list of Poll fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :place_fields A comma separated list of Place fields to display.
    # @return [Array<(Get2UsersIdMentionsResponse, Integer, Hash)>] Get2UsersIdMentionsResponse data, response status code and response headers
    def users_id_mentions_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: TweetsApi.users_id_mentions ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling TweetsApi.users_id_mentions" if @api_client.config.client_side_validation && id.nil?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        raise ArgumentError,
              "invalid value for 'id' when calling TweetsApi.users_id_mentions, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && !opts[:since_id].nil? && opts[:since_id] !~ pattern
        raise ArgumentError,
              "invalid value for 'opts[:\"since_id\"]' when calling TweetsApi.users_id_mentions, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && !opts[:until_id].nil? && opts[:until_id] !~ pattern
        raise ArgumentError,
              "invalid value for 'opts[:\"until_id\"]' when calling TweetsApi.users_id_mentions, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] > 100
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling TweetsApi.users_id_mentions, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] < 5
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling TweetsApi.users_id_mentions, must be greater than or equal to 5.'
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.empty?
        raise ArgumentError,
              'invalid value for "opts[:"pagination_token"]" when calling TweetsApi.users_id_mentions, the character length must be great than or equal to 1.'
      end

      allowable_values = %w[attachments author_id context_annotations conversation_id created_at
                            edit_controls edit_history_tweet_ids entities geo id in_reply_to_user_id lang non_public_metrics organic_metrics possibly_sensitive promoted_metrics public_metrics referenced_tweets reply_settings source text withheld]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"tweet_fields"]" when calling TweetsApi.users_id_mentions, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["attachments.media_keys", "attachments.poll_ids", "author_id", "edit_history_tweet_ids",
                          "entities.mentions.username", "geo.place_id", "in_reply_to_user_id", "referenced_tweets.id", "referenced_tweets.id.author_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling TweetsApi.users_id_mentions, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[alt_text duration_ms height media_key non_public_metrics organic_metrics
                            preview_image_url promoted_metrics public_metrics type url variants width]
      if @api_client.config.client_side_validation && opts[:media_fields] && !opts[:media_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"media_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:media_fields].nil? && opts[:media_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"media_fields"]" when calling TweetsApi.users_id_mentions, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[duration_minutes end_datetime id options voting_status]
      if @api_client.config.client_side_validation && opts[:poll_fields] && !opts[:poll_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"poll_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:poll_fields].nil? && opts[:poll_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"poll_fields"]" when calling TweetsApi.users_id_mentions, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling TweetsApi.users_id_mentions, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[contained_within country country_code full_name geo id name place_type]
      if @api_client.config.client_side_validation && opts[:place_fields] && !opts[:place_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"place_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:place_fields].nil? && opts[:place_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"place_fields"]" when calling TweetsApi.users_id_mentions, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/users/{id}/mentions".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:since_id] = opts[:since_id] unless opts[:since_id].nil?
      query_params[:until_id] = opts[:until_id] unless opts[:until_id].nil?
      query_params[:max_results] = opts[:max_results] unless opts[:max_results].nil?
      query_params[:pagination_token] = opts[:pagination_token] unless opts[:pagination_token].nil?
      query_params[:start_time] = opts[:start_time] unless opts[:start_time].nil?
      query_params[:end_time] = opts[:end_time] unless opts[:end_time].nil?
      unless opts[:tweet_fields].nil?
        query_params[:'tweet.fields'] =
          @api_client.build_collection_param(opts[:tweet_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:media_fields].nil?
        query_params[:'media.fields'] =
          @api_client.build_collection_param(opts[:media_fields], :csv)
      end
      unless opts[:poll_fields].nil?
        query_params[:'poll.fields'] =
          @api_client.build_collection_param(opts[:poll_fields], :csv)
      end
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:place_fields].nil?
        query_params[:'place.fields'] =
          @api_client.build_collection_param(opts[:place_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2UsersIdMentionsResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken BearerToken UserToken]

      new_options = opts.merge(
        operation: :"TweetsApi.users_id_mentions",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: TweetsApi#users_id_mentions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Causes the User (in the path) to retweet the specified Tweet.
    # Causes the User (in the path) to retweet the specified Tweet. The User in the path must match the User context authorizing the request.
    # @param id [String] The ID of the authenticated source User that is requesting to retweet the Tweet.
    # @param [Hash] opts the optional parameters
    # @option opts [UsersRetweetsCreateRequest] :users_retweets_create_request
    # @return [UsersRetweetsCreateResponse]
    def users_id_retweets(id, opts = {})
      data, _status_code, _headers = users_id_retweets_with_http_info(id, opts)
      data
    end

    # Causes the User (in the path) to retweet the specified Tweet.
    # Causes the User (in the path) to retweet the specified Tweet. The User in the path must match the User context authorizing the request.
    # @param id [String] The ID of the authenticated source User that is requesting to retweet the Tweet.
    # @param [Hash] opts the optional parameters
    # @option opts [UsersRetweetsCreateRequest] :users_retweets_create_request
    # @return [Array<(UsersRetweetsCreateResponse, Integer, Hash)>] UsersRetweetsCreateResponse data, response status code and response headers
    def users_id_retweets_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: TweetsApi.users_id_retweets ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling TweetsApi.users_id_retweets" if @api_client.config.client_side_validation && id.nil?

      # resource path
      local_var_path = "/2/users/{id}/retweets".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      header_params["Content-Type"] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:users_retweets_create_request])

      # return_type
      return_type = opts[:debug_return_type] || "UsersRetweetsCreateResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken UserToken]

      new_options = opts.merge(
        operation: :"TweetsApi.users_id_retweets",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      @api_client.config.logger.debug "API called: TweetsApi#users_id_retweets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # User home timeline by User ID
    # Returns Tweet objects that appears in the provided User ID's home timeline
    # @param id [String] The ID of the authenticated source User to list Reverse Chronological Timeline Tweets of.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :since_id The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified.
    # @option opts [String] :until_id The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified.
    # @option opts [Integer] :max_results The maximum number of results.
    # @option opts [String] :pagination_token This parameter is used to get the next &#39;page&#39; of results.
    # @option opts [Array<String>] :exclude The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;).
    # @option opts [Time] :start_time YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified.
    # @option opts [Time] :end_time YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :poll_fields A comma separated list of Poll fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :place_fields A comma separated list of Place fields to display.
    # @return [Get2UsersIdTimelinesReverseChronologicalResponse]
    def users_id_timeline(id, opts = {})
      data, _status_code, _headers = users_id_timeline_with_http_info(id, opts)
      data
    end

    # User home timeline by User ID
    # Returns Tweet objects that appears in the provided User ID&#39;s home timeline
    # @param id [String] The ID of the authenticated source User to list Reverse Chronological Timeline Tweets of.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :since_id The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified.
    # @option opts [String] :until_id The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified.
    # @option opts [Integer] :max_results The maximum number of results.
    # @option opts [String] :pagination_token This parameter is used to get the next &#39;page&#39; of results.
    # @option opts [Array<String>] :exclude The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;).
    # @option opts [Time] :start_time YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified.
    # @option opts [Time] :end_time YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :poll_fields A comma separated list of Poll fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :place_fields A comma separated list of Place fields to display.
    # @return [Array<(Get2UsersIdTimelinesReverseChronologicalResponse, Integer, Hash)>] Get2UsersIdTimelinesReverseChronologicalResponse data, response status code and response headers
    def users_id_timeline_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: TweetsApi.users_id_timeline ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling TweetsApi.users_id_timeline" if @api_client.config.client_side_validation && id.nil?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && !opts[:since_id].nil? && opts[:since_id] !~ pattern
        raise ArgumentError,
              "invalid value for 'opts[:\"since_id\"]' when calling TweetsApi.users_id_timeline, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && !opts[:until_id].nil? && opts[:until_id] !~ pattern
        raise ArgumentError,
              "invalid value for 'opts[:\"until_id\"]' when calling TweetsApi.users_id_timeline, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] > 100
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling TweetsApi.users_id_timeline, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] < 1
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling TweetsApi.users_id_timeline, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.empty?
        raise ArgumentError,
              'invalid value for "opts[:"pagination_token"]" when calling TweetsApi.users_id_timeline, the character length must be great than or equal to 1.'
      end

      allowable_values = %w[replies retweets]
      if @api_client.config.client_side_validation && opts[:exclude] && !opts[:exclude].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"exclude\", must include one of #{allowable_values}"
      end

      allowable_values = %w[attachments author_id context_annotations conversation_id created_at
                            edit_controls edit_history_tweet_ids entities geo id in_reply_to_user_id lang non_public_metrics organic_metrics possibly_sensitive promoted_metrics public_metrics referenced_tweets reply_settings source text withheld]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"tweet_fields"]" when calling TweetsApi.users_id_timeline, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["attachments.media_keys", "attachments.poll_ids", "author_id", "edit_history_tweet_ids",
                          "entities.mentions.username", "geo.place_id", "in_reply_to_user_id", "referenced_tweets.id", "referenced_tweets.id.author_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling TweetsApi.users_id_timeline, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[alt_text duration_ms height media_key non_public_metrics organic_metrics
                            preview_image_url promoted_metrics public_metrics type url variants width]
      if @api_client.config.client_side_validation && opts[:media_fields] && !opts[:media_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"media_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:media_fields].nil? && opts[:media_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"media_fields"]" when calling TweetsApi.users_id_timeline, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[duration_minutes end_datetime id options voting_status]
      if @api_client.config.client_side_validation && opts[:poll_fields] && !opts[:poll_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"poll_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:poll_fields].nil? && opts[:poll_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"poll_fields"]" when calling TweetsApi.users_id_timeline, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling TweetsApi.users_id_timeline, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[contained_within country country_code full_name geo id name place_type]
      if @api_client.config.client_side_validation && opts[:place_fields] && !opts[:place_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"place_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:place_fields].nil? && opts[:place_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"place_fields"]" when calling TweetsApi.users_id_timeline, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/users/{id}/timelines/reverse_chronological".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:since_id] = opts[:since_id] unless opts[:since_id].nil?
      query_params[:until_id] = opts[:until_id] unless opts[:until_id].nil?
      query_params[:max_results] = opts[:max_results] unless opts[:max_results].nil?
      query_params[:pagination_token] = opts[:pagination_token] unless opts[:pagination_token].nil?
      query_params[:exclude] = @api_client.build_collection_param(opts[:exclude], :csv) unless opts[:exclude].nil?
      query_params[:start_time] = opts[:start_time] unless opts[:start_time].nil?
      query_params[:end_time] = opts[:end_time] unless opts[:end_time].nil?
      unless opts[:tweet_fields].nil?
        query_params[:'tweet.fields'] =
          @api_client.build_collection_param(opts[:tweet_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:media_fields].nil?
        query_params[:'media.fields'] =
          @api_client.build_collection_param(opts[:media_fields], :csv)
      end
      unless opts[:poll_fields].nil?
        query_params[:'poll.fields'] =
          @api_client.build_collection_param(opts[:poll_fields], :csv)
      end
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:place_fields].nil?
        query_params[:'place.fields'] =
          @api_client.build_collection_param(opts[:place_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2UsersIdTimelinesReverseChronologicalResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken UserToken]

      new_options = opts.merge(
        operation: :"TweetsApi.users_id_timeline",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: TweetsApi#users_id_timeline\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # User Tweets timeline by User ID
    # Returns a list of Tweets authored by the provided User ID
    # @param id [String] The ID of the User to lookup.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :since_id The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified.
    # @option opts [String] :until_id The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified.
    # @option opts [Integer] :max_results The maximum number of results.
    # @option opts [String] :pagination_token This parameter is used to get the next &#39;page&#39; of results.
    # @option opts [Array<String>] :exclude The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;).
    # @option opts [Time] :start_time YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified.
    # @option opts [Time] :end_time YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :poll_fields A comma separated list of Poll fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :place_fields A comma separated list of Place fields to display.
    # @return [Get2UsersIdTweetsResponse]
    def users_id_tweets(id, opts = {})
      data, _status_code, _headers = users_id_tweets_with_http_info(id, opts)
      data
    end

    # User Tweets timeline by User ID
    # Returns a list of Tweets authored by the provided User ID
    # @param id [String] The ID of the User to lookup.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :since_id The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified.
    # @option opts [String] :until_id The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified.
    # @option opts [Integer] :max_results The maximum number of results.
    # @option opts [String] :pagination_token This parameter is used to get the next &#39;page&#39; of results.
    # @option opts [Array<String>] :exclude The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;).
    # @option opts [Time] :start_time YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified.
    # @option opts [Time] :end_time YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :poll_fields A comma separated list of Poll fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :place_fields A comma separated list of Place fields to display.
    # @return [Array<(Get2UsersIdTweetsResponse, Integer, Hash)>] Get2UsersIdTweetsResponse data, response status code and response headers
    def users_id_tweets_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: TweetsApi.users_id_tweets ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling TweetsApi.users_id_tweets" if @api_client.config.client_side_validation && id.nil?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        raise ArgumentError,
              "invalid value for 'id' when calling TweetsApi.users_id_tweets, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && !opts[:since_id].nil? && opts[:since_id] !~ pattern
        raise ArgumentError,
              "invalid value for 'opts[:\"since_id\"]' when calling TweetsApi.users_id_tweets, must conform to the pattern #{pattern}."
      end

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && !opts[:until_id].nil? && opts[:until_id] !~ pattern
        raise ArgumentError,
              "invalid value for 'opts[:\"until_id\"]' when calling TweetsApi.users_id_tweets, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] > 100
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling TweetsApi.users_id_tweets, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] < 5
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling TweetsApi.users_id_tweets, must be greater than or equal to 5.'
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.empty?
        raise ArgumentError,
              'invalid value for "opts[:"pagination_token"]" when calling TweetsApi.users_id_tweets, the character length must be great than or equal to 1.'
      end

      allowable_values = %w[replies retweets]
      if @api_client.config.client_side_validation && opts[:exclude] && !opts[:exclude].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"exclude\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:exclude].nil? && opts[:exclude].empty?
        raise ArgumentError,
              'invalid value for "opts[:"exclude"]" when calling TweetsApi.users_id_tweets, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[attachments author_id context_annotations conversation_id created_at
                            edit_controls edit_history_tweet_ids entities geo id in_reply_to_user_id lang non_public_metrics organic_metrics possibly_sensitive promoted_metrics public_metrics referenced_tweets reply_settings source text withheld]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"tweet_fields"]" when calling TweetsApi.users_id_tweets, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["attachments.media_keys", "attachments.poll_ids", "author_id", "edit_history_tweet_ids",
                          "entities.mentions.username", "geo.place_id", "in_reply_to_user_id", "referenced_tweets.id", "referenced_tweets.id.author_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling TweetsApi.users_id_tweets, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[alt_text duration_ms height media_key non_public_metrics organic_metrics
                            preview_image_url promoted_metrics public_metrics type url variants width]
      if @api_client.config.client_side_validation && opts[:media_fields] && !opts[:media_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"media_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:media_fields].nil? && opts[:media_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"media_fields"]" when calling TweetsApi.users_id_tweets, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[duration_minutes end_datetime id options voting_status]
      if @api_client.config.client_side_validation && opts[:poll_fields] && !opts[:poll_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"poll_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:poll_fields].nil? && opts[:poll_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"poll_fields"]" when calling TweetsApi.users_id_tweets, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling TweetsApi.users_id_tweets, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[contained_within country country_code full_name geo id name place_type]
      if @api_client.config.client_side_validation && opts[:place_fields] && !opts[:place_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"place_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:place_fields].nil? && opts[:place_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"place_fields"]" when calling TweetsApi.users_id_tweets, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/users/{id}/tweets".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:since_id] = opts[:since_id] unless opts[:since_id].nil?
      query_params[:until_id] = opts[:until_id] unless opts[:until_id].nil?
      query_params[:max_results] = opts[:max_results] unless opts[:max_results].nil?
      query_params[:pagination_token] = opts[:pagination_token] unless opts[:pagination_token].nil?
      query_params[:exclude] = @api_client.build_collection_param(opts[:exclude], :csv) unless opts[:exclude].nil?
      query_params[:start_time] = opts[:start_time] unless opts[:start_time].nil?
      query_params[:end_time] = opts[:end_time] unless opts[:end_time].nil?
      unless opts[:tweet_fields].nil?
        query_params[:'tweet.fields'] =
          @api_client.build_collection_param(opts[:tweet_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:media_fields].nil?
        query_params[:'media.fields'] =
          @api_client.build_collection_param(opts[:media_fields], :csv)
      end
      unless opts[:poll_fields].nil?
        query_params[:'poll.fields'] =
          @api_client.build_collection_param(opts[:poll_fields], :csv)
      end
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:place_fields].nil?
        query_params[:'place.fields'] =
          @api_client.build_collection_param(opts[:place_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2UsersIdTweetsResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken BearerToken UserToken]

      new_options = opts.merge(
        operation: :"TweetsApi.users_id_tweets",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: TweetsApi#users_id_tweets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Causes the User (in the path) to unlike the specified Tweet
    # Causes the User (in the path) to unlike the specified Tweet. The User must match the User context authorizing the request
    # @param id [String] The ID of the authenticated source User that is requesting to unlike the Tweet.
    # @param tweet_id [String] The ID of the Tweet that the User is requesting to unlike.
    # @param [Hash] opts the optional parameters
    # @return [UsersLikesDeleteResponse]
    def users_id_unlike(id, tweet_id, opts = {})
      data, _status_code, _headers = users_id_unlike_with_http_info(id, tweet_id, opts)
      data
    end

    # Causes the User (in the path) to unlike the specified Tweet
    # Causes the User (in the path) to unlike the specified Tweet. The User must match the User context authorizing the request
    # @param id [String] The ID of the authenticated source User that is requesting to unlike the Tweet.
    # @param tweet_id [String] The ID of the Tweet that the User is requesting to unlike.
    # @param [Hash] opts the optional parameters
    # @return [Array<(UsersLikesDeleteResponse, Integer, Hash)>] UsersLikesDeleteResponse data, response status code and response headers
    def users_id_unlike_with_http_info(id, tweet_id, opts = {})
      @api_client.config.logger.debug "Calling API: TweetsApi.users_id_unlike ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling TweetsApi.users_id_unlike" if @api_client.config.client_side_validation && id.nil?
      # verify the required parameter 'tweet_id' is set
      raise ArgumentError, "Missing the required parameter 'tweet_id' when calling TweetsApi.users_id_unlike" if @api_client.config.client_side_validation && tweet_id.nil?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && tweet_id !~ pattern
        raise ArgumentError,
              "invalid value for 'tweet_id' when calling TweetsApi.users_id_unlike, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = "/2/users/{id}/likes/{tweet_id}".sub("{id}", CGI.escape(id.to_s)).sub(
        "{tweet_id}", CGI.escape(tweet_id.to_s)
      )

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "UsersLikesDeleteResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken UserToken]

      new_options = opts.merge(
        operation: :"TweetsApi.users_id_unlike",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      @api_client.config.logger.debug "API called: TweetsApi#users_id_unlike\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Causes the User (in the path) to unretweet the specified Tweet
    # Causes the User (in the path) to unretweet the specified Tweet. The User must match the User context authorizing the request
    # @param id [String] The ID of the authenticated source User that is requesting to retweet the Tweet.
    # @param source_tweet_id [String] The ID of the Tweet that the User is requesting to unretweet.
    # @param [Hash] opts the optional parameters
    # @return [UsersRetweetsDeleteResponse]
    def users_id_unretweets(id, source_tweet_id, opts = {})
      data, _status_code, _headers = users_id_unretweets_with_http_info(id, source_tweet_id, opts)
      data
    end

    # Causes the User (in the path) to unretweet the specified Tweet
    # Causes the User (in the path) to unretweet the specified Tweet. The User must match the User context authorizing the request
    # @param id [String] The ID of the authenticated source User that is requesting to retweet the Tweet.
    # @param source_tweet_id [String] The ID of the Tweet that the User is requesting to unretweet.
    # @param [Hash] opts the optional parameters
    # @return [Array<(UsersRetweetsDeleteResponse, Integer, Hash)>] UsersRetweetsDeleteResponse data, response status code and response headers
    def users_id_unretweets_with_http_info(id, source_tweet_id, opts = {})
      @api_client.config.logger.debug "Calling API: TweetsApi.users_id_unretweets ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling TweetsApi.users_id_unretweets" if @api_client.config.client_side_validation && id.nil?

      # verify the required parameter 'source_tweet_id' is set
      if @api_client.config.client_side_validation && source_tweet_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'source_tweet_id' when calling TweetsApi.users_id_unretweets"
      end

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && source_tweet_id !~ pattern
        raise ArgumentError,
              "invalid value for 'source_tweet_id' when calling TweetsApi.users_id_unretweets, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = "/2/users/{id}/retweets/{source_tweet_id}".sub("{id}", CGI.escape(id.to_s)).sub(
        "{source_tweet_id}", CGI.escape(source_tweet_id.to_s)
      )

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "UsersRetweetsDeleteResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken UserToken]

      new_options = opts.merge(
        operation: :"TweetsApi.users_id_unretweets",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      @api_client.config.logger.debug "API called: TweetsApi#users_id_unretweets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end
  end
end
