# frozen_string_literal: true

# #Twitter API v2
#
# Twitter API v2 available endpoints
#
# The version of the OpenAPI document: 2.62
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.5.0
#

require "cgi"

module Xbird
  class ComplianceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create compliance job
    # Creates a compliance for the given job type
    # @param create_compliance_job_request [CreateComplianceJobRequest]
    # @param [Hash] opts the optional parameters
    # @return [CreateComplianceJobResponse]
    def create_batch_compliance_job(create_compliance_job_request, opts = {})
      data, _status_code, _headers = create_batch_compliance_job_with_http_info(create_compliance_job_request, opts)
      data
    end

    # Create compliance job
    # Creates a compliance for the given job type
    # @param create_compliance_job_request [CreateComplianceJobRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateComplianceJobResponse, Integer, Hash)>] CreateComplianceJobResponse data, response status code and response headers
    def create_batch_compliance_job_with_http_info(create_compliance_job_request, opts = {})
      @api_client.config.logger.debug "Calling API: ComplianceApi.create_batch_compliance_job ..." if @api_client.config.debugging
      # verify the required parameter 'create_compliance_job_request' is set
      if @api_client.config.client_side_validation && create_compliance_job_request.nil?
        raise ArgumentError,
              "Missing the required parameter 'create_compliance_job_request' when calling ComplianceApi.create_batch_compliance_job"
      end

      # resource path
      local_var_path = "/2/compliance/jobs"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      header_params["Content-Type"] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_compliance_job_request)

      # return_type
      return_type = opts[:debug_return_type] || "CreateComplianceJobResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerToken"]

      new_options = opts.merge(
        operation: :"ComplianceApi.create_batch_compliance_job",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      @api_client.config.logger.debug "API called: ComplianceApi#create_batch_compliance_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Get Compliance Job
    # Returns a single Compliance Job by ID
    # @param id [String] The ID of the Compliance Job to retrieve.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :compliance_job_fields A comma separated list of ComplianceJob fields to display.
    # @return [Get2ComplianceJobsIdResponse]
    def get_batch_compliance_job(id, opts = {})
      data, _status_code, _headers = get_batch_compliance_job_with_http_info(id, opts)
      data
    end

    # Get Compliance Job
    # Returns a single Compliance Job by ID
    # @param id [String] The ID of the Compliance Job to retrieve.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :compliance_job_fields A comma separated list of ComplianceJob fields to display.
    # @return [Array<(Get2ComplianceJobsIdResponse, Integer, Hash)>] Get2ComplianceJobsIdResponse data, response status code and response headers
    def get_batch_compliance_job_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: ComplianceApi.get_batch_compliance_job ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling ComplianceApi.get_batch_compliance_job" if @api_client.config.client_side_validation && id.nil?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        raise ArgumentError,
              "invalid value for 'id' when calling ComplianceApi.get_batch_compliance_job, must conform to the pattern #{pattern}."
      end

      allowable_values = %w[created_at download_expires_at download_url id name resumable status
                            type upload_expires_at upload_url]
      if @api_client.config.client_side_validation && opts[:compliance_job_fields] && !opts[:compliance_job_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"compliance_job_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:compliance_job_fields].nil? && opts[:compliance_job_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"compliance_job_fields"]" when calling ComplianceApi.get_batch_compliance_job, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/compliance/jobs/{id}".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      unless opts[:compliance_job_fields].nil?
        query_params[:'compliance_job.fields'] =
          @api_client.build_collection_param(opts[:compliance_job_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2ComplianceJobsIdResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerToken"]

      new_options = opts.merge(
        operation: :"ComplianceApi.get_batch_compliance_job",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: ComplianceApi#get_batch_compliance_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Tweets Compliance stream
    # Streams 100% of compliance data for Tweets
    # @param partition [Integer] The partition number.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :backfill_minutes The number of minutes of backfill requested.
    # @option opts [Time] :start_time YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweet Compliance events will be provided.
    # @option opts [Time] :end_time YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweet Compliance events will be provided.
    # @return [TweetComplianceStreamResponse]
    def get_tweets_compliance_stream(partition, opts = {})
      data, _status_code, _headers = get_tweets_compliance_stream_with_http_info(partition, opts)
      data
    end

    # Tweets Compliance stream
    # Streams 100% of compliance data for Tweets
    # @param partition [Integer] The partition number.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :backfill_minutes The number of minutes of backfill requested.
    # @option opts [Time] :start_time YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweet Compliance events will be provided.
    # @option opts [Time] :end_time YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweet Compliance events will be provided.
    # @return [Array<(TweetComplianceStreamResponse, Integer, Hash)>] TweetComplianceStreamResponse data, response status code and response headers
    def get_tweets_compliance_stream_with_http_info(partition, opts = {})
      @api_client.config.logger.debug "Calling API: ComplianceApi.get_tweets_compliance_stream ..." if @api_client.config.debugging
      # verify the required parameter 'partition' is set
      if @api_client.config.client_side_validation && partition.nil?
        raise ArgumentError,
              "Missing the required parameter 'partition' when calling ComplianceApi.get_tweets_compliance_stream"
      end
      if @api_client.config.client_side_validation && partition > 4
        raise ArgumentError,
              'invalid value for "partition" when calling ComplianceApi.get_tweets_compliance_stream, must be smaller than or equal to 4.'
      end

      if @api_client.config.client_side_validation && partition < 1
        raise ArgumentError,
              'invalid value for "partition" when calling ComplianceApi.get_tweets_compliance_stream, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:backfill_minutes].nil? && opts[:backfill_minutes] > 5
        raise ArgumentError,
              'invalid value for "opts[:"backfill_minutes"]" when calling ComplianceApi.get_tweets_compliance_stream, must be smaller than or equal to 5.'
      end

      if @api_client.config.client_side_validation && !opts[:backfill_minutes].nil? && (opts[:backfill_minutes]).negative?
        raise ArgumentError,
              'invalid value for "opts[:"backfill_minutes"]" when calling ComplianceApi.get_tweets_compliance_stream, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/2/tweets/compliance/stream"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:partition] = partition
      query_params[:backfill_minutes] = opts[:backfill_minutes] unless opts[:backfill_minutes].nil?
      query_params[:start_time] = opts[:start_time] unless opts[:start_time].nil?
      query_params[:end_time] = opts[:end_time] unless opts[:end_time].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "TweetComplianceStreamResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerToken"]

      new_options = opts.merge(
        operation: :"ComplianceApi.get_tweets_compliance_stream",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: ComplianceApi#get_tweets_compliance_stream\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Tweets Label stream
    # Streams 100% of labeling events applied to Tweets
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :backfill_minutes The number of minutes of backfill requested.
    # @option opts [Time] :start_time YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweet labels will be provided.
    # @option opts [Time] :end_time YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp from which the Tweet labels will be provided.
    # @return [TweetLabelStreamResponse]
    def get_tweets_label_stream(opts = {})
      data, _status_code, _headers = get_tweets_label_stream_with_http_info(opts)
      data
    end

    # Tweets Label stream
    # Streams 100% of labeling events applied to Tweets
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :backfill_minutes The number of minutes of backfill requested.
    # @option opts [Time] :start_time YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweet labels will be provided.
    # @option opts [Time] :end_time YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp from which the Tweet labels will be provided.
    # @return [Array<(TweetLabelStreamResponse, Integer, Hash)>] TweetLabelStreamResponse data, response status code and response headers
    def get_tweets_label_stream_with_http_info(opts = {})
      @api_client.config.logger.debug "Calling API: ComplianceApi.get_tweets_label_stream ..." if @api_client.config.debugging
      if @api_client.config.client_side_validation && !opts[:backfill_minutes].nil? && opts[:backfill_minutes] > 5
        raise ArgumentError,
              'invalid value for "opts[:"backfill_minutes"]" when calling ComplianceApi.get_tweets_label_stream, must be smaller than or equal to 5.'
      end

      if @api_client.config.client_side_validation && !opts[:backfill_minutes].nil? && (opts[:backfill_minutes]).negative?
        raise ArgumentError,
              'invalid value for "opts[:"backfill_minutes"]" when calling ComplianceApi.get_tweets_label_stream, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/2/tweets/label/stream"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:backfill_minutes] = opts[:backfill_minutes] unless opts[:backfill_minutes].nil?
      query_params[:start_time] = opts[:start_time] unless opts[:start_time].nil?
      query_params[:end_time] = opts[:end_time] unless opts[:end_time].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "TweetLabelStreamResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerToken"]

      new_options = opts.merge(
        operation: :"ComplianceApi.get_tweets_label_stream",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: ComplianceApi#get_tweets_label_stream\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Users Compliance stream
    # Streams 100% of compliance data for Users
    # @param partition [Integer] The partition number.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :backfill_minutes The number of minutes of backfill requested.
    # @option opts [Time] :start_time YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the User Compliance events will be provided.
    # @option opts [Time] :end_time YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp from which the User Compliance events will be provided.
    # @return [UserComplianceStreamResponse]
    def get_users_compliance_stream(partition, opts = {})
      data, _status_code, _headers = get_users_compliance_stream_with_http_info(partition, opts)
      data
    end

    # Users Compliance stream
    # Streams 100% of compliance data for Users
    # @param partition [Integer] The partition number.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :backfill_minutes The number of minutes of backfill requested.
    # @option opts [Time] :start_time YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the User Compliance events will be provided.
    # @option opts [Time] :end_time YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp from which the User Compliance events will be provided.
    # @return [Array<(UserComplianceStreamResponse, Integer, Hash)>] UserComplianceStreamResponse data, response status code and response headers
    def get_users_compliance_stream_with_http_info(partition, opts = {})
      @api_client.config.logger.debug "Calling API: ComplianceApi.get_users_compliance_stream ..." if @api_client.config.debugging
      # verify the required parameter 'partition' is set
      if @api_client.config.client_side_validation && partition.nil?
        raise ArgumentError,
              "Missing the required parameter 'partition' when calling ComplianceApi.get_users_compliance_stream"
      end
      if @api_client.config.client_side_validation && partition > 4
        raise ArgumentError,
              'invalid value for "partition" when calling ComplianceApi.get_users_compliance_stream, must be smaller than or equal to 4.'
      end

      if @api_client.config.client_side_validation && partition < 1
        raise ArgumentError,
              'invalid value for "partition" when calling ComplianceApi.get_users_compliance_stream, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:backfill_minutes].nil? && opts[:backfill_minutes] > 5
        raise ArgumentError,
              'invalid value for "opts[:"backfill_minutes"]" when calling ComplianceApi.get_users_compliance_stream, must be smaller than or equal to 5.'
      end

      if @api_client.config.client_side_validation && !opts[:backfill_minutes].nil? && (opts[:backfill_minutes]).negative?
        raise ArgumentError,
              'invalid value for "opts[:"backfill_minutes"]" when calling ComplianceApi.get_users_compliance_stream, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/2/users/compliance/stream"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:partition] = partition
      query_params[:backfill_minutes] = opts[:backfill_minutes] unless opts[:backfill_minutes].nil?
      query_params[:start_time] = opts[:start_time] unless opts[:start_time].nil?
      query_params[:end_time] = opts[:end_time] unless opts[:end_time].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "UserComplianceStreamResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerToken"]

      new_options = opts.merge(
        operation: :"ComplianceApi.get_users_compliance_stream",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: ComplianceApi#get_users_compliance_stream\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # List Compliance Jobs
    # Returns recent Compliance Jobs for a given job type and optional job status
    # @param type [String] Type of Compliance Job to list.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Status of Compliance Job to list.
    # @option opts [Array<String>] :compliance_job_fields A comma separated list of ComplianceJob fields to display.
    # @return [Get2ComplianceJobsResponse]
    def list_batch_compliance_jobs(type, opts = {})
      data, _status_code, _headers = list_batch_compliance_jobs_with_http_info(type, opts)
      data
    end

    # List Compliance Jobs
    # Returns recent Compliance Jobs for a given job type and optional job status
    # @param type [String] Type of Compliance Job to list.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Status of Compliance Job to list.
    # @option opts [Array<String>] :compliance_job_fields A comma separated list of ComplianceJob fields to display.
    # @return [Array<(Get2ComplianceJobsResponse, Integer, Hash)>] Get2ComplianceJobsResponse data, response status code and response headers
    def list_batch_compliance_jobs_with_http_info(type, opts = {})
      @api_client.config.logger.debug "Calling API: ComplianceApi.list_batch_compliance_jobs ..." if @api_client.config.debugging
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        raise ArgumentError,
              "Missing the required parameter 'type' when calling ComplianceApi.list_batch_compliance_jobs"
      end

      # verify enum value
      allowable_values = %w[tweets users]
      raise ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}" if @api_client.config.client_side_validation && !allowable_values.include?(type)

      allowable_values = %w[created in_progress failed complete]
      raise ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}" if @api_client.config.client_side_validation && opts[:status] && !allowable_values.include?(opts[:status])

      allowable_values = %w[created_at download_expires_at download_url id name resumable status
                            type upload_expires_at upload_url]
      if @api_client.config.client_side_validation && opts[:compliance_job_fields] && !opts[:compliance_job_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"compliance_job_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:compliance_job_fields].nil? && opts[:compliance_job_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"compliance_job_fields"]" when calling ComplianceApi.list_batch_compliance_jobs, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/compliance/jobs"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:type] = type
      query_params[:status] = opts[:status] unless opts[:status].nil?
      unless opts[:compliance_job_fields].nil?
        query_params[:'compliance_job.fields'] =
          @api_client.build_collection_param(opts[:compliance_job_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2ComplianceJobsResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["BearerToken"]

      new_options = opts.merge(
        operation: :"ComplianceApi.list_batch_compliance_jobs",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: ComplianceApi#list_batch_compliance_jobs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end
  end
end
