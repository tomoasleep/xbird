# frozen_string_literal: true

# #Twitter API v2
#
# Twitter API v2 available endpoints
#
# The version of the OpenAPI document: 2.62
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.5.0
#

require "cgi"

module Xbird
  class ListsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get a User's List Memberships
    # Get a User's List Memberships.
    # @param id [String] The ID of the User to lookup.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results. (default to 100)
    # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
    # @option opts [Array<String>] :list_fields A comma separated list of List fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @return [Get2UsersIdListMembershipsResponse]
    def get_user_list_memberships(id, opts = {})
      data, _status_code, _headers = get_user_list_memberships_with_http_info(id, opts)
      data
    end

    # Get a User&#39;s List Memberships
    # Get a User&#39;s List Memberships.
    # @param id [String] The ID of the User to lookup.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results. (default to 100)
    # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
    # @option opts [Array<String>] :list_fields A comma separated list of List fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @return [Array<(Get2UsersIdListMembershipsResponse, Integer, Hash)>] Get2UsersIdListMembershipsResponse data, response status code and response headers
    def get_user_list_memberships_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: ListsApi.get_user_list_memberships ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling ListsApi.get_user_list_memberships" if @api_client.config.client_side_validation && id.nil?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        raise ArgumentError,
              "invalid value for 'id' when calling ListsApi.get_user_list_memberships, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] > 100
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling ListsApi.get_user_list_memberships, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] < 1
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling ListsApi.get_user_list_memberships, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.length > 19
        raise ArgumentError,
              'invalid value for "opts[:"pagination_token"]" when calling ListsApi.get_user_list_memberships, the character length must be smaller than or equal to 19.'
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.empty?
        raise ArgumentError,
              'invalid value for "opts[:"pagination_token"]" when calling ListsApi.get_user_list_memberships, the character length must be great than or equal to 1.'
      end

      allowable_values = %w[created_at description follower_count id member_count name owner_id
                            private]
      if @api_client.config.client_side_validation && opts[:list_fields] && !opts[:list_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"list_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:list_fields].nil? && opts[:list_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"list_fields"]" when calling ListsApi.get_user_list_memberships, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["owner_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling ListsApi.get_user_list_memberships, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling ListsApi.get_user_list_memberships, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/users/{id}/list_memberships".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:max_results] = opts[:max_results] unless opts[:max_results].nil?
      query_params[:pagination_token] = opts[:pagination_token] unless opts[:pagination_token].nil?
      unless opts[:list_fields].nil?
        query_params[:'list.fields'] =
          @api_client.build_collection_param(opts[:list_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2UsersIdListMembershipsResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken BearerToken UserToken]

      new_options = opts.merge(
        operation: :"ListsApi.get_user_list_memberships",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: ListsApi#get_user_list_memberships\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Add a List member
    # Causes a User to become a member of a List.
    # @param id [String] The ID of the List for which to add a member.
    # @param [Hash] opts the optional parameters
    # @option opts [ListAddUserRequest] :list_add_user_request
    # @return [ListMutateResponse]
    def list_add_member(id, opts = {})
      data, _status_code, _headers = list_add_member_with_http_info(id, opts)
      data
    end

    # Add a List member
    # Causes a User to become a member of a List.
    # @param id [String] The ID of the List for which to add a member.
    # @param [Hash] opts the optional parameters
    # @option opts [ListAddUserRequest] :list_add_user_request
    # @return [Array<(ListMutateResponse, Integer, Hash)>] ListMutateResponse data, response status code and response headers
    def list_add_member_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: ListsApi.list_add_member ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling ListsApi.list_add_member" if @api_client.config.client_side_validation && id.nil?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        raise ArgumentError,
              "invalid value for 'id' when calling ListsApi.list_add_member, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = "/2/lists/{id}/members".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      header_params["Content-Type"] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:list_add_user_request])

      # return_type
      return_type = opts[:debug_return_type] || "ListMutateResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken UserToken]

      new_options = opts.merge(
        operation: :"ListsApi.list_add_member",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      @api_client.config.logger.debug "API called: ListsApi#list_add_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Create List
    # Creates a new List.
    # @param [Hash] opts the optional parameters
    # @option opts [ListCreateRequest] :list_create_request
    # @return [ListCreateResponse]
    def list_id_create(opts = {})
      data, _status_code, _headers = list_id_create_with_http_info(opts)
      data
    end

    # Create List
    # Creates a new List.
    # @param [Hash] opts the optional parameters
    # @option opts [ListCreateRequest] :list_create_request
    # @return [Array<(ListCreateResponse, Integer, Hash)>] ListCreateResponse data, response status code and response headers
    def list_id_create_with_http_info(opts = {})
      @api_client.config.logger.debug "Calling API: ListsApi.list_id_create ..." if @api_client.config.debugging
      # resource path
      local_var_path = "/2/lists"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      header_params["Content-Type"] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:list_create_request])

      # return_type
      return_type = opts[:debug_return_type] || "ListCreateResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken UserToken]

      new_options = opts.merge(
        operation: :"ListsApi.list_id_create",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      @api_client.config.logger.debug "API called: ListsApi#list_id_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Delete List
    # Delete a List that you own.
    # @param id [String] The ID of the List to delete.
    # @param [Hash] opts the optional parameters
    # @return [ListDeleteResponse]
    def list_id_delete(id, opts = {})
      data, _status_code, _headers = list_id_delete_with_http_info(id, opts)
      data
    end

    # Delete List
    # Delete a List that you own.
    # @param id [String] The ID of the List to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListDeleteResponse, Integer, Hash)>] ListDeleteResponse data, response status code and response headers
    def list_id_delete_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: ListsApi.list_id_delete ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling ListsApi.list_id_delete" if @api_client.config.client_side_validation && id.nil?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        raise ArgumentError,
              "invalid value for 'id' when calling ListsApi.list_id_delete, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = "/2/lists/{id}".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "ListDeleteResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken UserToken]

      new_options = opts.merge(
        operation: :"ListsApi.list_id_delete",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      @api_client.config.logger.debug "API called: ListsApi#list_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # List lookup by List ID.
    # Returns a List.
    # @param id [String] The ID of the List.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :list_fields A comma separated list of List fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @return [Get2ListsIdResponse]
    def list_id_get(id, opts = {})
      data, _status_code, _headers = list_id_get_with_http_info(id, opts)
      data
    end

    # List lookup by List ID.
    # Returns a List.
    # @param id [String] The ID of the List.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :list_fields A comma separated list of List fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @return [Array<(Get2ListsIdResponse, Integer, Hash)>] Get2ListsIdResponse data, response status code and response headers
    def list_id_get_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: ListsApi.list_id_get ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling ListsApi.list_id_get" if @api_client.config.client_side_validation && id.nil?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        raise ArgumentError,
              "invalid value for 'id' when calling ListsApi.list_id_get, must conform to the pattern #{pattern}."
      end

      allowable_values = %w[created_at description follower_count id member_count name owner_id
                            private]
      if @api_client.config.client_side_validation && opts[:list_fields] && !opts[:list_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"list_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:list_fields].nil? && opts[:list_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"list_fields"]" when calling ListsApi.list_id_get, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["owner_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling ListsApi.list_id_get, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling ListsApi.list_id_get, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/lists/{id}".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      unless opts[:list_fields].nil?
        query_params[:'list.fields'] =
          @api_client.build_collection_param(opts[:list_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2ListsIdResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken BearerToken UserToken]

      new_options = opts.merge(
        operation: :"ListsApi.list_id_get",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: ListsApi#list_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Update List.
    # Update a List that you own.
    # @param id [String] The ID of the List to modify.
    # @param [Hash] opts the optional parameters
    # @option opts [ListUpdateRequest] :list_update_request
    # @return [ListUpdateResponse]
    def list_id_update(id, opts = {})
      data, _status_code, _headers = list_id_update_with_http_info(id, opts)
      data
    end

    # Update List.
    # Update a List that you own.
    # @param id [String] The ID of the List to modify.
    # @param [Hash] opts the optional parameters
    # @option opts [ListUpdateRequest] :list_update_request
    # @return [Array<(ListUpdateResponse, Integer, Hash)>] ListUpdateResponse data, response status code and response headers
    def list_id_update_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: ListsApi.list_id_update ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling ListsApi.list_id_update" if @api_client.config.client_side_validation && id.nil?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        raise ArgumentError,
              "invalid value for 'id' when calling ListsApi.list_id_update, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = "/2/lists/{id}".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      header_params["Content-Type"] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:list_update_request])

      # return_type
      return_type = opts[:debug_return_type] || "ListUpdateResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken UserToken]

      new_options = opts.merge(
        operation: :"ListsApi.list_id_update",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      @api_client.config.logger.debug "API called: ListsApi#list_id_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Remove a List member
    # Causes a User to be removed from the members of a List.
    # @param id [String] The ID of the List to remove a member.
    # @param user_id [String] The ID of User that will be removed from the List.
    # @param [Hash] opts the optional parameters
    # @return [ListMutateResponse]
    def list_remove_member(id, user_id, opts = {})
      data, _status_code, _headers = list_remove_member_with_http_info(id, user_id, opts)
      data
    end

    # Remove a List member
    # Causes a User to be removed from the members of a List.
    # @param id [String] The ID of the List to remove a member.
    # @param user_id [String] The ID of User that will be removed from the List.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListMutateResponse, Integer, Hash)>] ListMutateResponse data, response status code and response headers
    def list_remove_member_with_http_info(id, user_id, opts = {})
      @api_client.config.logger.debug "Calling API: ListsApi.list_remove_member ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling ListsApi.list_remove_member" if @api_client.config.client_side_validation && id.nil?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        raise ArgumentError,
              "invalid value for 'id' when calling ListsApi.list_remove_member, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'user_id' is set
      raise ArgumentError, "Missing the required parameter 'user_id' when calling ListsApi.list_remove_member" if @api_client.config.client_side_validation && user_id.nil?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && user_id !~ pattern
        raise ArgumentError,
              "invalid value for 'user_id' when calling ListsApi.list_remove_member, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = "/2/lists/{id}/members/{user_id}".sub("{id}", CGI.escape(id.to_s)).sub(
        "{user_id}", CGI.escape(user_id.to_s)
      )

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "ListMutateResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken UserToken]

      new_options = opts.merge(
        operation: :"ListsApi.list_remove_member",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      @api_client.config.logger.debug "API called: ListsApi#list_remove_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Follow a List
    # Causes a User to follow a List.
    # @param id [String] The ID of the authenticated source User that will follow the List.
    # @param [Hash] opts the optional parameters
    # @option opts [ListFollowedRequest] :list_followed_request
    # @return [ListFollowedResponse]
    def list_user_follow(id, opts = {})
      data, _status_code, _headers = list_user_follow_with_http_info(id, opts)
      data
    end

    # Follow a List
    # Causes a User to follow a List.
    # @param id [String] The ID of the authenticated source User that will follow the List.
    # @param [Hash] opts the optional parameters
    # @option opts [ListFollowedRequest] :list_followed_request
    # @return [Array<(ListFollowedResponse, Integer, Hash)>] ListFollowedResponse data, response status code and response headers
    def list_user_follow_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: ListsApi.list_user_follow ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling ListsApi.list_user_follow" if @api_client.config.client_side_validation && id.nil?

      # resource path
      local_var_path = "/2/users/{id}/followed_lists".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      header_params["Content-Type"] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:list_followed_request])

      # return_type
      return_type = opts[:debug_return_type] || "ListFollowedResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken UserToken]

      new_options = opts.merge(
        operation: :"ListsApi.list_user_follow",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      @api_client.config.logger.debug "API called: ListsApi#list_user_follow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Get a User's Owned Lists.
    # Get a User's Owned Lists.
    # @param id [String] The ID of the User to lookup.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results. (default to 100)
    # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
    # @option opts [Array<String>] :list_fields A comma separated list of List fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @return [Get2UsersIdOwnedListsResponse]
    def list_user_owned_lists(id, opts = {})
      data, _status_code, _headers = list_user_owned_lists_with_http_info(id, opts)
      data
    end

    # Get a User&#39;s Owned Lists.
    # Get a User&#39;s Owned Lists.
    # @param id [String] The ID of the User to lookup.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results. (default to 100)
    # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
    # @option opts [Array<String>] :list_fields A comma separated list of List fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @return [Array<(Get2UsersIdOwnedListsResponse, Integer, Hash)>] Get2UsersIdOwnedListsResponse data, response status code and response headers
    def list_user_owned_lists_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: ListsApi.list_user_owned_lists ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling ListsApi.list_user_owned_lists" if @api_client.config.client_side_validation && id.nil?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        raise ArgumentError,
              "invalid value for 'id' when calling ListsApi.list_user_owned_lists, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] > 100
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling ListsApi.list_user_owned_lists, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] < 1
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling ListsApi.list_user_owned_lists, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.length > 19
        raise ArgumentError,
              'invalid value for "opts[:"pagination_token"]" when calling ListsApi.list_user_owned_lists, the character length must be smaller than or equal to 19.'
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.empty?
        raise ArgumentError,
              'invalid value for "opts[:"pagination_token"]" when calling ListsApi.list_user_owned_lists, the character length must be great than or equal to 1.'
      end

      allowable_values = %w[created_at description follower_count id member_count name owner_id
                            private]
      if @api_client.config.client_side_validation && opts[:list_fields] && !opts[:list_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"list_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:list_fields].nil? && opts[:list_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"list_fields"]" when calling ListsApi.list_user_owned_lists, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["owner_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling ListsApi.list_user_owned_lists, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling ListsApi.list_user_owned_lists, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/users/{id}/owned_lists".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:max_results] = opts[:max_results] unless opts[:max_results].nil?
      query_params[:pagination_token] = opts[:pagination_token] unless opts[:pagination_token].nil?
      unless opts[:list_fields].nil?
        query_params[:'list.fields'] =
          @api_client.build_collection_param(opts[:list_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2UsersIdOwnedListsResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken BearerToken UserToken]

      new_options = opts.merge(
        operation: :"ListsApi.list_user_owned_lists",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: ListsApi#list_user_owned_lists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Pin a List
    # Causes a User to pin a List.
    # @param id [String] The ID of the authenticated source User that will pin the List.
    # @param list_pinned_request [ListPinnedRequest]
    # @param [Hash] opts the optional parameters
    # @return [ListPinnedResponse]
    def list_user_pin(id, list_pinned_request, opts = {})
      data, _status_code, _headers = list_user_pin_with_http_info(id, list_pinned_request, opts)
      data
    end

    # Pin a List
    # Causes a User to pin a List.
    # @param id [String] The ID of the authenticated source User that will pin the List.
    # @param list_pinned_request [ListPinnedRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListPinnedResponse, Integer, Hash)>] ListPinnedResponse data, response status code and response headers
    def list_user_pin_with_http_info(id, list_pinned_request, opts = {})
      @api_client.config.logger.debug "Calling API: ListsApi.list_user_pin ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling ListsApi.list_user_pin" if @api_client.config.client_side_validation && id.nil?
      # verify the required parameter 'list_pinned_request' is set
      raise ArgumentError, "Missing the required parameter 'list_pinned_request' when calling ListsApi.list_user_pin" if @api_client.config.client_side_validation && list_pinned_request.nil?

      # resource path
      local_var_path = "/2/users/{id}/pinned_lists".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      header_params["Content-Type"] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(list_pinned_request)

      # return_type
      return_type = opts[:debug_return_type] || "ListPinnedResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken UserToken]

      new_options = opts.merge(
        operation: :"ListsApi.list_user_pin",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      @api_client.config.logger.debug "API called: ListsApi#list_user_pin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Get a User's Pinned Lists
    # Get a User's Pinned Lists.
    # @param id [String] The ID of the authenticated source User for whom to return results.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :list_fields A comma separated list of List fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @return [Get2UsersIdPinnedListsResponse]
    def list_user_pinned_lists(id, opts = {})
      data, _status_code, _headers = list_user_pinned_lists_with_http_info(id, opts)
      data
    end

    # Get a User&#39;s Pinned Lists
    # Get a User&#39;s Pinned Lists.
    # @param id [String] The ID of the authenticated source User for whom to return results.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :list_fields A comma separated list of List fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @return [Array<(Get2UsersIdPinnedListsResponse, Integer, Hash)>] Get2UsersIdPinnedListsResponse data, response status code and response headers
    def list_user_pinned_lists_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: ListsApi.list_user_pinned_lists ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling ListsApi.list_user_pinned_lists" if @api_client.config.client_side_validation && id.nil?

      allowable_values = %w[created_at description follower_count id member_count name owner_id
                            private]
      if @api_client.config.client_side_validation && opts[:list_fields] && !opts[:list_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"list_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:list_fields].nil? && opts[:list_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"list_fields"]" when calling ListsApi.list_user_pinned_lists, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["owner_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling ListsApi.list_user_pinned_lists, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling ListsApi.list_user_pinned_lists, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/users/{id}/pinned_lists".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      unless opts[:list_fields].nil?
        query_params[:'list.fields'] =
          @api_client.build_collection_param(opts[:list_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2UsersIdPinnedListsResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken UserToken]

      new_options = opts.merge(
        operation: :"ListsApi.list_user_pinned_lists",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: ListsApi#list_user_pinned_lists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Unfollow a List
    # Causes a User to unfollow a List.
    # @param id [String] The ID of the authenticated source User that will unfollow the List.
    # @param list_id [String] The ID of the List to unfollow.
    # @param [Hash] opts the optional parameters
    # @return [ListFollowedResponse]
    def list_user_unfollow(id, list_id, opts = {})
      data, _status_code, _headers = list_user_unfollow_with_http_info(id, list_id, opts)
      data
    end

    # Unfollow a List
    # Causes a User to unfollow a List.
    # @param id [String] The ID of the authenticated source User that will unfollow the List.
    # @param list_id [String] The ID of the List to unfollow.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListFollowedResponse, Integer, Hash)>] ListFollowedResponse data, response status code and response headers
    def list_user_unfollow_with_http_info(id, list_id, opts = {})
      @api_client.config.logger.debug "Calling API: ListsApi.list_user_unfollow ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling ListsApi.list_user_unfollow" if @api_client.config.client_side_validation && id.nil?
      # verify the required parameter 'list_id' is set
      raise ArgumentError, "Missing the required parameter 'list_id' when calling ListsApi.list_user_unfollow" if @api_client.config.client_side_validation && list_id.nil?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && list_id !~ pattern
        raise ArgumentError,
              "invalid value for 'list_id' when calling ListsApi.list_user_unfollow, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = "/2/users/{id}/followed_lists/{list_id}".sub("{id}", CGI.escape(id.to_s)).sub(
        "{list_id}", CGI.escape(list_id.to_s)
      )

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "ListFollowedResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken UserToken]

      new_options = opts.merge(
        operation: :"ListsApi.list_user_unfollow",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      @api_client.config.logger.debug "API called: ListsApi#list_user_unfollow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Unpin a List
    # Causes a User to remove a pinned List.
    # @param id [String] The ID of the authenticated source User for whom to return results.
    # @param list_id [String] The ID of the List to unpin.
    # @param [Hash] opts the optional parameters
    # @return [ListUnpinResponse]
    def list_user_unpin(id, list_id, opts = {})
      data, _status_code, _headers = list_user_unpin_with_http_info(id, list_id, opts)
      data
    end

    # Unpin a List
    # Causes a User to remove a pinned List.
    # @param id [String] The ID of the authenticated source User for whom to return results.
    # @param list_id [String] The ID of the List to unpin.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListUnpinResponse, Integer, Hash)>] ListUnpinResponse data, response status code and response headers
    def list_user_unpin_with_http_info(id, list_id, opts = {})
      @api_client.config.logger.debug "Calling API: ListsApi.list_user_unpin ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling ListsApi.list_user_unpin" if @api_client.config.client_side_validation && id.nil?
      # verify the required parameter 'list_id' is set
      raise ArgumentError, "Missing the required parameter 'list_id' when calling ListsApi.list_user_unpin" if @api_client.config.client_side_validation && list_id.nil?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && list_id !~ pattern
        raise ArgumentError,
              "invalid value for 'list_id' when calling ListsApi.list_user_unpin, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = "/2/users/{id}/pinned_lists/{list_id}".sub("{id}", CGI.escape(id.to_s)).sub(
        "{list_id}", CGI.escape(list_id.to_s)
      )

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "ListUnpinResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken UserToken]

      new_options = opts.merge(
        operation: :"ListsApi.list_user_unpin",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      @api_client.config.logger.debug "API called: ListsApi#list_user_unpin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Get User's Followed Lists
    # Returns a User's followed Lists.
    # @param id [String] The ID of the User to lookup.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results. (default to 100)
    # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
    # @option opts [Array<String>] :list_fields A comma separated list of List fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @return [Get2UsersIdFollowedListsResponse]
    def user_followed_lists(id, opts = {})
      data, _status_code, _headers = user_followed_lists_with_http_info(id, opts)
      data
    end

    # Get User&#39;s Followed Lists
    # Returns a User&#39;s followed Lists.
    # @param id [String] The ID of the User to lookup.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results. (default to 100)
    # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
    # @option opts [Array<String>] :list_fields A comma separated list of List fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @return [Array<(Get2UsersIdFollowedListsResponse, Integer, Hash)>] Get2UsersIdFollowedListsResponse data, response status code and response headers
    def user_followed_lists_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: ListsApi.user_followed_lists ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling ListsApi.user_followed_lists" if @api_client.config.client_side_validation && id.nil?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        raise ArgumentError,
              "invalid value for 'id' when calling ListsApi.user_followed_lists, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] > 100
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling ListsApi.user_followed_lists, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] < 1
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling ListsApi.user_followed_lists, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.length > 19
        raise ArgumentError,
              'invalid value for "opts[:"pagination_token"]" when calling ListsApi.user_followed_lists, the character length must be smaller than or equal to 19.'
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.empty?
        raise ArgumentError,
              'invalid value for "opts[:"pagination_token"]" when calling ListsApi.user_followed_lists, the character length must be great than or equal to 1.'
      end

      allowable_values = %w[created_at description follower_count id member_count name owner_id
                            private]
      if @api_client.config.client_side_validation && opts[:list_fields] && !opts[:list_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"list_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:list_fields].nil? && opts[:list_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"list_fields"]" when calling ListsApi.user_followed_lists, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["owner_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling ListsApi.user_followed_lists, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling ListsApi.user_followed_lists, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/users/{id}/followed_lists".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:max_results] = opts[:max_results] unless opts[:max_results].nil?
      query_params[:pagination_token] = opts[:pagination_token] unless opts[:pagination_token].nil?
      unless opts[:list_fields].nil?
        query_params[:'list.fields'] =
          @api_client.build_collection_param(opts[:list_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2UsersIdFollowedListsResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken BearerToken UserToken]

      new_options = opts.merge(
        operation: :"ListsApi.user_followed_lists",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: ListsApi#user_followed_lists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end
  end
end
