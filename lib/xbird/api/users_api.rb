# frozen_string_literal: true

# #Twitter API v2
#
# Twitter API v2 available endpoints
#
# The version of the OpenAPI document: 2.62
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.5.0
#

require "cgi"

module Xbird
  class UsersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # User lookup me
    # This endpoint returns information about the requesting User.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Get2UsersMeResponse]
    def find_my_user(opts = {})
      data, _status_code, _headers = find_my_user_with_http_info(opts)
      data
    end

    # User lookup me
    # This endpoint returns information about the requesting User.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Array<(Get2UsersMeResponse, Integer, Hash)>] Get2UsersMeResponse data, response status code and response headers
    def find_my_user_with_http_info(opts = {})
      @api_client.config.logger.debug "Calling API: UsersApi.find_my_user ..." if @api_client.config.debugging
      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling UsersApi.find_my_user, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["pinned_tweet_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling UsersApi.find_my_user, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[attachments author_id context_annotations conversation_id created_at
                            edit_controls edit_history_tweet_ids entities geo id in_reply_to_user_id lang non_public_metrics organic_metrics possibly_sensitive promoted_metrics public_metrics referenced_tweets reply_settings source text withheld]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"tweet_fields"]" when calling UsersApi.find_my_user, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/users/me"

      # query parameters
      query_params = opts[:query_params] || {}
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:tweet_fields].nil?
        query_params[:'tweet.fields'] =
          @api_client.build_collection_param(opts[:tweet_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2UsersMeResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken UserToken]

      new_options = opts.merge(
        operation: :"UsersApi.find_my_user",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: UsersApi#find_my_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # User lookup by ID
    # This endpoint returns information about a User. Specify User by ID.
    # @param id [String] The ID of the User to lookup.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Get2UsersIdResponse]
    def find_user_by_id(id, opts = {})
      data, _status_code, _headers = find_user_by_id_with_http_info(id, opts)
      data
    end

    # User lookup by ID
    # This endpoint returns information about a User. Specify User by ID.
    # @param id [String] The ID of the User to lookup.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Array<(Get2UsersIdResponse, Integer, Hash)>] Get2UsersIdResponse data, response status code and response headers
    def find_user_by_id_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: UsersApi.find_user_by_id ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling UsersApi.find_user_by_id" if @api_client.config.client_side_validation && id.nil?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        raise ArgumentError,
              "invalid value for 'id' when calling UsersApi.find_user_by_id, must conform to the pattern #{pattern}."
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling UsersApi.find_user_by_id, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["pinned_tweet_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling UsersApi.find_user_by_id, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[attachments author_id context_annotations conversation_id created_at
                            edit_controls edit_history_tweet_ids entities geo id in_reply_to_user_id lang non_public_metrics organic_metrics possibly_sensitive promoted_metrics public_metrics referenced_tweets reply_settings source text withheld]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"tweet_fields"]" when calling UsersApi.find_user_by_id, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/users/{id}".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:tweet_fields].nil?
        query_params[:'tweet.fields'] =
          @api_client.build_collection_param(opts[:tweet_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2UsersIdResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken BearerToken UserToken]

      new_options = opts.merge(
        operation: :"UsersApi.find_user_by_id",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: UsersApi#find_user_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # User lookup by username
    # This endpoint returns information about a User. Specify User by username.
    # @param username [String] A username.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Get2UsersByUsernameUsernameResponse]
    def find_user_by_username(username, opts = {})
      data, _status_code, _headers = find_user_by_username_with_http_info(username, opts)
      data
    end

    # User lookup by username
    # This endpoint returns information about a User. Specify User by username.
    # @param username [String] A username.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Array<(Get2UsersByUsernameUsernameResponse, Integer, Hash)>] Get2UsersByUsernameUsernameResponse data, response status code and response headers
    def find_user_by_username_with_http_info(username, opts = {})
      @api_client.config.logger.debug "Calling API: UsersApi.find_user_by_username ..." if @api_client.config.debugging
      # verify the required parameter 'username' is set
      raise ArgumentError, "Missing the required parameter 'username' when calling UsersApi.find_user_by_username" if @api_client.config.client_side_validation && username.nil?

      pattern = Regexp.new(/^[A-Za-z0-9_]{1,15}$/)
      if @api_client.config.client_side_validation && username !~ pattern
        raise ArgumentError,
              "invalid value for 'username' when calling UsersApi.find_user_by_username, must conform to the pattern #{pattern}."
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling UsersApi.find_user_by_username, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["pinned_tweet_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling UsersApi.find_user_by_username, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[attachments author_id context_annotations conversation_id created_at
                            edit_controls edit_history_tweet_ids entities geo id in_reply_to_user_id lang non_public_metrics organic_metrics possibly_sensitive promoted_metrics public_metrics referenced_tweets reply_settings source text withheld]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"tweet_fields"]" when calling UsersApi.find_user_by_username, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/users/by/username/{username}".sub("{username}", CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:tweet_fields].nil?
        query_params[:'tweet.fields'] =
          @api_client.build_collection_param(opts[:tweet_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2UsersByUsernameUsernameResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken BearerToken UserToken]

      new_options = opts.merge(
        operation: :"UsersApi.find_user_by_username",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: UsersApi#find_user_by_username\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # User lookup by IDs
    # This endpoint returns information about Users. Specify Users by their ID.
    # @param ids [Array<String>] A list of User IDs, comma-separated. You can specify up to 100 IDs.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Get2UsersResponse]
    def find_users_by_id(ids, opts = {})
      data, _status_code, _headers = find_users_by_id_with_http_info(ids, opts)
      data
    end

    # User lookup by IDs
    # This endpoint returns information about Users. Specify Users by their ID.
    # @param ids [Array<String>] A list of User IDs, comma-separated. You can specify up to 100 IDs.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Array<(Get2UsersResponse, Integer, Hash)>] Get2UsersResponse data, response status code and response headers
    def find_users_by_id_with_http_info(ids, opts = {})
      @api_client.config.logger.debug "Calling API: UsersApi.find_users_by_id ..." if @api_client.config.debugging
      # verify the required parameter 'ids' is set
      raise ArgumentError, "Missing the required parameter 'ids' when calling UsersApi.find_users_by_id" if @api_client.config.client_side_validation && ids.nil?

      if @api_client.config.client_side_validation && ids.length > 100
        raise ArgumentError,
              'invalid value for "ids" when calling UsersApi.find_users_by_id, number of items must be less than or equal to 100.'
      end

      if @api_client.config.client_side_validation && ids.empty?
        raise ArgumentError,
              'invalid value for "ids" when calling UsersApi.find_users_by_id, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling UsersApi.find_users_by_id, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["pinned_tweet_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling UsersApi.find_users_by_id, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[attachments author_id context_annotations conversation_id created_at
                            edit_controls edit_history_tweet_ids entities geo id in_reply_to_user_id lang non_public_metrics organic_metrics possibly_sensitive promoted_metrics public_metrics referenced_tweets reply_settings source text withheld]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"tweet_fields"]" when calling UsersApi.find_users_by_id, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/users"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:ids] = @api_client.build_collection_param(ids, :csv)
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:tweet_fields].nil?
        query_params[:'tweet.fields'] =
          @api_client.build_collection_param(opts[:tweet_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2UsersResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken BearerToken UserToken]

      new_options = opts.merge(
        operation: :"UsersApi.find_users_by_id",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: UsersApi#find_users_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # User lookup by usernames
    # This endpoint returns information about Users. Specify Users by their username.
    # @param usernames [Array<String>] A list of usernames, comma-separated.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Get2UsersByResponse]
    def find_users_by_username(usernames, opts = {})
      data, _status_code, _headers = find_users_by_username_with_http_info(usernames, opts)
      data
    end

    # User lookup by usernames
    # This endpoint returns information about Users. Specify Users by their username.
    # @param usernames [Array<String>] A list of usernames, comma-separated.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Array<(Get2UsersByResponse, Integer, Hash)>] Get2UsersByResponse data, response status code and response headers
    def find_users_by_username_with_http_info(usernames, opts = {})
      @api_client.config.logger.debug "Calling API: UsersApi.find_users_by_username ..." if @api_client.config.debugging
      # verify the required parameter 'usernames' is set
      raise ArgumentError, "Missing the required parameter 'usernames' when calling UsersApi.find_users_by_username" if @api_client.config.client_side_validation && usernames.nil?

      if @api_client.config.client_side_validation && usernames.length > 100
        raise ArgumentError,
              'invalid value for "usernames" when calling UsersApi.find_users_by_username, number of items must be less than or equal to 100.'
      end

      if @api_client.config.client_side_validation && usernames.empty?
        raise ArgumentError,
              'invalid value for "usernames" when calling UsersApi.find_users_by_username, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling UsersApi.find_users_by_username, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["pinned_tweet_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling UsersApi.find_users_by_username, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[attachments author_id context_annotations conversation_id created_at
                            edit_controls edit_history_tweet_ids entities geo id in_reply_to_user_id lang non_public_metrics organic_metrics possibly_sensitive promoted_metrics public_metrics referenced_tweets reply_settings source text withheld]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"tweet_fields"]" when calling UsersApi.find_users_by_username, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/users/by"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:usernames] = @api_client.build_collection_param(usernames, :csv)
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:tweet_fields].nil?
        query_params[:'tweet.fields'] =
          @api_client.build_collection_param(opts[:tweet_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2UsersByResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken BearerToken UserToken]

      new_options = opts.merge(
        operation: :"UsersApi.find_users_by_username",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: UsersApi#find_users_by_username\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Returns User objects that follow a List by the provided List ID
    # Returns a list of Users that follow a List by the provided List ID
    # @param id [String] The ID of the List.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results. (default to 100)
    # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Get2ListsIdFollowersResponse]
    def list_get_followers(id, opts = {})
      data, _status_code, _headers = list_get_followers_with_http_info(id, opts)
      data
    end

    # Returns User objects that follow a List by the provided List ID
    # Returns a list of Users that follow a List by the provided List ID
    # @param id [String] The ID of the List.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results. (default to 100)
    # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Array<(Get2ListsIdFollowersResponse, Integer, Hash)>] Get2ListsIdFollowersResponse data, response status code and response headers
    def list_get_followers_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: UsersApi.list_get_followers ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling UsersApi.list_get_followers" if @api_client.config.client_side_validation && id.nil?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        raise ArgumentError,
              "invalid value for 'id' when calling UsersApi.list_get_followers, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] > 100
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling UsersApi.list_get_followers, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] < 1
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling UsersApi.list_get_followers, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.length > 19
        raise ArgumentError,
              'invalid value for "opts[:"pagination_token"]" when calling UsersApi.list_get_followers, the character length must be smaller than or equal to 19.'
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.empty?
        raise ArgumentError,
              'invalid value for "opts[:"pagination_token"]" when calling UsersApi.list_get_followers, the character length must be great than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling UsersApi.list_get_followers, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["pinned_tweet_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling UsersApi.list_get_followers, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[attachments author_id context_annotations conversation_id created_at
                            edit_controls edit_history_tweet_ids entities geo id in_reply_to_user_id lang non_public_metrics organic_metrics possibly_sensitive promoted_metrics public_metrics referenced_tweets reply_settings source text withheld]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"tweet_fields"]" when calling UsersApi.list_get_followers, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/lists/{id}/followers".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:max_results] = opts[:max_results] unless opts[:max_results].nil?
      query_params[:pagination_token] = opts[:pagination_token] unless opts[:pagination_token].nil?
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:tweet_fields].nil?
        query_params[:'tweet.fields'] =
          @api_client.build_collection_param(opts[:tweet_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2ListsIdFollowersResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken BearerToken UserToken]

      new_options = opts.merge(
        operation: :"UsersApi.list_get_followers",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: UsersApi#list_get_followers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Returns User objects that are members of a List by the provided List ID.
    # Returns a list of Users that are members of a List by the provided List ID.
    # @param id [String] The ID of the List.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results. (default to 100)
    # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Get2ListsIdMembersResponse]
    def list_get_members(id, opts = {})
      data, _status_code, _headers = list_get_members_with_http_info(id, opts)
      data
    end

    # Returns User objects that are members of a List by the provided List ID.
    # Returns a list of Users that are members of a List by the provided List ID.
    # @param id [String] The ID of the List.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results. (default to 100)
    # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Array<(Get2ListsIdMembersResponse, Integer, Hash)>] Get2ListsIdMembersResponse data, response status code and response headers
    def list_get_members_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: UsersApi.list_get_members ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling UsersApi.list_get_members" if @api_client.config.client_side_validation && id.nil?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        raise ArgumentError,
              "invalid value for 'id' when calling UsersApi.list_get_members, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] > 100
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling UsersApi.list_get_members, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] < 1
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling UsersApi.list_get_members, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.length > 19
        raise ArgumentError,
              'invalid value for "opts[:"pagination_token"]" when calling UsersApi.list_get_members, the character length must be smaller than or equal to 19.'
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.empty?
        raise ArgumentError,
              'invalid value for "opts[:"pagination_token"]" when calling UsersApi.list_get_members, the character length must be great than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling UsersApi.list_get_members, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["pinned_tweet_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling UsersApi.list_get_members, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[attachments author_id context_annotations conversation_id created_at
                            edit_controls edit_history_tweet_ids entities geo id in_reply_to_user_id lang non_public_metrics organic_metrics possibly_sensitive promoted_metrics public_metrics referenced_tweets reply_settings source text withheld]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"tweet_fields"]" when calling UsersApi.list_get_members, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/lists/{id}/members".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:max_results] = opts[:max_results] unless opts[:max_results].nil?
      query_params[:pagination_token] = opts[:pagination_token] unless opts[:pagination_token].nil?
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:tweet_fields].nil?
        query_params[:'tweet.fields'] =
          @api_client.build_collection_param(opts[:tweet_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2ListsIdMembersResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken BearerToken UserToken]

      new_options = opts.merge(
        operation: :"UsersApi.list_get_members",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: UsersApi#list_get_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Returns User objects that have liked the provided Tweet ID
    # Returns a list of Users that have liked the provided Tweet ID
    # @param id [String] A single Tweet ID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results. (default to 100)
    # @option opts [String] :pagination_token This parameter is used to get the next &#39;page&#39; of results.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Get2TweetsIdLikingUsersResponse]
    def tweets_id_liking_users(id, opts = {})
      data, _status_code, _headers = tweets_id_liking_users_with_http_info(id, opts)
      data
    end

    # Returns User objects that have liked the provided Tweet ID
    # Returns a list of Users that have liked the provided Tweet ID
    # @param id [String] A single Tweet ID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results. (default to 100)
    # @option opts [String] :pagination_token This parameter is used to get the next &#39;page&#39; of results.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Array<(Get2TweetsIdLikingUsersResponse, Integer, Hash)>] Get2TweetsIdLikingUsersResponse data, response status code and response headers
    def tweets_id_liking_users_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: UsersApi.tweets_id_liking_users ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling UsersApi.tweets_id_liking_users" if @api_client.config.client_side_validation && id.nil?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        raise ArgumentError,
              "invalid value for 'id' when calling UsersApi.tweets_id_liking_users, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] > 100
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling UsersApi.tweets_id_liking_users, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] < 1
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling UsersApi.tweets_id_liking_users, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.empty?
        raise ArgumentError,
              'invalid value for "opts[:"pagination_token"]" when calling UsersApi.tweets_id_liking_users, the character length must be great than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling UsersApi.tweets_id_liking_users, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["pinned_tweet_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling UsersApi.tweets_id_liking_users, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[attachments author_id context_annotations conversation_id created_at
                            edit_controls edit_history_tweet_ids entities geo id in_reply_to_user_id lang non_public_metrics organic_metrics possibly_sensitive promoted_metrics public_metrics referenced_tweets reply_settings source text withheld]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"tweet_fields"]" when calling UsersApi.tweets_id_liking_users, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/tweets/{id}/liking_users".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:max_results] = opts[:max_results] unless opts[:max_results].nil?
      query_params[:pagination_token] = opts[:pagination_token] unless opts[:pagination_token].nil?
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:tweet_fields].nil?
        query_params[:'tweet.fields'] =
          @api_client.build_collection_param(opts[:tweet_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2TweetsIdLikingUsersResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken BearerToken UserToken]

      new_options = opts.merge(
        operation: :"UsersApi.tweets_id_liking_users",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: UsersApi#tweets_id_liking_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Returns User objects that have retweeted the provided Tweet ID
    # Returns a list of Users that have retweeted the provided Tweet ID
    # @param id [String] A single Tweet ID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results. (default to 100)
    # @option opts [String] :pagination_token This parameter is used to get the next &#39;page&#39; of results.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Get2TweetsIdRetweetedByResponse]
    def tweets_id_retweeting_users(id, opts = {})
      data, _status_code, _headers = tweets_id_retweeting_users_with_http_info(id, opts)
      data
    end

    # Returns User objects that have retweeted the provided Tweet ID
    # Returns a list of Users that have retweeted the provided Tweet ID
    # @param id [String] A single Tweet ID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results. (default to 100)
    # @option opts [String] :pagination_token This parameter is used to get the next &#39;page&#39; of results.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Array<(Get2TweetsIdRetweetedByResponse, Integer, Hash)>] Get2TweetsIdRetweetedByResponse data, response status code and response headers
    def tweets_id_retweeting_users_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: UsersApi.tweets_id_retweeting_users ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling UsersApi.tweets_id_retweeting_users" if @api_client.config.client_side_validation && id.nil?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        raise ArgumentError,
              "invalid value for 'id' when calling UsersApi.tweets_id_retweeting_users, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] > 100
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling UsersApi.tweets_id_retweeting_users, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] < 1
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling UsersApi.tweets_id_retweeting_users, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.empty?
        raise ArgumentError,
              'invalid value for "opts[:"pagination_token"]" when calling UsersApi.tweets_id_retweeting_users, the character length must be great than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling UsersApi.tweets_id_retweeting_users, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["pinned_tweet_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling UsersApi.tweets_id_retweeting_users, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[attachments author_id context_annotations conversation_id created_at
                            edit_controls edit_history_tweet_ids entities geo id in_reply_to_user_id lang non_public_metrics organic_metrics possibly_sensitive promoted_metrics public_metrics referenced_tweets reply_settings source text withheld]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"tweet_fields"]" when calling UsersApi.tweets_id_retweeting_users, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/tweets/{id}/retweeted_by".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:max_results] = opts[:max_results] unless opts[:max_results].nil?
      query_params[:pagination_token] = opts[:pagination_token] unless opts[:pagination_token].nil?
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:tweet_fields].nil?
        query_params[:'tweet.fields'] =
          @api_client.build_collection_param(opts[:tweet_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2TweetsIdRetweetedByResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken BearerToken UserToken]

      new_options = opts.merge(
        operation: :"UsersApi.tweets_id_retweeting_users",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: UsersApi#tweets_id_retweeting_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Block User by User ID
    # Causes the User (in the path) to block the target User. The User (in the path) must match the User context authorizing the request
    # @param id [String] The ID of the authenticated source User that is requesting to block the target User.
    # @param block_user_request [BlockUserRequest]
    # @param [Hash] opts the optional parameters
    # @return [BlockUserMutationResponse]
    def users_id_block(id, block_user_request, opts = {})
      data, _status_code, _headers = users_id_block_with_http_info(id, block_user_request, opts)
      data
    end

    # Block User by User ID
    # Causes the User (in the path) to block the target User. The User (in the path) must match the User context authorizing the request
    # @param id [String] The ID of the authenticated source User that is requesting to block the target User.
    # @param block_user_request [BlockUserRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(BlockUserMutationResponse, Integer, Hash)>] BlockUserMutationResponse data, response status code and response headers
    def users_id_block_with_http_info(id, block_user_request, opts = {})
      @api_client.config.logger.debug "Calling API: UsersApi.users_id_block ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling UsersApi.users_id_block" if @api_client.config.client_side_validation && id.nil?
      # verify the required parameter 'block_user_request' is set
      raise ArgumentError, "Missing the required parameter 'block_user_request' when calling UsersApi.users_id_block" if @api_client.config.client_side_validation && block_user_request.nil?

      # resource path
      local_var_path = "/2/users/{id}/blocking".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      header_params["Content-Type"] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(block_user_request)

      # return_type
      return_type = opts[:debug_return_type] || "BlockUserMutationResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken UserToken]

      new_options = opts.merge(
        operation: :"UsersApi.users_id_block",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      @api_client.config.logger.debug "API called: UsersApi#users_id_block\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Returns User objects that are blocked by provided User ID
    # Returns a list of Users that are blocked by the provided User ID
    # @param id [String] The ID of the authenticated source User for whom to return results.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results.
    # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Get2UsersIdBlockingResponse]
    def users_id_blocking(id, opts = {})
      data, _status_code, _headers = users_id_blocking_with_http_info(id, opts)
      data
    end

    # Returns User objects that are blocked by provided User ID
    # Returns a list of Users that are blocked by the provided User ID
    # @param id [String] The ID of the authenticated source User for whom to return results.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results.
    # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Array<(Get2UsersIdBlockingResponse, Integer, Hash)>] Get2UsersIdBlockingResponse data, response status code and response headers
    def users_id_blocking_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: UsersApi.users_id_blocking ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling UsersApi.users_id_blocking" if @api_client.config.client_side_validation && id.nil?

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] > 1000
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling UsersApi.users_id_blocking, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] < 1
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling UsersApi.users_id_blocking, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.length < 16
        raise ArgumentError,
              'invalid value for "opts[:"pagination_token"]" when calling UsersApi.users_id_blocking, the character length must be great than or equal to 16.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling UsersApi.users_id_blocking, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["pinned_tweet_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling UsersApi.users_id_blocking, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[attachments author_id context_annotations conversation_id created_at
                            edit_controls edit_history_tweet_ids entities geo id in_reply_to_user_id lang non_public_metrics organic_metrics possibly_sensitive promoted_metrics public_metrics referenced_tweets reply_settings source text withheld]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"tweet_fields"]" when calling UsersApi.users_id_blocking, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/users/{id}/blocking".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:max_results] = opts[:max_results] unless opts[:max_results].nil?
      query_params[:pagination_token] = opts[:pagination_token] unless opts[:pagination_token].nil?
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:tweet_fields].nil?
        query_params[:'tweet.fields'] =
          @api_client.build_collection_param(opts[:tweet_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2UsersIdBlockingResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken UserToken]

      new_options = opts.merge(
        operation: :"UsersApi.users_id_blocking",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: UsersApi#users_id_blocking\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Follow User
    # Causes the User(in the path) to follow, or “request to follow” for protected Users, the target User. The User(in the path) must match the User context authorizing the request
    # @param id [String] The ID of the authenticated source User that is requesting to follow the target User.
    # @param [Hash] opts the optional parameters
    # @option opts [UsersFollowingCreateRequest] :users_following_create_request
    # @return [UsersFollowingCreateResponse]
    def users_id_follow(id, opts = {})
      data, _status_code, _headers = users_id_follow_with_http_info(id, opts)
      data
    end

    # Follow User
    # Causes the User(in the path) to follow, or “request to follow” for protected Users, the target User. The User(in the path) must match the User context authorizing the request
    # @param id [String] The ID of the authenticated source User that is requesting to follow the target User.
    # @param [Hash] opts the optional parameters
    # @option opts [UsersFollowingCreateRequest] :users_following_create_request
    # @return [Array<(UsersFollowingCreateResponse, Integer, Hash)>] UsersFollowingCreateResponse data, response status code and response headers
    def users_id_follow_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: UsersApi.users_id_follow ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling UsersApi.users_id_follow" if @api_client.config.client_side_validation && id.nil?

      # resource path
      local_var_path = "/2/users/{id}/following".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      header_params["Content-Type"] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:users_following_create_request])

      # return_type
      return_type = opts[:debug_return_type] || "UsersFollowingCreateResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken UserToken]

      new_options = opts.merge(
        operation: :"UsersApi.users_id_follow",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      @api_client.config.logger.debug "API called: UsersApi#users_id_follow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Followers by User ID
    # Returns a list of Users who are followers of the specified User ID.
    # @param id [String] The ID of the User to lookup.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results.
    # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Get2UsersIdFollowersResponse]
    def users_id_followers(id, opts = {})
      data, _status_code, _headers = users_id_followers_with_http_info(id, opts)
      data
    end

    # Followers by User ID
    # Returns a list of Users who are followers of the specified User ID.
    # @param id [String] The ID of the User to lookup.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results.
    # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Array<(Get2UsersIdFollowersResponse, Integer, Hash)>] Get2UsersIdFollowersResponse data, response status code and response headers
    def users_id_followers_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: UsersApi.users_id_followers ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling UsersApi.users_id_followers" if @api_client.config.client_side_validation && id.nil?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        raise ArgumentError,
              "invalid value for 'id' when calling UsersApi.users_id_followers, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] > 1000
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling UsersApi.users_id_followers, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] < 1
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling UsersApi.users_id_followers, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.length < 16
        raise ArgumentError,
              'invalid value for "opts[:"pagination_token"]" when calling UsersApi.users_id_followers, the character length must be great than or equal to 16.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling UsersApi.users_id_followers, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["pinned_tweet_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling UsersApi.users_id_followers, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[attachments author_id context_annotations conversation_id created_at
                            edit_controls edit_history_tweet_ids entities geo id in_reply_to_user_id lang non_public_metrics organic_metrics possibly_sensitive promoted_metrics public_metrics referenced_tweets reply_settings source text withheld]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"tweet_fields"]" when calling UsersApi.users_id_followers, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/users/{id}/followers".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:max_results] = opts[:max_results] unless opts[:max_results].nil?
      query_params[:pagination_token] = opts[:pagination_token] unless opts[:pagination_token].nil?
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:tweet_fields].nil?
        query_params[:'tweet.fields'] =
          @api_client.build_collection_param(opts[:tweet_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2UsersIdFollowersResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken BearerToken UserToken]

      new_options = opts.merge(
        operation: :"UsersApi.users_id_followers",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: UsersApi#users_id_followers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Following by User ID
    # Returns a list of Users that are being followed by the provided User ID
    # @param id [String] The ID of the User to lookup.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results.
    # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Get2UsersIdFollowingResponse]
    def users_id_following(id, opts = {})
      data, _status_code, _headers = users_id_following_with_http_info(id, opts)
      data
    end

    # Following by User ID
    # Returns a list of Users that are being followed by the provided User ID
    # @param id [String] The ID of the User to lookup.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results.
    # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Array<(Get2UsersIdFollowingResponse, Integer, Hash)>] Get2UsersIdFollowingResponse data, response status code and response headers
    def users_id_following_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: UsersApi.users_id_following ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling UsersApi.users_id_following" if @api_client.config.client_side_validation && id.nil?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        raise ArgumentError,
              "invalid value for 'id' when calling UsersApi.users_id_following, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] > 1000
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling UsersApi.users_id_following, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] < 1
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling UsersApi.users_id_following, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.length < 16
        raise ArgumentError,
              'invalid value for "opts[:"pagination_token"]" when calling UsersApi.users_id_following, the character length must be great than or equal to 16.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling UsersApi.users_id_following, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["pinned_tweet_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling UsersApi.users_id_following, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[attachments author_id context_annotations conversation_id created_at
                            edit_controls edit_history_tweet_ids entities geo id in_reply_to_user_id lang non_public_metrics organic_metrics possibly_sensitive promoted_metrics public_metrics referenced_tweets reply_settings source text withheld]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"tweet_fields"]" when calling UsersApi.users_id_following, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/users/{id}/following".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:max_results] = opts[:max_results] unless opts[:max_results].nil?
      query_params[:pagination_token] = opts[:pagination_token] unless opts[:pagination_token].nil?
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:tweet_fields].nil?
        query_params[:'tweet.fields'] =
          @api_client.build_collection_param(opts[:tweet_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2UsersIdFollowingResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken BearerToken UserToken]

      new_options = opts.merge(
        operation: :"UsersApi.users_id_following",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: UsersApi#users_id_following\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Mute User by User ID.
    # Causes the User (in the path) to mute the target User. The User (in the path) must match the User context authorizing the request.
    # @param id [String] The ID of the authenticated source User that is requesting to mute the target User.
    # @param [Hash] opts the optional parameters
    # @option opts [MuteUserRequest] :mute_user_request
    # @return [MuteUserMutationResponse]
    def users_id_mute(id, opts = {})
      data, _status_code, _headers = users_id_mute_with_http_info(id, opts)
      data
    end

    # Mute User by User ID.
    # Causes the User (in the path) to mute the target User. The User (in the path) must match the User context authorizing the request.
    # @param id [String] The ID of the authenticated source User that is requesting to mute the target User.
    # @param [Hash] opts the optional parameters
    # @option opts [MuteUserRequest] :mute_user_request
    # @return [Array<(MuteUserMutationResponse, Integer, Hash)>] MuteUserMutationResponse data, response status code and response headers
    def users_id_mute_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: UsersApi.users_id_mute ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling UsersApi.users_id_mute" if @api_client.config.client_side_validation && id.nil?

      # resource path
      local_var_path = "/2/users/{id}/muting".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      header_params["Content-Type"] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:mute_user_request])

      # return_type
      return_type = opts[:debug_return_type] || "MuteUserMutationResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken UserToken]

      new_options = opts.merge(
        operation: :"UsersApi.users_id_mute",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      @api_client.config.logger.debug "API called: UsersApi#users_id_mute\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Returns User objects that are muted by the provided User ID
    # Returns a list of Users that are muted by the provided User ID
    # @param id [String] The ID of the authenticated source User for whom to return results.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results. (default to 100)
    # @option opts [String] :pagination_token This parameter is used to get the next &#39;page&#39; of results.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Get2UsersIdMutingResponse]
    def users_id_muting(id, opts = {})
      data, _status_code, _headers = users_id_muting_with_http_info(id, opts)
      data
    end

    # Returns User objects that are muted by the provided User ID
    # Returns a list of Users that are muted by the provided User ID
    # @param id [String] The ID of the authenticated source User for whom to return results.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results. (default to 100)
    # @option opts [String] :pagination_token This parameter is used to get the next &#39;page&#39; of results.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Array<(Get2UsersIdMutingResponse, Integer, Hash)>] Get2UsersIdMutingResponse data, response status code and response headers
    def users_id_muting_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: UsersApi.users_id_muting ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling UsersApi.users_id_muting" if @api_client.config.client_side_validation && id.nil?

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] > 1000
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling UsersApi.users_id_muting, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] < 1
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling UsersApi.users_id_muting, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.length > 19
        raise ArgumentError,
              'invalid value for "opts[:"pagination_token"]" when calling UsersApi.users_id_muting, the character length must be smaller than or equal to 19.'
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.empty?
        raise ArgumentError,
              'invalid value for "opts[:"pagination_token"]" when calling UsersApi.users_id_muting, the character length must be great than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling UsersApi.users_id_muting, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["pinned_tweet_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling UsersApi.users_id_muting, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[attachments author_id context_annotations conversation_id created_at
                            edit_controls edit_history_tweet_ids entities geo id in_reply_to_user_id lang non_public_metrics organic_metrics possibly_sensitive promoted_metrics public_metrics referenced_tweets reply_settings source text withheld]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"tweet_fields"]" when calling UsersApi.users_id_muting, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/users/{id}/muting".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:max_results] = opts[:max_results] unless opts[:max_results].nil?
      query_params[:pagination_token] = opts[:pagination_token] unless opts[:pagination_token].nil?
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:tweet_fields].nil?
        query_params[:'tweet.fields'] =
          @api_client.build_collection_param(opts[:tweet_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2UsersIdMutingResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken UserToken]

      new_options = opts.merge(
        operation: :"UsersApi.users_id_muting",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: UsersApi#users_id_muting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Unblock User by User ID
    # Causes the source User to unblock the target User. The source User must match the User context authorizing the request
    # @param source_user_id [String] The ID of the authenticated source User that is requesting to unblock the target User.
    # @param target_user_id [String] The ID of the User that the source User is requesting to unblock.
    # @param [Hash] opts the optional parameters
    # @return [BlockUserMutationResponse]
    def users_id_unblock(source_user_id, target_user_id, opts = {})
      data, _status_code, _headers = users_id_unblock_with_http_info(source_user_id, target_user_id, opts)
      data
    end

    # Unblock User by User ID
    # Causes the source User to unblock the target User. The source User must match the User context authorizing the request
    # @param source_user_id [String] The ID of the authenticated source User that is requesting to unblock the target User.
    # @param target_user_id [String] The ID of the User that the source User is requesting to unblock.
    # @param [Hash] opts the optional parameters
    # @return [Array<(BlockUserMutationResponse, Integer, Hash)>] BlockUserMutationResponse data, response status code and response headers
    def users_id_unblock_with_http_info(source_user_id, target_user_id, opts = {})
      @api_client.config.logger.debug "Calling API: UsersApi.users_id_unblock ..." if @api_client.config.debugging
      # verify the required parameter 'source_user_id' is set
      raise ArgumentError, "Missing the required parameter 'source_user_id' when calling UsersApi.users_id_unblock" if @api_client.config.client_side_validation && source_user_id.nil?
      # verify the required parameter 'target_user_id' is set
      raise ArgumentError, "Missing the required parameter 'target_user_id' when calling UsersApi.users_id_unblock" if @api_client.config.client_side_validation && target_user_id.nil?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && target_user_id !~ pattern
        raise ArgumentError,
              "invalid value for 'target_user_id' when calling UsersApi.users_id_unblock, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = "/2/users/{source_user_id}/blocking/{target_user_id}".sub("{source_user_id}", CGI.escape(source_user_id.to_s)).sub(
        "{target_user_id}", CGI.escape(target_user_id.to_s)
      )

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "BlockUserMutationResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken UserToken]

      new_options = opts.merge(
        operation: :"UsersApi.users_id_unblock",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      @api_client.config.logger.debug "API called: UsersApi#users_id_unblock\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Unfollow User
    # Causes the source User to unfollow the target User. The source User must match the User context authorizing the request
    # @param source_user_id [String] The ID of the authenticated source User that is requesting to unfollow the target User.
    # @param target_user_id [String] The ID of the User that the source User is requesting to unfollow.
    # @param [Hash] opts the optional parameters
    # @return [UsersFollowingDeleteResponse]
    def users_id_unfollow(source_user_id, target_user_id, opts = {})
      data, _status_code, _headers = users_id_unfollow_with_http_info(source_user_id, target_user_id, opts)
      data
    end

    # Unfollow User
    # Causes the source User to unfollow the target User. The source User must match the User context authorizing the request
    # @param source_user_id [String] The ID of the authenticated source User that is requesting to unfollow the target User.
    # @param target_user_id [String] The ID of the User that the source User is requesting to unfollow.
    # @param [Hash] opts the optional parameters
    # @return [Array<(UsersFollowingDeleteResponse, Integer, Hash)>] UsersFollowingDeleteResponse data, response status code and response headers
    def users_id_unfollow_with_http_info(source_user_id, target_user_id, opts = {})
      @api_client.config.logger.debug "Calling API: UsersApi.users_id_unfollow ..." if @api_client.config.debugging
      # verify the required parameter 'source_user_id' is set
      raise ArgumentError, "Missing the required parameter 'source_user_id' when calling UsersApi.users_id_unfollow" if @api_client.config.client_side_validation && source_user_id.nil?
      # verify the required parameter 'target_user_id' is set
      raise ArgumentError, "Missing the required parameter 'target_user_id' when calling UsersApi.users_id_unfollow" if @api_client.config.client_side_validation && target_user_id.nil?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && target_user_id !~ pattern
        raise ArgumentError,
              "invalid value for 'target_user_id' when calling UsersApi.users_id_unfollow, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = "/2/users/{source_user_id}/following/{target_user_id}".sub("{source_user_id}", CGI.escape(source_user_id.to_s)).sub(
        "{target_user_id}", CGI.escape(target_user_id.to_s)
      )

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "UsersFollowingDeleteResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken UserToken]

      new_options = opts.merge(
        operation: :"UsersApi.users_id_unfollow",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      @api_client.config.logger.debug "API called: UsersApi#users_id_unfollow\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Unmute User by User ID
    # Causes the source User to unmute the target User. The source User must match the User context authorizing the request
    # @param source_user_id [String] The ID of the authenticated source User that is requesting to unmute the target User.
    # @param target_user_id [String] The ID of the User that the source User is requesting to unmute.
    # @param [Hash] opts the optional parameters
    # @return [MuteUserMutationResponse]
    def users_id_unmute(source_user_id, target_user_id, opts = {})
      data, _status_code, _headers = users_id_unmute_with_http_info(source_user_id, target_user_id, opts)
      data
    end

    # Unmute User by User ID
    # Causes the source User to unmute the target User. The source User must match the User context authorizing the request
    # @param source_user_id [String] The ID of the authenticated source User that is requesting to unmute the target User.
    # @param target_user_id [String] The ID of the User that the source User is requesting to unmute.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MuteUserMutationResponse, Integer, Hash)>] MuteUserMutationResponse data, response status code and response headers
    def users_id_unmute_with_http_info(source_user_id, target_user_id, opts = {})
      @api_client.config.logger.debug "Calling API: UsersApi.users_id_unmute ..." if @api_client.config.debugging
      # verify the required parameter 'source_user_id' is set
      raise ArgumentError, "Missing the required parameter 'source_user_id' when calling UsersApi.users_id_unmute" if @api_client.config.client_side_validation && source_user_id.nil?
      # verify the required parameter 'target_user_id' is set
      raise ArgumentError, "Missing the required parameter 'target_user_id' when calling UsersApi.users_id_unmute" if @api_client.config.client_side_validation && target_user_id.nil?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && target_user_id !~ pattern
        raise ArgumentError,
              "invalid value for 'target_user_id' when calling UsersApi.users_id_unmute, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = "/2/users/{source_user_id}/muting/{target_user_id}".sub("{source_user_id}", CGI.escape(source_user_id.to_s)).sub(
        "{target_user_id}", CGI.escape(target_user_id.to_s)
      )

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "MuteUserMutationResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken UserToken]

      new_options = opts.merge(
        operation: :"UsersApi.users_id_unmute",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      @api_client.config.logger.debug "API called: UsersApi#users_id_unmute\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end
  end
end
