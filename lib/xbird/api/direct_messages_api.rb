# frozen_string_literal: true

# #Twitter API v2
#
# Twitter API v2 available endpoints
#
# The version of the OpenAPI document: 2.62
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.5.0
#

require "cgi"

module Xbird
  class DirectMessagesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Send a new message to a DM Conversation
    # Creates a new message for a DM Conversation specified by DM Conversation ID
    # @param dm_conversation_id [String] The DM Conversation ID.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateMessageRequest] :create_message_request
    # @return [CreateDmEventResponse]
    def dm_conversation_by_id_event_id_create(dm_conversation_id, opts = {})
      data, _status_code, _headers = dm_conversation_by_id_event_id_create_with_http_info(dm_conversation_id, opts)
      data
    end

    # Send a new message to a DM Conversation
    # Creates a new message for a DM Conversation specified by DM Conversation ID
    # @param dm_conversation_id [String] The DM Conversation ID.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateMessageRequest] :create_message_request
    # @return [Array<(CreateDmEventResponse, Integer, Hash)>] CreateDmEventResponse data, response status code and response headers
    def dm_conversation_by_id_event_id_create_with_http_info(dm_conversation_id, opts = {})
      @api_client.config.logger.debug "Calling API: DirectMessagesApi.dm_conversation_by_id_event_id_create ..." if @api_client.config.debugging
      # verify the required parameter 'dm_conversation_id' is set
      if @api_client.config.client_side_validation && dm_conversation_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'dm_conversation_id' when calling DirectMessagesApi.dm_conversation_by_id_event_id_create"
      end

      # resource path
      local_var_path = "/2/dm_conversations/{dm_conversation_id}/messages".sub("{dm_conversation_id}",
                                                                               CGI.escape(dm_conversation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      header_params["Content-Type"] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:create_message_request])

      # return_type
      return_type = opts[:debug_return_type] || "CreateDmEventResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken UserToken]

      new_options = opts.merge(
        operation: :"DirectMessagesApi.dm_conversation_by_id_event_id_create",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      @api_client.config.logger.debug "API called: DirectMessagesApi#dm_conversation_by_id_event_id_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Create a new DM Conversation
    # Creates a new DM Conversation.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateDmConversationRequest] :create_dm_conversation_request
    # @return [CreateDmEventResponse]
    def dm_conversation_id_create(opts = {})
      data, _status_code, _headers = dm_conversation_id_create_with_http_info(opts)
      data
    end

    # Create a new DM Conversation
    # Creates a new DM Conversation.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateDmConversationRequest] :create_dm_conversation_request
    # @return [Array<(CreateDmEventResponse, Integer, Hash)>] CreateDmEventResponse data, response status code and response headers
    def dm_conversation_id_create_with_http_info(opts = {})
      @api_client.config.logger.debug "Calling API: DirectMessagesApi.dm_conversation_id_create ..." if @api_client.config.debugging
      # resource path
      local_var_path = "/2/dm_conversations"

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      header_params["Content-Type"] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:create_dm_conversation_request])

      # return_type
      return_type = opts[:debug_return_type] || "CreateDmEventResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken UserToken]

      new_options = opts.merge(
        operation: :"DirectMessagesApi.dm_conversation_id_create",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      @api_client.config.logger.debug "API called: DirectMessagesApi#dm_conversation_id_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Send a new message to a user
    # Creates a new message for a DM Conversation with a participant user by ID
    # @param participant_id [String] The ID of the recipient user that will receive the DM.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateMessageRequest] :create_message_request
    # @return [CreateDmEventResponse]
    def dm_conversation_with_user_event_id_create(participant_id, opts = {})
      data, _status_code, _headers = dm_conversation_with_user_event_id_create_with_http_info(participant_id, opts)
      data
    end

    # Send a new message to a user
    # Creates a new message for a DM Conversation with a participant user by ID
    # @param participant_id [String] The ID of the recipient user that will receive the DM.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateMessageRequest] :create_message_request
    # @return [Array<(CreateDmEventResponse, Integer, Hash)>] CreateDmEventResponse data, response status code and response headers
    def dm_conversation_with_user_event_id_create_with_http_info(participant_id, opts = {})
      @api_client.config.logger.debug "Calling API: DirectMessagesApi.dm_conversation_with_user_event_id_create ..." if @api_client.config.debugging
      # verify the required parameter 'participant_id' is set
      if @api_client.config.client_side_validation && participant_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'participant_id' when calling DirectMessagesApi.dm_conversation_with_user_event_id_create"
      end

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && participant_id !~ pattern
        raise ArgumentError,
              "invalid value for 'participant_id' when calling DirectMessagesApi.dm_conversation_with_user_event_id_create, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = "/2/dm_conversations/with/{participant_id}/messages".sub("{participant_id}",
                                                                                CGI.escape(participant_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(["application/json"])
      header_params["Content-Type"] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:create_message_request])

      # return_type
      return_type = opts[:debug_return_type] || "CreateDmEventResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken UserToken]

      new_options = opts.merge(
        operation: :"DirectMessagesApi.dm_conversation_with_user_event_id_create",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      @api_client.config.logger.debug "API called: DirectMessagesApi#dm_conversation_with_user_event_id_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Get DM Events for a DM Conversation
    # Returns DM Events for a DM Conversation
    # @param id [String] The DM Conversation ID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results. (default to 100)
    # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
    # @option opts [Array<String>] :event_types The set of event_types to include in the results.
    # @option opts [Array<String>] :dm_event_fields A comma separated list of DmEvent fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Get2DmConversationsIdDmEventsResponse]
    def get_dm_conversations_id_dm_events(id, opts = {})
      data, _status_code, _headers = get_dm_conversations_id_dm_events_with_http_info(id, opts)
      data
    end

    # Get DM Events for a DM Conversation
    # Returns DM Events for a DM Conversation
    # @param id [String] The DM Conversation ID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results. (default to 100)
    # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
    # @option opts [Array<String>] :event_types The set of event_types to include in the results.
    # @option opts [Array<String>] :dm_event_fields A comma separated list of DmEvent fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Array<(Get2DmConversationsIdDmEventsResponse, Integer, Hash)>] Get2DmConversationsIdDmEventsResponse data, response status code and response headers
    def get_dm_conversations_id_dm_events_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: DirectMessagesApi.get_dm_conversations_id_dm_events ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError,
              "Missing the required parameter 'id' when calling DirectMessagesApi.get_dm_conversations_id_dm_events"
      end

      pattern = Regexp.new(/^([0-9]{1,19}-[0-9]{1,19}|[0-9]{15,19})$/)
      if @api_client.config.client_side_validation && id !~ pattern
        raise ArgumentError,
              "invalid value for 'id' when calling DirectMessagesApi.get_dm_conversations_id_dm_events, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] > 100
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling DirectMessagesApi.get_dm_conversations_id_dm_events, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] < 1
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling DirectMessagesApi.get_dm_conversations_id_dm_events, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.length < 16
        raise ArgumentError,
              'invalid value for "opts[:"pagination_token"]" when calling DirectMessagesApi.get_dm_conversations_id_dm_events, the character length must be great than or equal to 16.'
      end

      allowable_values = %w[MessageCreate ParticipantsJoin ParticipantsLeave]
      if @api_client.config.client_side_validation && opts[:event_types] && !opts[:event_types].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"event_types\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:event_types].nil? && opts[:event_types].empty?
        raise ArgumentError,
              'invalid value for "opts[:"event_types"]" when calling DirectMessagesApi.get_dm_conversations_id_dm_events, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[attachments created_at dm_conversation_id event_type id participant_ids
                            referenced_tweets sender_id text]
      if @api_client.config.client_side_validation && opts[:dm_event_fields] && !opts[:dm_event_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"dm_event_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:dm_event_fields].nil? && opts[:dm_event_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"dm_event_fields"]" when calling DirectMessagesApi.get_dm_conversations_id_dm_events, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["attachments.media_keys", "participant_ids", "referenced_tweets.id", "sender_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling DirectMessagesApi.get_dm_conversations_id_dm_events, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[alt_text duration_ms height media_key non_public_metrics organic_metrics
                            preview_image_url promoted_metrics public_metrics type url variants width]
      if @api_client.config.client_side_validation && opts[:media_fields] && !opts[:media_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"media_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:media_fields].nil? && opts[:media_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"media_fields"]" when calling DirectMessagesApi.get_dm_conversations_id_dm_events, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling DirectMessagesApi.get_dm_conversations_id_dm_events, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[attachments author_id context_annotations conversation_id created_at
                            edit_controls edit_history_tweet_ids entities geo id in_reply_to_user_id lang non_public_metrics organic_metrics possibly_sensitive promoted_metrics public_metrics referenced_tweets reply_settings source text withheld]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"tweet_fields"]" when calling DirectMessagesApi.get_dm_conversations_id_dm_events, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/dm_conversations/{id}/dm_events".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:max_results] = opts[:max_results] unless opts[:max_results].nil?
      query_params[:pagination_token] = opts[:pagination_token] unless opts[:pagination_token].nil?
      unless opts[:event_types].nil?
        query_params[:event_types] =
          @api_client.build_collection_param(opts[:event_types], :csv)
      end
      unless opts[:dm_event_fields].nil?
        query_params[:'dm_event.fields'] =
          @api_client.build_collection_param(opts[:dm_event_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:media_fields].nil?
        query_params[:'media.fields'] =
          @api_client.build_collection_param(opts[:media_fields], :csv)
      end
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:tweet_fields].nil?
        query_params[:'tweet.fields'] =
          @api_client.build_collection_param(opts[:tweet_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2DmConversationsIdDmEventsResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken UserToken]

      new_options = opts.merge(
        operation: :"DirectMessagesApi.get_dm_conversations_id_dm_events",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: DirectMessagesApi#get_dm_conversations_id_dm_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Get DM Events for a DM Conversation
    # Returns DM Events for a DM Conversation
    # @param participant_id [String] The ID of the participant user for the One to One DM conversation.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results. (default to 100)
    # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
    # @option opts [Array<String>] :event_types The set of event_types to include in the results.
    # @option opts [Array<String>] :dm_event_fields A comma separated list of DmEvent fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Get2DmConversationsWithParticipantIdDmEventsResponse]
    def get_dm_conversations_with_participant_id_dm_events(participant_id, opts = {})
      data, _status_code, _headers = get_dm_conversations_with_participant_id_dm_events_with_http_info(participant_id,
                                                                                                       opts)
      data
    end

    # Get DM Events for a DM Conversation
    # Returns DM Events for a DM Conversation
    # @param participant_id [String] The ID of the participant user for the One to One DM conversation.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results. (default to 100)
    # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
    # @option opts [Array<String>] :event_types The set of event_types to include in the results.
    # @option opts [Array<String>] :dm_event_fields A comma separated list of DmEvent fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Array<(Get2DmConversationsWithParticipantIdDmEventsResponse, Integer, Hash)>] Get2DmConversationsWithParticipantIdDmEventsResponse data, response status code and response headers
    def get_dm_conversations_with_participant_id_dm_events_with_http_info(participant_id, opts = {})
      @api_client.config.logger.debug "Calling API: DirectMessagesApi.get_dm_conversations_with_participant_id_dm_events ..." if @api_client.config.debugging
      # verify the required parameter 'participant_id' is set
      if @api_client.config.client_side_validation && participant_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'participant_id' when calling DirectMessagesApi.get_dm_conversations_with_participant_id_dm_events"
      end

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      if @api_client.config.client_side_validation && participant_id !~ pattern
        raise ArgumentError,
              "invalid value for 'participant_id' when calling DirectMessagesApi.get_dm_conversations_with_participant_id_dm_events, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] > 100
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling DirectMessagesApi.get_dm_conversations_with_participant_id_dm_events, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] < 1
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling DirectMessagesApi.get_dm_conversations_with_participant_id_dm_events, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.length < 16
        raise ArgumentError,
              'invalid value for "opts[:"pagination_token"]" when calling DirectMessagesApi.get_dm_conversations_with_participant_id_dm_events, the character length must be great than or equal to 16.'
      end

      allowable_values = %w[MessageCreate ParticipantsJoin ParticipantsLeave]
      if @api_client.config.client_side_validation && opts[:event_types] && !opts[:event_types].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"event_types\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:event_types].nil? && opts[:event_types].empty?
        raise ArgumentError,
              'invalid value for "opts[:"event_types"]" when calling DirectMessagesApi.get_dm_conversations_with_participant_id_dm_events, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[attachments created_at dm_conversation_id event_type id participant_ids
                            referenced_tweets sender_id text]
      if @api_client.config.client_side_validation && opts[:dm_event_fields] && !opts[:dm_event_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"dm_event_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:dm_event_fields].nil? && opts[:dm_event_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"dm_event_fields"]" when calling DirectMessagesApi.get_dm_conversations_with_participant_id_dm_events, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["attachments.media_keys", "participant_ids", "referenced_tweets.id", "sender_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling DirectMessagesApi.get_dm_conversations_with_participant_id_dm_events, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[alt_text duration_ms height media_key non_public_metrics organic_metrics
                            preview_image_url promoted_metrics public_metrics type url variants width]
      if @api_client.config.client_side_validation && opts[:media_fields] && !opts[:media_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"media_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:media_fields].nil? && opts[:media_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"media_fields"]" when calling DirectMessagesApi.get_dm_conversations_with_participant_id_dm_events, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling DirectMessagesApi.get_dm_conversations_with_participant_id_dm_events, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[attachments author_id context_annotations conversation_id created_at
                            edit_controls edit_history_tweet_ids entities geo id in_reply_to_user_id lang non_public_metrics organic_metrics possibly_sensitive promoted_metrics public_metrics referenced_tweets reply_settings source text withheld]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"tweet_fields"]" when calling DirectMessagesApi.get_dm_conversations_with_participant_id_dm_events, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/dm_conversations/with/{participant_id}/dm_events".sub("{participant_id}",
                                                                                 CGI.escape(participant_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:max_results] = opts[:max_results] unless opts[:max_results].nil?
      query_params[:pagination_token] = opts[:pagination_token] unless opts[:pagination_token].nil?
      unless opts[:event_types].nil?
        query_params[:event_types] =
          @api_client.build_collection_param(opts[:event_types], :csv)
      end
      unless opts[:dm_event_fields].nil?
        query_params[:'dm_event.fields'] =
          @api_client.build_collection_param(opts[:dm_event_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:media_fields].nil?
        query_params[:'media.fields'] =
          @api_client.build_collection_param(opts[:media_fields], :csv)
      end
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:tweet_fields].nil?
        query_params[:'tweet.fields'] =
          @api_client.build_collection_param(opts[:tweet_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2DmConversationsWithParticipantIdDmEventsResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken UserToken]

      new_options = opts.merge(
        operation: :"DirectMessagesApi.get_dm_conversations_with_participant_id_dm_events",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: DirectMessagesApi#get_dm_conversations_with_participant_id_dm_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Get recent DM Events
    # Returns recent DM Events across DM conversations
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results. (default to 100)
    # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
    # @option opts [Array<String>] :event_types The set of event_types to include in the results.
    # @option opts [Array<String>] :dm_event_fields A comma separated list of DmEvent fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Get2DmEventsResponse]
    def get_dm_events(opts = {})
      data, _status_code, _headers = get_dm_events_with_http_info(opts)
      data
    end

    # Get recent DM Events
    # Returns recent DM Events across DM conversations
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The maximum number of results. (default to 100)
    # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
    # @option opts [Array<String>] :event_types The set of event_types to include in the results.
    # @option opts [Array<String>] :dm_event_fields A comma separated list of DmEvent fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Array<(Get2DmEventsResponse, Integer, Hash)>] Get2DmEventsResponse data, response status code and response headers
    def get_dm_events_with_http_info(opts = {})
      @api_client.config.logger.debug "Calling API: DirectMessagesApi.get_dm_events ..." if @api_client.config.debugging
      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] > 100
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling DirectMessagesApi.get_dm_events, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] < 1
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling DirectMessagesApi.get_dm_events, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.length < 16
        raise ArgumentError,
              'invalid value for "opts[:"pagination_token"]" when calling DirectMessagesApi.get_dm_events, the character length must be great than or equal to 16.'
      end

      allowable_values = %w[MessageCreate ParticipantsJoin ParticipantsLeave]
      if @api_client.config.client_side_validation && opts[:event_types] && !opts[:event_types].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"event_types\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:event_types].nil? && opts[:event_types].empty?
        raise ArgumentError,
              'invalid value for "opts[:"event_types"]" when calling DirectMessagesApi.get_dm_events, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[attachments created_at dm_conversation_id event_type id participant_ids
                            referenced_tweets sender_id text]
      if @api_client.config.client_side_validation && opts[:dm_event_fields] && !opts[:dm_event_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"dm_event_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:dm_event_fields].nil? && opts[:dm_event_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"dm_event_fields"]" when calling DirectMessagesApi.get_dm_events, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["attachments.media_keys", "participant_ids", "referenced_tweets.id", "sender_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling DirectMessagesApi.get_dm_events, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[alt_text duration_ms height media_key non_public_metrics organic_metrics
                            preview_image_url promoted_metrics public_metrics type url variants width]
      if @api_client.config.client_side_validation && opts[:media_fields] && !opts[:media_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"media_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:media_fields].nil? && opts[:media_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"media_fields"]" when calling DirectMessagesApi.get_dm_events, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling DirectMessagesApi.get_dm_events, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[attachments author_id context_annotations conversation_id created_at
                            edit_controls edit_history_tweet_ids entities geo id in_reply_to_user_id lang non_public_metrics organic_metrics possibly_sensitive promoted_metrics public_metrics referenced_tweets reply_settings source text withheld]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"tweet_fields"]" when calling DirectMessagesApi.get_dm_events, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/dm_events"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:max_results] = opts[:max_results] unless opts[:max_results].nil?
      query_params[:pagination_token] = opts[:pagination_token] unless opts[:pagination_token].nil?
      unless opts[:event_types].nil?
        query_params[:event_types] =
          @api_client.build_collection_param(opts[:event_types], :csv)
      end
      unless opts[:dm_event_fields].nil?
        query_params[:'dm_event.fields'] =
          @api_client.build_collection_param(opts[:dm_event_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:media_fields].nil?
        query_params[:'media.fields'] =
          @api_client.build_collection_param(opts[:media_fields], :csv)
      end
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:tweet_fields].nil?
        query_params[:'tweet.fields'] =
          @api_client.build_collection_param(opts[:tweet_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2DmEventsResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken UserToken]

      new_options = opts.merge(
        operation: :"DirectMessagesApi.get_dm_events",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: DirectMessagesApi#get_dm_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end
  end
end
