# frozen_string_literal: true

# #Twitter API v2
#
# Twitter API v2 available endpoints
#
# The version of the OpenAPI document: 2.62
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.5.0
#

require "cgi"

module Xbird
  class SpacesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Space lookup by Space ID
    # Returns a variety of information about the Space specified by the requested ID
    # @param id [String] The ID of the Space to be retrieved.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :space_fields A comma separated list of Space fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :topic_fields A comma separated list of Topic fields to display.
    # @return [Get2SpacesIdResponse]
    def find_space_by_id(id, opts = {})
      data, _status_code, _headers = find_space_by_id_with_http_info(id, opts)
      data
    end

    # Space lookup by Space ID
    # Returns a variety of information about the Space specified by the requested ID
    # @param id [String] The ID of the Space to be retrieved.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :space_fields A comma separated list of Space fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :topic_fields A comma separated list of Topic fields to display.
    # @return [Array<(Get2SpacesIdResponse, Integer, Hash)>] Get2SpacesIdResponse data, response status code and response headers
    def find_space_by_id_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: SpacesApi.find_space_by_id ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling SpacesApi.find_space_by_id" if @api_client.config.client_side_validation && id.nil?

      pattern = Regexp.new(/^[a-zA-Z0-9]{1,13}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        raise ArgumentError,
              "invalid value for 'id' when calling SpacesApi.find_space_by_id, must conform to the pattern #{pattern}."
      end

      allowable_values = %w[created_at creator_id ended_at host_ids id invited_user_ids is_ticketed
                            lang participant_count scheduled_start speaker_ids started_at state subscriber_count title topic_ids updated_at]
      if @api_client.config.client_side_validation && opts[:space_fields] && !opts[:space_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"space_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:space_fields].nil? && opts[:space_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"space_fields"]" when calling SpacesApi.find_space_by_id, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[creator_id host_ids invited_user_ids speaker_ids topic_ids]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling SpacesApi.find_space_by_id, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling SpacesApi.find_space_by_id, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[description id name]
      if @api_client.config.client_side_validation && opts[:topic_fields] && !opts[:topic_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"topic_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:topic_fields].nil? && opts[:topic_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"topic_fields"]" when calling SpacesApi.find_space_by_id, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/spaces/{id}".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      unless opts[:space_fields].nil?
        query_params[:'space.fields'] =
          @api_client.build_collection_param(opts[:space_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:topic_fields].nil?
        query_params[:'topic.fields'] =
          @api_client.build_collection_param(opts[:topic_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2SpacesIdResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken BearerToken]

      new_options = opts.merge(
        operation: :"SpacesApi.find_space_by_id",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: SpacesApi#find_space_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Space lookup by their creators
    # Returns a variety of information about the Spaces created by the provided User IDs
    # @param user_ids [Array<String>] The IDs of Users to search through.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :space_fields A comma separated list of Space fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :topic_fields A comma separated list of Topic fields to display.
    # @return [Get2SpacesByCreatorIdsResponse]
    def find_spaces_by_creator_ids(user_ids, opts = {})
      data, _status_code, _headers = find_spaces_by_creator_ids_with_http_info(user_ids, opts)
      data
    end

    # Space lookup by their creators
    # Returns a variety of information about the Spaces created by the provided User IDs
    # @param user_ids [Array<String>] The IDs of Users to search through.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :space_fields A comma separated list of Space fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :topic_fields A comma separated list of Topic fields to display.
    # @return [Array<(Get2SpacesByCreatorIdsResponse, Integer, Hash)>] Get2SpacesByCreatorIdsResponse data, response status code and response headers
    def find_spaces_by_creator_ids_with_http_info(user_ids, opts = {})
      @api_client.config.logger.debug "Calling API: SpacesApi.find_spaces_by_creator_ids ..." if @api_client.config.debugging
      # verify the required parameter 'user_ids' is set
      if @api_client.config.client_side_validation && user_ids.nil?
        raise ArgumentError,
              "Missing the required parameter 'user_ids' when calling SpacesApi.find_spaces_by_creator_ids"
      end
      if @api_client.config.client_side_validation && user_ids.length > 100
        raise ArgumentError,
              'invalid value for "user_ids" when calling SpacesApi.find_spaces_by_creator_ids, number of items must be less than or equal to 100.'
      end

      if @api_client.config.client_side_validation && user_ids.empty?
        raise ArgumentError,
              'invalid value for "user_ids" when calling SpacesApi.find_spaces_by_creator_ids, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at creator_id ended_at host_ids id invited_user_ids is_ticketed
                            lang participant_count scheduled_start speaker_ids started_at state subscriber_count title topic_ids updated_at]
      if @api_client.config.client_side_validation && opts[:space_fields] && !opts[:space_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"space_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:space_fields].nil? && opts[:space_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"space_fields"]" when calling SpacesApi.find_spaces_by_creator_ids, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[creator_id host_ids invited_user_ids speaker_ids topic_ids]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling SpacesApi.find_spaces_by_creator_ids, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling SpacesApi.find_spaces_by_creator_ids, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[description id name]
      if @api_client.config.client_side_validation && opts[:topic_fields] && !opts[:topic_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"topic_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:topic_fields].nil? && opts[:topic_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"topic_fields"]" when calling SpacesApi.find_spaces_by_creator_ids, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/spaces/by/creator_ids"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:user_ids] = @api_client.build_collection_param(user_ids, :multi)
      unless opts[:space_fields].nil?
        query_params[:'space.fields'] =
          @api_client.build_collection_param(opts[:space_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:topic_fields].nil?
        query_params[:'topic.fields'] =
          @api_client.build_collection_param(opts[:topic_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2SpacesByCreatorIdsResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken BearerToken]

      new_options = opts.merge(
        operation: :"SpacesApi.find_spaces_by_creator_ids",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: SpacesApi#find_spaces_by_creator_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Space lookup up Space IDs
    # Returns a variety of information about the Spaces specified by the requested IDs
    # @param ids [Array<String>] The list of Space IDs to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :space_fields A comma separated list of Space fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :topic_fields A comma separated list of Topic fields to display.
    # @return [Get2SpacesResponse]
    def find_spaces_by_ids(ids, opts = {})
      data, _status_code, _headers = find_spaces_by_ids_with_http_info(ids, opts)
      data
    end

    # Space lookup up Space IDs
    # Returns a variety of information about the Spaces specified by the requested IDs
    # @param ids [Array<String>] The list of Space IDs to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :space_fields A comma separated list of Space fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :topic_fields A comma separated list of Topic fields to display.
    # @return [Array<(Get2SpacesResponse, Integer, Hash)>] Get2SpacesResponse data, response status code and response headers
    def find_spaces_by_ids_with_http_info(ids, opts = {})
      @api_client.config.logger.debug "Calling API: SpacesApi.find_spaces_by_ids ..." if @api_client.config.debugging
      # verify the required parameter 'ids' is set
      raise ArgumentError, "Missing the required parameter 'ids' when calling SpacesApi.find_spaces_by_ids" if @api_client.config.client_side_validation && ids.nil?

      if @api_client.config.client_side_validation && ids.length > 100
        raise ArgumentError,
              'invalid value for "ids" when calling SpacesApi.find_spaces_by_ids, number of items must be less than or equal to 100.'
      end

      if @api_client.config.client_side_validation && ids.empty?
        raise ArgumentError,
              'invalid value for "ids" when calling SpacesApi.find_spaces_by_ids, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at creator_id ended_at host_ids id invited_user_ids is_ticketed
                            lang participant_count scheduled_start speaker_ids started_at state subscriber_count title topic_ids updated_at]
      if @api_client.config.client_side_validation && opts[:space_fields] && !opts[:space_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"space_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:space_fields].nil? && opts[:space_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"space_fields"]" when calling SpacesApi.find_spaces_by_ids, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[creator_id host_ids invited_user_ids speaker_ids topic_ids]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling SpacesApi.find_spaces_by_ids, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling SpacesApi.find_spaces_by_ids, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[description id name]
      if @api_client.config.client_side_validation && opts[:topic_fields] && !opts[:topic_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"topic_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:topic_fields].nil? && opts[:topic_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"topic_fields"]" when calling SpacesApi.find_spaces_by_ids, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/spaces"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:ids] = @api_client.build_collection_param(ids, :multi)
      unless opts[:space_fields].nil?
        query_params[:'space.fields'] =
          @api_client.build_collection_param(opts[:space_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:topic_fields].nil?
        query_params[:'topic.fields'] =
          @api_client.build_collection_param(opts[:topic_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2SpacesResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken BearerToken]

      new_options = opts.merge(
        operation: :"SpacesApi.find_spaces_by_ids",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: SpacesApi#find_spaces_by_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Search for Spaces
    # Returns Spaces that match the provided query.
    # @param query [String] The search query.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state The state of Spaces to search for. (default to 'all')
    # @option opts [Integer] :max_results The number of results to return. (default to 100)
    # @option opts [Array<String>] :space_fields A comma separated list of Space fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :topic_fields A comma separated list of Topic fields to display.
    # @return [Get2SpacesSearchResponse]
    def search_spaces(query, opts = {})
      data, _status_code, _headers = search_spaces_with_http_info(query, opts)
      data
    end

    # Search for Spaces
    # Returns Spaces that match the provided query.
    # @param query [String] The search query.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :state The state of Spaces to search for. (default to 'all')
    # @option opts [Integer] :max_results The number of results to return. (default to 100)
    # @option opts [Array<String>] :space_fields A comma separated list of Space fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :topic_fields A comma separated list of Topic fields to display.
    # @return [Array<(Get2SpacesSearchResponse, Integer, Hash)>] Get2SpacesSearchResponse data, response status code and response headers
    def search_spaces_with_http_info(query, opts = {})
      @api_client.config.logger.debug "Calling API: SpacesApi.search_spaces ..." if @api_client.config.debugging
      # verify the required parameter 'query' is set
      raise ArgumentError, "Missing the required parameter 'query' when calling SpacesApi.search_spaces" if @api_client.config.client_side_validation && query.nil?

      if @api_client.config.client_side_validation && query.to_s.length > 2048
        raise ArgumentError,
              'invalid value for "query" when calling SpacesApi.search_spaces, the character length must be smaller than or equal to 2048.'
      end

      if @api_client.config.client_side_validation && query.to_s.empty?
        raise ArgumentError,
              'invalid value for "query" when calling SpacesApi.search_spaces, the character length must be great than or equal to 1.'
      end

      allowable_values = %w[live scheduled all]
      raise ArgumentError, "invalid value for \"state\", must be one of #{allowable_values}" if @api_client.config.client_side_validation && opts[:state] && !allowable_values.include?(opts[:state])

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] > 100
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling SpacesApi.search_spaces, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] < 1
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling SpacesApi.search_spaces, must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at creator_id ended_at host_ids id invited_user_ids is_ticketed
                            lang participant_count scheduled_start speaker_ids started_at state subscriber_count title topic_ids updated_at]
      if @api_client.config.client_side_validation && opts[:space_fields] && !opts[:space_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"space_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:space_fields].nil? && opts[:space_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"space_fields"]" when calling SpacesApi.search_spaces, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[creator_id host_ids invited_user_ids speaker_ids topic_ids]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling SpacesApi.search_spaces, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling SpacesApi.search_spaces, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[description id name]
      if @api_client.config.client_side_validation && opts[:topic_fields] && !opts[:topic_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"topic_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:topic_fields].nil? && opts[:topic_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"topic_fields"]" when calling SpacesApi.search_spaces, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/spaces/search"

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:query] = query
      query_params[:state] = opts[:state] unless opts[:state].nil?
      query_params[:max_results] = opts[:max_results] unless opts[:max_results].nil?
      unless opts[:space_fields].nil?
        query_params[:'space.fields'] =
          @api_client.build_collection_param(opts[:space_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:topic_fields].nil?
        query_params[:'topic.fields'] =
          @api_client.build_collection_param(opts[:topic_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2SpacesSearchResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken BearerToken]

      new_options = opts.merge(
        operation: :"SpacesApi.search_spaces",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: SpacesApi#search_spaces\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Retrieve the list of Users who purchased a ticket to the given space
    # Retrieves the list of Users who purchased a ticket to the given space
    # @param id [String] The ID of the Space to be retrieved.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
    # @option opts [Integer] :max_results The maximum number of results. (default to 100)
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Get2SpacesIdBuyersResponse]
    def space_buyers(id, opts = {})
      data, _status_code, _headers = space_buyers_with_http_info(id, opts)
      data
    end

    # Retrieve the list of Users who purchased a ticket to the given space
    # Retrieves the list of Users who purchased a ticket to the given space
    # @param id [String] The ID of the Space to be retrieved.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :pagination_token This parameter is used to get a specified &#39;page&#39; of results.
    # @option opts [Integer] :max_results The maximum number of results. (default to 100)
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @return [Array<(Get2SpacesIdBuyersResponse, Integer, Hash)>] Get2SpacesIdBuyersResponse data, response status code and response headers
    def space_buyers_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: SpacesApi.space_buyers ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling SpacesApi.space_buyers" if @api_client.config.client_side_validation && id.nil?

      pattern = Regexp.new(/^[a-zA-Z0-9]{1,13}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        raise ArgumentError,
              "invalid value for 'id' when calling SpacesApi.space_buyers, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:pagination_token].nil? && opts[:pagination_token].to_s.length < 16
        raise ArgumentError,
              'invalid value for "opts[:"pagination_token"]" when calling SpacesApi.space_buyers, the character length must be great than or equal to 16.'
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] > 100
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling SpacesApi.space_buyers, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] < 1
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling SpacesApi.space_buyers, must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling SpacesApi.space_buyers, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["pinned_tweet_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling SpacesApi.space_buyers, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[attachments author_id context_annotations conversation_id created_at
                            edit_controls edit_history_tweet_ids entities geo id in_reply_to_user_id lang non_public_metrics organic_metrics possibly_sensitive promoted_metrics public_metrics referenced_tweets reply_settings source text withheld]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"tweet_fields"]" when calling SpacesApi.space_buyers, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/spaces/{id}/buyers".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:pagination_token] = opts[:pagination_token] unless opts[:pagination_token].nil?
      query_params[:max_results] = opts[:max_results] unless opts[:max_results].nil?
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:tweet_fields].nil?
        query_params[:'tweet.fields'] =
          @api_client.build_collection_param(opts[:tweet_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2SpacesIdBuyersResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || ["OAuth2UserToken"]

      new_options = opts.merge(
        operation: :"SpacesApi.space_buyers",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: SpacesApi#space_buyers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Retrieve Tweets from a Space.
    # Retrieves Tweets shared in the specified Space.
    # @param id [String] The ID of the Space to be retrieved.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The number of Tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100. (default to 100)
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :poll_fields A comma separated list of Poll fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :place_fields A comma separated list of Place fields to display.
    # @return [Get2SpacesIdTweetsResponse]
    def space_tweets(id, opts = {})
      data, _status_code, _headers = space_tweets_with_http_info(id, opts)
      data
    end

    # Retrieve Tweets from a Space.
    # Retrieves Tweets shared in the specified Space.
    # @param id [String] The ID of the Space to be retrieved.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_results The number of Tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100. (default to 100)
    # @option opts [Array<String>] :tweet_fields A comma separated list of Tweet fields to display.
    # @option opts [Array<String>] :expansions A comma separated list of fields to expand.
    # @option opts [Array<String>] :media_fields A comma separated list of Media fields to display.
    # @option opts [Array<String>] :poll_fields A comma separated list of Poll fields to display.
    # @option opts [Array<String>] :user_fields A comma separated list of User fields to display.
    # @option opts [Array<String>] :place_fields A comma separated list of Place fields to display.
    # @return [Array<(Get2SpacesIdTweetsResponse, Integer, Hash)>] Get2SpacesIdTweetsResponse data, response status code and response headers
    def space_tweets_with_http_info(id, opts = {})
      @api_client.config.logger.debug "Calling API: SpacesApi.space_tweets ..." if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling SpacesApi.space_tweets" if @api_client.config.client_side_validation && id.nil?

      pattern = Regexp.new(/^[a-zA-Z0-9]{1,13}$/)
      if @api_client.config.client_side_validation && id !~ pattern
        raise ArgumentError,
              "invalid value for 'id' when calling SpacesApi.space_tweets, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] > 100
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling SpacesApi.space_tweets, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:max_results].nil? && opts[:max_results] < 1
        raise ArgumentError,
              'invalid value for "opts[:"max_results"]" when calling SpacesApi.space_tweets, must be greater than or equal to 1.'
      end

      allowable_values = %w[attachments author_id context_annotations conversation_id created_at
                            edit_controls edit_history_tweet_ids entities geo id in_reply_to_user_id lang non_public_metrics organic_metrics possibly_sensitive promoted_metrics public_metrics referenced_tweets reply_settings source text withheld]
      if @api_client.config.client_side_validation && opts[:tweet_fields] && !opts[:tweet_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"tweet_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:tweet_fields].nil? && opts[:tweet_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"tweet_fields"]" when calling SpacesApi.space_tweets, number of items must be greater than or equal to 1.'
      end

      allowable_values = ["attachments.media_keys", "attachments.poll_ids", "author_id", "edit_history_tweet_ids",
                          "entities.mentions.username", "geo.place_id", "in_reply_to_user_id", "referenced_tweets.id", "referenced_tweets.id.author_id"]
      if @api_client.config.client_side_validation && opts[:expansions] && !opts[:expansions].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"expansions\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:expansions].nil? && opts[:expansions].empty?
        raise ArgumentError,
              'invalid value for "opts[:"expansions"]" when calling SpacesApi.space_tweets, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[alt_text duration_ms height media_key non_public_metrics organic_metrics
                            preview_image_url promoted_metrics public_metrics type url variants width]
      if @api_client.config.client_side_validation && opts[:media_fields] && !opts[:media_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"media_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:media_fields].nil? && opts[:media_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"media_fields"]" when calling SpacesApi.space_tweets, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[duration_minutes end_datetime id options voting_status]
      if @api_client.config.client_side_validation && opts[:poll_fields] && !opts[:poll_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"poll_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:poll_fields].nil? && opts[:poll_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"poll_fields"]" when calling SpacesApi.space_tweets, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[created_at description entities id location name pinned_tweet_id
                            profile_image_url protected public_metrics url username verified verified_type withheld]
      if @api_client.config.client_side_validation && opts[:user_fields] && !opts[:user_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"user_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:user_fields].nil? && opts[:user_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"user_fields"]" when calling SpacesApi.space_tweets, number of items must be greater than or equal to 1.'
      end

      allowable_values = %w[contained_within country country_code full_name geo id name place_type]
      if @api_client.config.client_side_validation && opts[:place_fields] && !opts[:place_fields].all? do |item|
           allowable_values.include?(item)
         end
        raise ArgumentError, "invalid value for \"place_fields\", must include one of #{allowable_values}"
      end

      if @api_client.config.client_side_validation && !opts[:place_fields].nil? && opts[:place_fields].empty?
        raise ArgumentError,
              'invalid value for "opts[:"place_fields"]" when calling SpacesApi.space_tweets, number of items must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = "/2/spaces/{id}/tweets".sub("{id}", CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:max_results] = opts[:max_results] unless opts[:max_results].nil?
      unless opts[:tweet_fields].nil?
        query_params[:'tweet.fields'] =
          @api_client.build_collection_param(opts[:tweet_fields], :csv)
      end
      unless opts[:expansions].nil?
        query_params[:expansions] =
          @api_client.build_collection_param(opts[:expansions], :csv)
      end
      unless opts[:media_fields].nil?
        query_params[:'media.fields'] =
          @api_client.build_collection_param(opts[:media_fields], :csv)
      end
      unless opts[:poll_fields].nil?
        query_params[:'poll.fields'] =
          @api_client.build_collection_param(opts[:poll_fields], :csv)
      end
      unless opts[:user_fields].nil?
        query_params[:'user.fields'] =
          @api_client.build_collection_param(opts[:user_fields], :csv)
      end
      unless opts[:place_fields].nil?
        query_params[:'place.fields'] =
          @api_client.build_collection_param(opts[:place_fields], :csv)
      end

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json", "application/problem+json"])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || "Get2SpacesIdTweetsResponse"

      # auth_names
      auth_names = opts[:debug_auth_names] || %w[OAuth2UserToken BearerToken]

      new_options = opts.merge(
        operation: :"SpacesApi.space_tweets",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: SpacesApi#space_tweets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end
  end
end
