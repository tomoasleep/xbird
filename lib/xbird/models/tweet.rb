# frozen_string_literal: true

# #Twitter API v2
#
# Twitter API v2 available endpoints
#
# The version of the OpenAPI document: 2.62
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.5.0
#

require "date"
require "time"

module Xbird
  class Tweet
    attr_accessor :attachments, :context_annotations, :edit_controls, :entities, :geo, :non_public_metrics,
                  :organic_metrics, :promoted_metrics, :public_metrics, :reply_settings, :withheld

    # Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
    attr_accessor :author_id

    # Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
    attr_accessor :conversation_id

    # Creation time of the Tweet.
    attr_accessor :created_at

    # A list of Tweet Ids in this Tweet chain.
    attr_accessor :edit_history_tweet_ids

    # Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
    attr_accessor :id

    # Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
    attr_accessor :in_reply_to_user_id

    # Language of the Tweet, if detected by Twitter. Returned as a BCP47 language tag.
    attr_accessor :lang

    # Indicates if this Tweet contains URLs marked as sensitive, for example content suitable for mature audiences.
    attr_accessor :possibly_sensitive

    # A list of Tweets this Tweet refers to. For example, if the parent Tweet is a Retweet, a Quoted Tweet or a Reply, it will include the related Tweet referenced to by its parent.
    attr_accessor :referenced_tweets

    # This is deprecated.
    attr_accessor :source

    # The content of the Tweet.
    attr_accessor :text

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        'attachments': :attachments,
        'author_id': :author_id,
        'context_annotations': :context_annotations,
        'conversation_id': :conversation_id,
        'created_at': :created_at,
        'edit_controls': :edit_controls,
        'edit_history_tweet_ids': :edit_history_tweet_ids,
        'entities': :entities,
        'geo': :geo,
        'id': :id,
        'in_reply_to_user_id': :in_reply_to_user_id,
        'lang': :lang,
        'non_public_metrics': :non_public_metrics,
        'organic_metrics': :organic_metrics,
        'possibly_sensitive': :possibly_sensitive,
        'promoted_metrics': :promoted_metrics,
        'public_metrics': :public_metrics,
        'referenced_tweets': :referenced_tweets,
        'reply_settings': :reply_settings,
        'source': :source,
        'text': :text,
        'withheld': :withheld
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        'attachments': :TweetAttachments,
        'author_id': :String,
        'context_annotations': :'Array<ContextAnnotation>',
        'conversation_id': :String,
        'created_at': :Time,
        'edit_controls': :TweetEditControls,
        'edit_history_tweet_ids': :'Array<String>',
        'entities': :FullTextEntities,
        'geo': :TweetGeo,
        'id': :String,
        'in_reply_to_user_id': :String,
        'lang': :String,
        'non_public_metrics': :TweetNonPublicMetrics,
        'organic_metrics': :TweetOrganicMetrics,
        'possibly_sensitive': :Boolean,
        'promoted_metrics': :TweetPromotedMetrics,
        'public_metrics': :TweetPublicMetrics,
        'referenced_tweets': :'Array<TweetReferencedTweetsInner>',
        'reply_settings': :ReplySettings,
        'source': :String,
        'text': :String,
        'withheld': :TweetWithheld
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, "The input argument (attributes) must be a hash in `Xbird::Tweet` initialize method" unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless self.class.attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `Xbird::Tweet`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      self.attachments = attributes[:attachments] if attributes.key?(:attachments)

      self.author_id = attributes[:author_id] if attributes.key?(:author_id)

      if attributes.key?(:context_annotations) && (value = attributes[:context_annotations]).is_a?(Array)
        self.context_annotations = value
      end

      self.conversation_id = attributes[:conversation_id] if attributes.key?(:conversation_id)

      self.created_at = attributes[:created_at] if attributes.key?(:created_at)

      self.edit_controls = attributes[:edit_controls] if attributes.key?(:edit_controls)

      if attributes.key?(:edit_history_tweet_ids) && (value = attributes[:edit_history_tweet_ids]).is_a?(Array)
        self.edit_history_tweet_ids = value
      end

      self.entities = attributes[:entities] if attributes.key?(:entities)

      self.geo = attributes[:geo] if attributes.key?(:geo)

      self.id = attributes[:id] if attributes.key?(:id)

      self.in_reply_to_user_id = attributes[:in_reply_to_user_id] if attributes.key?(:in_reply_to_user_id)

      self.lang = attributes[:lang] if attributes.key?(:lang)

      self.non_public_metrics = attributes[:non_public_metrics] if attributes.key?(:non_public_metrics)

      self.organic_metrics = attributes[:organic_metrics] if attributes.key?(:organic_metrics)

      self.possibly_sensitive = attributes[:possibly_sensitive] if attributes.key?(:possibly_sensitive)

      self.promoted_metrics = attributes[:promoted_metrics] if attributes.key?(:promoted_metrics)

      self.public_metrics = attributes[:public_metrics] if attributes.key?(:public_metrics)

      if attributes.key?(:referenced_tweets) && (value = attributes[:referenced_tweets]).is_a?(Array)
        self.referenced_tweets = value
      end

      self.reply_settings = attributes[:reply_settings] if attributes.key?(:reply_settings)

      self.source = attributes[:source] if attributes.key?(:source)

      self.text = attributes[:text] if attributes.key?(:text)

      return unless attributes.key?(:withheld)

      self.withheld = attributes[:withheld]
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = []
      pattern = Regexp.new(/^[0-9]{1,19}$/)
      invalid_properties.push("invalid value for \"author_id\", must conform to the pattern #{pattern}.") if !@author_id.nil? && @author_id !~ pattern

      invalid_properties.push('invalid value for "context_annotations", number of items must be greater than or equal to 1.') if !@context_annotations.nil? && @context_annotations.empty?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      invalid_properties.push("invalid value for \"conversation_id\", must conform to the pattern #{pattern}.") if !@conversation_id.nil? && @conversation_id !~ pattern

      invalid_properties.push('invalid value for "edit_history_tweet_ids", edit_history_tweet_ids cannot be nil.') if @edit_history_tweet_ids.nil?

      invalid_properties.push('invalid value for "edit_history_tweet_ids", number of items must be greater than or equal to 1.') if @edit_history_tweet_ids.empty?

      invalid_properties.push('invalid value for "id", id cannot be nil.') if @id.nil?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      invalid_properties.push("invalid value for \"id\", must conform to the pattern #{pattern}.") if @id !~ pattern

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      invalid_properties.push("invalid value for \"in_reply_to_user_id\", must conform to the pattern #{pattern}.") if !@in_reply_to_user_id.nil? && @in_reply_to_user_id !~ pattern

      invalid_properties.push('invalid value for "referenced_tweets", number of items must be greater than or equal to 1.') if !@referenced_tweets.nil? && @referenced_tweets.empty?

      invalid_properties.push('invalid value for "text", text cannot be nil.') if @text.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@author_id.nil? && @author_id !~ Regexp.new(/^[0-9]{1,19}$/)
      return false if !@context_annotations.nil? && @context_annotations.empty?
      return false if !@conversation_id.nil? && @conversation_id !~ Regexp.new(/^[0-9]{1,19}$/)
      return false if @edit_history_tweet_ids.nil?
      return false if @edit_history_tweet_ids.empty?
      return false if @id.nil?
      return false if @id !~ Regexp.new(/^[0-9]{1,19}$/)
      return false if !@in_reply_to_user_id.nil? && @in_reply_to_user_id !~ Regexp.new(/^[0-9]{1,19}$/)
      return false if !@referenced_tweets.nil? && @referenced_tweets.empty?
      return false if @text.nil?

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] author_id Value to be assigned
    def author_id=(author_id)
      pattern = Regexp.new(/^[0-9]{1,19}$/)
      raise ArgumentError, "invalid value for \"author_id\", must conform to the pattern #{pattern}." if !author_id.nil? && author_id !~ pattern

      @author_id = author_id
    end

    # Custom attribute writer method with validation
    # @param [Object] context_annotations Value to be assigned
    def context_annotations=(context_annotations)
      if !context_annotations.nil? && context_annotations.empty?
        raise ArgumentError,
              'invalid value for "context_annotations", number of items must be greater than or equal to 1.'
      end

      @context_annotations = context_annotations
    end

    # Custom attribute writer method with validation
    # @param [Object] conversation_id Value to be assigned
    def conversation_id=(conversation_id)
      pattern = Regexp.new(/^[0-9]{1,19}$/)
      raise ArgumentError, "invalid value for \"conversation_id\", must conform to the pattern #{pattern}." if !conversation_id.nil? && conversation_id !~ pattern

      @conversation_id = conversation_id
    end

    # Custom attribute writer method with validation
    # @param [Object] edit_history_tweet_ids Value to be assigned
    def edit_history_tweet_ids=(edit_history_tweet_ids)
      raise ArgumentError, "edit_history_tweet_ids cannot be nil" if edit_history_tweet_ids.nil?

      if edit_history_tweet_ids.empty?
        raise ArgumentError,
              'invalid value for "edit_history_tweet_ids", number of items must be greater than or equal to 1.'
      end

      @edit_history_tweet_ids = edit_history_tweet_ids
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      raise ArgumentError, "id cannot be nil" if id.nil?

      pattern = Regexp.new(/^[0-9]{1,19}$/)
      raise ArgumentError, "invalid value for \"id\", must conform to the pattern #{pattern}." if id !~ pattern

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] in_reply_to_user_id Value to be assigned
    def in_reply_to_user_id=(in_reply_to_user_id)
      pattern = Regexp.new(/^[0-9]{1,19}$/)
      raise ArgumentError, "invalid value for \"in_reply_to_user_id\", must conform to the pattern #{pattern}." if !in_reply_to_user_id.nil? && in_reply_to_user_id !~ pattern

      @in_reply_to_user_id = in_reply_to_user_id
    end

    # Custom attribute writer method with validation
    # @param [Object] referenced_tweets Value to be assigned
    def referenced_tweets=(referenced_tweets)
      if !referenced_tweets.nil? && referenced_tweets.empty?
        raise ArgumentError,
              'invalid value for "referenced_tweets", number of items must be greater than or equal to 1.'
      end

      @referenced_tweets = referenced_tweets
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        attachments == other.attachments &&
        author_id == other.author_id &&
        context_annotations == other.context_annotations &&
        conversation_id == other.conversation_id &&
        created_at == other.created_at &&
        edit_controls == other.edit_controls &&
        edit_history_tweet_ids == other.edit_history_tweet_ids &&
        entities == other.entities &&
        geo == other.geo &&
        id == other.id &&
        in_reply_to_user_id == other.in_reply_to_user_id &&
        lang == other.lang &&
        non_public_metrics == other.non_public_metrics &&
        organic_metrics == other.organic_metrics &&
        possibly_sensitive == other.possibly_sensitive &&
        promoted_metrics == other.promoted_metrics &&
        public_metrics == other.public_metrics &&
        referenced_tweets == other.referenced_tweets &&
        reply_settings == other.reply_settings &&
        source == other.source &&
        text == other.text &&
        withheld == other.withheld
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [attachments, author_id, context_annotations, conversation_id, created_at, edit_controls, edit_history_tweet_ids,
       entities, geo, id, in_reply_to_user_id, lang, non_public_metrics, organic_metrics, possibly_sensitive, promoted_metrics, public_metrics, referenced_tweets, reply_settings, source, text, withheld].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            send("#{key}=", attributes[self.class.attribute_map[key]].map do |v|
                              _deserialize(::Regexp.last_match(1), v)
                            end)
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Xbird.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
