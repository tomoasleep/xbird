# frozen_string_literal: true

# #Twitter API v2
#
# Twitter API v2 available endpoints
#
# The version of the OpenAPI document: 2.62
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.5.0
#

require "date"
require "time"

module Xbird
  class Place
    attr_accessor :contained_within, :geo, :place_type

    # The full name of the county in which this place exists.
    attr_accessor :country

    # A two-letter ISO 3166-1 alpha-2 country code.
    attr_accessor :country_code

    # The full name of this place.
    attr_accessor :full_name

    # The identifier for this place.
    attr_accessor :id

    # The human readable name of this place.
    attr_accessor :name

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        'contained_within': :contained_within,
        'country': :country,
        'country_code': :country_code,
        'full_name': :full_name,
        'geo': :geo,
        'id': :id,
        'name': :name,
        'place_type': :place_type
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        'contained_within': :'Array<String>',
        'country': :String,
        'country_code': :String,
        'full_name': :String,
        'geo': :Geo,
        'id': :String,
        'name': :String,
        'place_type': :PlaceType
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, "The input argument (attributes) must be a hash in `Xbird::Place` initialize method" unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless self.class.attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `Xbird::Place`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      if attributes.key?(:contained_within) && (value = attributes[:contained_within]).is_a?(Array)
        self.contained_within = value
      end

      self.country = attributes[:country] if attributes.key?(:country)

      self.country_code = attributes[:country_code] if attributes.key?(:country_code)

      self.full_name = attributes[:full_name] if attributes.key?(:full_name)

      self.geo = attributes[:geo] if attributes.key?(:geo)

      self.id = attributes[:id] if attributes.key?(:id)

      self.name = attributes[:name] if attributes.key?(:name)

      return unless attributes.key?(:place_type)

      self.place_type = attributes[:place_type]
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = []
      invalid_properties.push('invalid value for "contained_within", number of items must be greater than or equal to 1.') if !@contained_within.nil? && @contained_within.empty?

      pattern = Regexp.new(/^[A-Z]{2}$/)
      invalid_properties.push("invalid value for \"country_code\", must conform to the pattern #{pattern}.") if !@country_code.nil? && @country_code !~ pattern

      invalid_properties.push('invalid value for "full_name", full_name cannot be nil.') if @full_name.nil?

      invalid_properties.push('invalid value for "id", id cannot be nil.') if @id.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@contained_within.nil? && @contained_within.empty?
      return false if !@country_code.nil? && @country_code !~ Regexp.new(/^[A-Z]{2}$/)
      return false if @full_name.nil?
      return false if @id.nil?

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] contained_within Value to be assigned
    def contained_within=(contained_within)
      raise ArgumentError, 'invalid value for "contained_within", number of items must be greater than or equal to 1.' if !contained_within.nil? && contained_within.empty?

      @contained_within = contained_within
    end

    # Custom attribute writer method with validation
    # @param [Object] country_code Value to be assigned
    def country_code=(country_code)
      pattern = Regexp.new(/^[A-Z]{2}$/)
      raise ArgumentError, "invalid value for \"country_code\", must conform to the pattern #{pattern}." if !country_code.nil? && country_code !~ pattern

      @country_code = country_code
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        contained_within == other.contained_within &&
        country == other.country &&
        country_code == other.country_code &&
        full_name == other.full_name &&
        geo == other.geo &&
        id == other.id &&
        name == other.name &&
        place_type == other.place_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [contained_within, country, country_code, full_name, geo, id, name, place_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            send("#{key}=", attributes[self.class.attribute_map[key]].map do |v|
                              _deserialize(::Regexp.last_match(1), v)
                            end)
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Xbird.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
