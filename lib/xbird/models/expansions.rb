# frozen_string_literal: true

# #Twitter API v2
#
# Twitter API v2 available endpoints
#
# The version of the OpenAPI document: 2.62
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.5.0
#

require "date"
require "time"

module Xbird
  class Expansions
    attr_accessor :media, :places, :polls, :topics, :tweets, :users

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        'media': :media,
        'places': :places,
        'polls': :polls,
        'topics': :topics,
        'tweets': :tweets,
        'users': :users
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        'media': :'Array<Media>',
        'places': :'Array<Place>',
        'polls': :'Array<Poll>',
        'topics': :'Array<Topic>',
        'tweets': :'Array<Tweet>',
        'users': :'Array<User>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, "The input argument (attributes) must be a hash in `Xbird::Expansions` initialize method" unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless self.class.attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `Xbird::Expansions`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      if attributes.key?(:media) && (value = attributes[:media]).is_a?(Array)
        self.media = value
      end

      if attributes.key?(:places) && (value = attributes[:places]).is_a?(Array)
        self.places = value
      end

      if attributes.key?(:polls) && (value = attributes[:polls]).is_a?(Array)
        self.polls = value
      end

      if attributes.key?(:topics) && (value = attributes[:topics]).is_a?(Array)
        self.topics = value
      end

      if attributes.key?(:tweets) && (value = attributes[:tweets]).is_a?(Array)
        self.tweets = value
      end

      return unless attributes.key?(:users)
      return unless (value = attributes[:users]).is_a?(Array)

      self.users = value
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = []
      invalid_properties.push('invalid value for "media", number of items must be greater than or equal to 1.') if !@media.nil? && @media.empty?

      invalid_properties.push('invalid value for "places", number of items must be greater than or equal to 1.') if !@places.nil? && @places.empty?

      invalid_properties.push('invalid value for "polls", number of items must be greater than or equal to 1.') if !@polls.nil? && @polls.empty?

      invalid_properties.push('invalid value for "topics", number of items must be greater than or equal to 1.') if !@topics.nil? && @topics.empty?

      invalid_properties.push('invalid value for "tweets", number of items must be greater than or equal to 1.') if !@tweets.nil? && @tweets.empty?

      invalid_properties.push('invalid value for "users", number of items must be greater than or equal to 1.') if !@users.nil? && @users.empty?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@media.nil? && @media.empty?
      return false if !@places.nil? && @places.empty?
      return false if !@polls.nil? && @polls.empty?
      return false if !@topics.nil? && @topics.empty?
      return false if !@tweets.nil? && @tweets.empty?
      return false if !@users.nil? && @users.empty?

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] media Value to be assigned
    def media=(media)
      raise ArgumentError, 'invalid value for "media", number of items must be greater than or equal to 1.' if !media.nil? && media.empty?

      @media = media
    end

    # Custom attribute writer method with validation
    # @param [Object] places Value to be assigned
    def places=(places)
      raise ArgumentError, 'invalid value for "places", number of items must be greater than or equal to 1.' if !places.nil? && places.empty?

      @places = places
    end

    # Custom attribute writer method with validation
    # @param [Object] polls Value to be assigned
    def polls=(polls)
      raise ArgumentError, 'invalid value for "polls", number of items must be greater than or equal to 1.' if !polls.nil? && polls.empty?

      @polls = polls
    end

    # Custom attribute writer method with validation
    # @param [Object] topics Value to be assigned
    def topics=(topics)
      raise ArgumentError, 'invalid value for "topics", number of items must be greater than or equal to 1.' if !topics.nil? && topics.empty?

      @topics = topics
    end

    # Custom attribute writer method with validation
    # @param [Object] tweets Value to be assigned
    def tweets=(tweets)
      raise ArgumentError, 'invalid value for "tweets", number of items must be greater than or equal to 1.' if !tweets.nil? && tweets.empty?

      @tweets = tweets
    end

    # Custom attribute writer method with validation
    # @param [Object] users Value to be assigned
    def users=(users)
      raise ArgumentError, 'invalid value for "users", number of items must be greater than or equal to 1.' if !users.nil? && users.empty?

      @users = users
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        media == other.media &&
        places == other.places &&
        polls == other.polls &&
        topics == other.topics &&
        tweets == other.tweets &&
        users == other.users
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [media, places, polls, topics, tweets, users].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            send("#{key}=", attributes[self.class.attribute_map[key]].map do |v|
                              _deserialize(::Regexp.last_match(1), v)
                            end)
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Xbird.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
