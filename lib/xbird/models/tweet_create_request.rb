# frozen_string_literal: true

# #Twitter API v2
#
# Twitter API v2 available endpoints
#
# The version of the OpenAPI document: 2.62
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.5.0
#

require "date"
require "time"

module Xbird
  class TweetCreateRequest
    # Card Uri Parameter. This is mutually exclusive from Quote Tweet Id, Poll, Media, and Direct Message Deep Link.
    attr_accessor :card_uri

    # Link to take the conversation from the public timeline to a private Direct Message.
    attr_accessor :direct_message_deep_link

    # Exclusive Tweet for super followers.
    attr_accessor :for_super_followers_only

    attr_accessor :geo, :media, :poll, :reply

    # Nullcasted (promoted-only) Tweets do not appear in the public timeline and are not served to followers.
    attr_accessor :nullcast

    # Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
    attr_accessor :quote_tweet_id

    # Settings to indicate who can reply to the Tweet.
    attr_accessor :reply_settings

    # The content of the Tweet.
    attr_accessor :text

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        'card_uri': :card_uri,
        'direct_message_deep_link': :direct_message_deep_link,
        'for_super_followers_only': :for_super_followers_only,
        'geo': :geo,
        'media': :media,
        'nullcast': :nullcast,
        'poll': :poll,
        'quote_tweet_id': :quote_tweet_id,
        'reply': :reply,
        'reply_settings': :reply_settings,
        'text': :text
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        'card_uri': :String,
        'direct_message_deep_link': :String,
        'for_super_followers_only': :Boolean,
        'geo': :TweetCreateRequestGeo,
        'media': :TweetCreateRequestMedia,
        'nullcast': :Boolean,
        'poll': :TweetCreateRequestPoll,
        'quote_tweet_id': :String,
        'reply': :TweetCreateRequestReply,
        'reply_settings': :String,
        'text': :String
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError,
              "The input argument (attributes) must be a hash in `Xbird::TweetCreateRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless self.class.attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `Xbird::TweetCreateRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      self.card_uri = attributes[:card_uri] if attributes.key?(:card_uri)

      self.direct_message_deep_link = attributes[:direct_message_deep_link] if attributes.key?(:direct_message_deep_link)

      self.for_super_followers_only = if attributes.key?(:for_super_followers_only)
                                        attributes[:for_super_followers_only]
                                      else
                                        false
                                      end

      self.geo = attributes[:geo] if attributes.key?(:geo)

      self.media = attributes[:media] if attributes.key?(:media)

      self.nullcast = if attributes.key?(:nullcast)
                        attributes[:nullcast]
                      else
                        false
                      end

      self.poll = attributes[:poll] if attributes.key?(:poll)

      self.quote_tweet_id = attributes[:quote_tweet_id] if attributes.key?(:quote_tweet_id)

      self.reply = attributes[:reply] if attributes.key?(:reply)

      self.reply_settings = attributes[:reply_settings] if attributes.key?(:reply_settings)

      return unless attributes.key?(:text)

      self.text = attributes[:text]
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = []
      pattern = Regexp.new(/^[0-9]{1,19}$/)
      invalid_properties.push("invalid value for \"quote_tweet_id\", must conform to the pattern #{pattern}.") if !@quote_tweet_id.nil? && @quote_tweet_id !~ pattern

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@quote_tweet_id.nil? && @quote_tweet_id !~ Regexp.new(/^[0-9]{1,19}$/)

      reply_settings_validator = EnumAttributeValidator.new("String", %w[following mentionedUsers])
      return false unless reply_settings_validator.valid?(@reply_settings)

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] quote_tweet_id Value to be assigned
    def quote_tweet_id=(quote_tweet_id)
      pattern = Regexp.new(/^[0-9]{1,19}$/)
      raise ArgumentError, "invalid value for \"quote_tweet_id\", must conform to the pattern #{pattern}." if !quote_tweet_id.nil? && quote_tweet_id !~ pattern

      @quote_tweet_id = quote_tweet_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reply_settings Object to be assigned
    def reply_settings=(reply_settings)
      validator = EnumAttributeValidator.new("String", %w[following mentionedUsers])
      raise ArgumentError, "invalid value for \"reply_settings\", must be one of #{validator.allowable_values}." unless validator.valid?(reply_settings)

      @reply_settings = reply_settings
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        card_uri == other.card_uri &&
        direct_message_deep_link == other.direct_message_deep_link &&
        for_super_followers_only == other.for_super_followers_only &&
        geo == other.geo &&
        media == other.media &&
        nullcast == other.nullcast &&
        poll == other.poll &&
        quote_tweet_id == other.quote_tweet_id &&
        reply == other.reply &&
        reply_settings == other.reply_settings &&
        text == other.text
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [card_uri, direct_message_deep_link, for_super_followers_only, geo, media, nullcast, poll, quote_tweet_id, reply,
       reply_settings, text].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            send("#{key}=", attributes[self.class.attribute_map[key]].map do |v|
                              _deserialize(::Regexp.last_match(1), v)
                            end)
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Xbird.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
